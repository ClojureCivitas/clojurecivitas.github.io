<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Clojure Civitas</title>
<link>https://clojurecivitas.github.io/posts.html</link>
<atom:link href="https://clojurecivitas.github.io/posts.xml" rel="self" type="application/rss+xml"/>
<description></description>
<image>
<url>https://clojurecivitas.github.io/images/civitas-icon.svg</url>
<title>Clojure Civitas</title>
<link>https://clojurecivitas.github.io/posts.html</link>
</image>
<generator>quarto-1.7.31</generator>
<lastBuildDate>Thu, 05 Jun 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>Clean object printing by removing extraneous</title>
  <dc:creator>Timothy Pratley</dc:creator>
  <link>https://clojurecivitas.github.io/idea/print/object/remove_extraneous.html</link>
  <description><![CDATA[ 





<style></style>
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="idea/print/object/remove_extraneous_files/md-default0.js" type="text/javascript"></script>
<script src="idea/print/object/remove_extraneous_files/md-default1.js" type="text/javascript"></script>
<div class="sourceClojure">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb1-1">^{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clay</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:title</span>  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Clean object printing by removing extraneous"</span></span>
<span id="cb1-2">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:quarto</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:author</span>   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:timothypratley</span></span>
<span id="cb1-3">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span>     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:post</span></span>
<span id="cb1-4">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:date</span>     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2025-06-05"</span></span>
<span id="cb1-5">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:category</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure</span></span>
<span id="cb1-6">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:tags</span>     [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:print-method</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:objects</span>]}}}</span>
<span id="cb1-7">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ns</span> idea.<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">print</span>.object.remove-extraneous</span>
<span id="cb1-8">  (<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:require</span> [clojure.string <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:as</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span>])</span>
<span id="cb1-9">  (<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:import</span> (clojure.lang MultiFn)</span>
<span id="cb1-10">           (java.io Writer)))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb2-1">(set! <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">*warn-on-reflection*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb3-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb4-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> remove-extraneous</span></span>
<span id="cb4-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Clojure compiles with unique names that include things like `/eval32352/` and `--4321`.</span></span>
<span id="cb4-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  These are rarely useful when printing a function.</span></span>
<span id="cb4-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  They can still be accessed via (class x) or similar."</span></span>
<span id="cb4-5">  [s]</span>
<span id="cb4-6">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;</span> s</span>
<span id="cb4-7">      (str/replace <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">#"/eval\d+/"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb4-8">      (str/replace <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">#"--\d+(/|$)"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$1"</span>)))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb5-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> format-class-name </span>^String [s]</span>
<span id="cb5-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [[ns-str &amp; names] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;</span> (remove-extraneous s)</span>
<span id="cb5-3">                             (str/split <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">#"/"</span>))]</span>
<span id="cb5-4">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> ns-str names)</span>
<span id="cb5-5">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span> (str/join <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$"</span> names))</span>
<span id="cb5-6">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;</span> s (str/split <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">#"\."</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">last</span>)))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb6-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> class-name</span></span>
<span id="cb6-2">  [x]</span>
<span id="cb6-3">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> .getName Compiler/demunge))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb7-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> object-str </span>^String [x]</span>
<span id="cb7-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#object ["</span> (format-class-name (class-name x)) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"]"</span>))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb8-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> object-writer </span>[x ^Writer w]</span>
<span id="cb8-2">  (.write w (object-str x)))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb9-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> pr-str* </span>[x]</span>
<span id="cb9-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [original-method (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">get-method</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">print-method</span> Object)]</span>
<span id="cb9-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span></span>
<span id="cb9-4">      (.addMethod ^MultiFn <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">print-method</span> Object object-writer)</span>
<span id="cb9-5">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pr-str</span> x)</span>
<span id="cb9-6">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">finally</span></span>
<span id="cb9-7">        (.addMethod ^MultiFn <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">print-method</span> Object original-method)))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb10-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">comment</span></span>
<span id="cb10-2">  (pr-str* pr-str*)</span>
<span id="cb10-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:-</span>)</span></code></pre></div>
</div>
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/content/idea/print/object/remove_extraneous.clj">content/idea/print/object/remove_extraneous.clj</a></small></small></pre></div>



 ]]></description>
  <guid>https://clojurecivitas.github.io/idea/print/object/remove_extraneous.html</guid>
  <pubDate>Thu, 05 Jun 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Core Async Flow Visualization</title>
  <dc:creator>Daniel Slutsky</dc:creator>
  <dc:creator>Timothy Pratley</dc:creator>
  <link>https://clojurecivitas.github.io/lib/core/async/flow/visualization.html</link>
  <description><![CDATA[ 





<style></style>
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="lib/core/async/flow/visualization_files/md-default0.js" type="text/javascript"></script>
<script src="lib/core/async/flow/visualization_files/md-default1.js" type="text/javascript"></script>
<section id="visualizing-core.async.flows" class="level1">
<h1>Visualizing core.async.flows</h1>
<div class="sourceClojure">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb1-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> id-for </span>[x]</span>
<span id="cb1-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">cond</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">keyword?</span> x) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">symbol</span> x))</span>
<span id="cb1-3">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vector?</span> x) (str/join <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> id-for x))</span>
<span id="cb1-4">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">string?</span> x) x</span>
<span id="cb1-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:else</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span> x)))</span></code></pre></div>
</div>
<p>would be more interesting if we show the buffer state</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb2-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> conn-table </span>[flow]</span>
<span id="cb2-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:keys</span> [conns procs]} (datafy/datafy flow)</span>
<span id="cb2-3">        all-proc-chans (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> #{} cat conns)]</span>
<span id="cb2-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: add channel state</span></span>
<span id="cb2-5">    ^<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:kind/table</span></span>
<span id="cb2-6">    {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:row-maps</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vec</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> [[from to] conns]</span>
<span id="cb2-7">                      {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:source</span> (id-for from)</span>
<span id="cb2-8">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:target</span> (id-for to)}))}))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb3-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> proc-table </span>[flow]</span>
<span id="cb3-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:keys</span> [conns procs]} (datafy/datafy flow)</span>
<span id="cb3-3">        all-proc-chans (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> #{} cat conns)]</span>
<span id="cb3-4">    ^<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:kind/table</span></span>
<span id="cb3-5">    {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:column-names</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"process"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start params"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in chans"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"out chans"</span>]</span>
<span id="cb3-6">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:row-vectors</span>  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> [[proc-key proc-chans] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">group-by</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">first</span> all-proc-chans)]</span>
<span id="cb3-7">                     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:keys</span> [args proc]} (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">get</span> procs proc-key)</span>
<span id="cb3-8">                           {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:keys</span> [desc]} proc</span>
<span id="cb3-9">                           {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:keys</span> [params ins outs]} desc]</span>
<span id="cb3-10">                       [(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">name</span> proc-key)</span>
<span id="cb3-11">                        ^<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:kind/hiccup</span></span>
<span id="cb3-12">                        [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:div</span></span>
<span id="cb3-13">                         (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> [[k param] params]</span>
<span id="cb3-14">                           [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:div</span></span>
<span id="cb3-15">                            [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:div</span> [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:strong</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">name</span> k)] <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">": "</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">get</span> args k)]</span>
<span id="cb3-16">                            [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:div</span> param]])]</span>
<span id="cb3-17">                        ^<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:kind/hiccup</span></span>
<span id="cb3-18">                        [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:div</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> [[k v] ins]</span>
<span id="cb3-19">                                [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:div</span> [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:strong</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">name</span> k)] <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">": "</span> v])]</span>
<span id="cb3-20">                        ^<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:kind/hiccup</span></span>
<span id="cb3-21">                        [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:div</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> [[k v] outs]</span>
<span id="cb3-22">                                [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:div</span> [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:strong</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">name</span> k)] <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">": "</span> v])]]))}))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb4-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> elkg </span>[flow]</span>
<span id="cb4-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:keys</span> [conns procs]} (datafy/datafy flow)</span>
<span id="cb4-3">        all-proc-chans (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> #{} cat conns)</span>
<span id="cb4-4">        chans-as-ports <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb4-5">        with-content <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>]</span>
<span id="cb4-6">    {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:id</span>            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"G"</span></span>
<span id="cb4-7">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:layoutOptions</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:elk.algorithm</span>         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"layered"</span></span>
<span id="cb4-8">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:elk.direction</span>         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DOWN"</span></span>
<span id="cb4-9">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:elk.hierarchyHandling</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"INCLUDE_CHILDREN"</span>}</span>
<span id="cb4-10">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:children</span></span>
<span id="cb4-11">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> [[proc-key proc-chans] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">group-by</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">first</span> all-proc-chans)]</span>
<span id="cb4-12">       (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:keys</span> [args proc]} (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">get</span> procs proc-key)</span>
<span id="cb4-13">             {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:keys</span> [desc]} proc</span>
<span id="cb4-14">             {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:keys</span> [params ins outs]} desc</span>
<span id="cb4-15">             width <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb4-16">             height <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb4-17">             <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">content</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">when</span> with-content</span>
<span id="cb4-18">                       [{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:id</span>            (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">name</span> proc-key) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_content"</span>)</span>
<span id="cb4-19">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:width</span>         (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span> width <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb4-20">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:height</span>        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span> height <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb4-21">                         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; nope, do it by id</span></span>
<span id="cb4-22">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:layoutOptions</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:content</span> (str/join <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\newline</span></span>
<span id="cb4-23">                                                            (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> [[k param] params]</span>
<span id="cb4-24">                                                              (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">name</span> k) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" ("</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">get</span> args k) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">") "</span> param)))}}])</span>
<span id="cb4-25">             <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">children</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> [[_ chan <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:as</span> proc-chan] proc-chans]</span>
<span id="cb4-26">                        {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:id</span>       (id-for proc-chan)</span>
<span id="cb4-27">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:width</span>    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb4-28">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:height</span>   <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb4-29">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:labels</span>   [{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:text</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">name</span> chan)}]</span>
<span id="cb4-30">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:children</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vec</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">when</span> with-content</span>
<span id="cb4-31">                                          [{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:id</span>            (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span> (id-for proc-chan) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_content"</span>)</span>
<span id="cb4-32">                                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:width</span>         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb4-33">                                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:height</span>        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb4-34">                                            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; nope, do it by id</span></span>
<span id="cb4-35">                                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:layoutOptions</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:content</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">name</span> chan)</span>
<span id="cb4-36">                                                                          <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\newline</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\newline</span></span>
<span id="cb4-37">                                                                          (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">get</span> outs chan)</span>
<span id="cb4-38">                                                                              (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">get</span> ins chan)))}}]))})]</span>
<span id="cb4-39">         {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:id</span>            (id-for proc-key)</span>
<span id="cb4-40">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:width</span>         <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb4-41">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:height</span>        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb4-42">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:layoutOptions</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:org.eclipse.elk.nodeLabels.placement</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OUTSIDE V_TOP H_LEFT"</span>}</span>
<span id="cb4-43">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:labels</span>        [{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:text</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">name</span> proc-key)}]</span>
<span id="cb4-44">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:children</span>      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vec</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">concat</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">content</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">when</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> chans-as-ports) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">children</span>)))</span>
<span id="cb4-45"></span>
<span id="cb4-46">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:ports</span></span>
<span id="cb4-47">          (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vec</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">when</span> chans-as-ports <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">children</span>))}))</span>
<span id="cb4-48">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:edges</span></span>
<span id="cb4-49">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vec</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> [[from to] conns]</span>
<span id="cb4-50">            {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:id</span>      (id-for [from to])</span>
<span id="cb4-51">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:sources</span> [(id-for from)]</span>
<span id="cb4-52">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:targets</span> [(id-for to)]}))}))</span></code></pre></div>
</div>
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/content/lib/core/async/flow/visualization.clj">content/lib/core/async/flow/visualization.clj</a></small></small></pre></div>


</section>

 ]]></description>
  <guid>https://clojurecivitas.github.io/lib/core/async/flow/visualization.html</guid>
  <pubDate>Tue, 03 Jun 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Core Async Flow Exploration</title>
  <dc:creator>Daniel Slutsky</dc:creator>
  <dc:creator>Timothy Pratley</dc:creator>
  <link>https://clojurecivitas.github.io/lib/core/async/flow/exploration.html</link>
  <description><![CDATA[ 





<style></style>
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="lib/core/async/flow/exploration_files/md-default0.js" type="text/javascript"></script>
<script src="lib/core/async/flow/exploration_files/md-default1.js" type="text/javascript"></script>
<section id="visualizing-core.async.flows" class="level1">
<h1>Visualizing core.async.flows</h1>
<p>Clojure’s async flows are Directed Acyclic Graphs (DAGs) of channel operations. The new <a href="https://github.com/clojure/core.async.flow-monitor">flow-monitor</a> can visualize these flows.</p>
<section id="what-well-explore" class="level2">
<h2 class="anchored" data-anchor-id="what-well-explore">What We’ll Explore</h2>
<ol type="1">
<li>Basic flow structure (processes, channels, connections)</li>
<li>Static visualization of a sample flow</li>
<li>Evolution as the flow changes</li>
</ol>
<div class="sourceClojure">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb1-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> stats-flow</span></span>
<span id="cb1-2">  (flow/create-flow stats/config))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb2-1">(fv/proc-table stats-flow)</span></code></pre></div>
</div>
<div class="clay-table">
<div class="table-responsive">
<table class="table table-hover clay-table caption-top" data-quarto-postprocess="true">
<colgroup>
<col style="width: 25%">
<col style="width: 25%">
<col style="width: 25%">
<col style="width: 25%">
</colgroup>
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">process</th>
<th data-quarto-table-cell-role="th">start params</th>
<th data-quarto-table-cell-role="th">in chans</th>
<th data-quarto-table-cell-role="th">out chans</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>notifier</td>
<td><div>
<div>
<div>
<strong>prefix</strong>: Alert:
</div>
<div>
Log message prefix
</div>
</div>
</div></td>
<td><div>
<div>
<strong>in</strong>: Channel to receive messages
</div>
</div></td>
<td><div>

</div></td>
</tr>
<tr class="even">
<td>aggregator</td>
<td><div>
<div>
<div>
<strong>min</strong>: 1
</div>
<div>
Min value, alert if lower
</div>
</div>
<div>
<div>
<strong>max</strong>: 10
</div>
<div>
Max value, alert if higher
</div>
</div>
</div></td>
<td><div>
<div>
<strong>stat</strong>: Channel to receive stat values
</div>
<div>
<strong>poke</strong>: Channel to poke when it is time to report a window of data to the log
</div>
</div></td>
<td><div>
<div>
<strong>alert</strong>: Notify of value out of range {:val value, :error :high|:low
</div>
</div></td>
</tr>
<tr class="odd">
<td>scheduler</td>
<td><div>
<div>
<div>
<strong>wait</strong>: 3000
</div>
<div>
Time to wait between pokes
</div>
</div>
</div></td>
<td><div>

</div></td>
<td><div>
<div>
<strong>out</strong>: Poke channel, will send true when the alarm goes off
</div>
</div></td>
</tr>
<tr class="even">
<td>generator</td>
<td><div>
<div>
<div>
<strong>min</strong>: 0
</div>
<div>
Min value to generate
</div>
</div>
<div>
<div>
<strong>max</strong>: 12
</div>
<div>
Max value to generate
</div>
</div>
<div>
<div>
<strong>wait</strong>: 500
</div>
<div>
Time in ms to wait between generating
</div>
</div>
</div></td>
<td><div>

</div></td>
<td><div>
<div>
<strong>out</strong>: Output channel for stats
</div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb3-1">(fv/conn-table stats-flow)</span></code></pre></div>
</div>
<div class="clay-table">
<div class="table-responsive">
<table class="table table-hover clay-table caption-top" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">source</th>
<th data-quarto-table-cell-role="th">target</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>generator_out</td>
<td>aggregator_stat</td>
</tr>
<tr class="even">
<td>scheduler_out</td>
<td>aggregator_poke</td>
</tr>
<tr class="odd">
<td>aggregator_alert</td>
<td>notifier_in</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb4-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> chs </span>(flow/start stats-flow))</span></code></pre></div>
</div>
<p>trigger an alert</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb5-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> report-chan </span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:report-chan</span> chs))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb6-1">(flow/ping stats-flow)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb7-1">{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:aggregator</span></span>
<span id="cb7-2"> #<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow</span>{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:pid</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:aggregator</span>,</span>
<span id="cb7-3">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:status</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:paused</span>,</span>
<span id="cb7-4">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:state</span></span>
<span id="cb7-5">                           {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb7-6">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb7-7">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/pid</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:aggregator</span>,</span>
<span id="cb7-8">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:vals</span> []},</span>
<span id="cb7-9">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-10">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:ins</span></span>
<span id="cb7-11">                           {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span></span>
<span id="cb7-12">                            {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-13">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-14">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb7-15">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span></span>
<span id="cb7-16">                             {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> FixedBuffer,</span>
<span id="cb7-17">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-18">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>}},</span>
<span id="cb7-19">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:poke</span></span>
<span id="cb7-20">                            {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-21">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-22">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb7-23">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span></span>
<span id="cb7-24">                             {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> FixedBuffer,</span>
<span id="cb7-25">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-26">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>}}},</span>
<span id="cb7-27">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:outs</span></span>
<span id="cb7-28">                           {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alert</span></span>
<span id="cb7-29">                            {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-30">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-31">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb7-32">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span></span>
<span id="cb7-33">                             {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> SlidingBuffer,</span>
<span id="cb7-34">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-35">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>}}}},</span>
<span id="cb7-36"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:generator</span></span>
<span id="cb7-37"> #<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow</span>{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:pid</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:generator</span>,</span>
<span id="cb7-38">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:status</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:paused</span>,</span>
<span id="cb7-39">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:state</span></span>
<span id="cb7-40">                           {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-41">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,</span>
<span id="cb7-42">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,</span>
<span id="cb7-43">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/pid</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:generator</span>,</span>
<span id="cb7-44">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/in-ports</span></span>
<span id="cb7-45">                            {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span></span>
<span id="cb7-46">                             {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-47">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-48">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb7-49">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span></span>
<span id="cb7-50">                              {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> FixedBuffer,</span>
<span id="cb7-51">                               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-52">                               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>}}},</span>
<span id="cb7-53">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stop</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>]},</span>
<span id="cb7-54">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-55">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:ins</span></span>
<span id="cb7-56">                           {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span></span>
<span id="cb7-57">                            {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-58">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-59">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb7-60">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span></span>
<span id="cb7-61">                             {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> FixedBuffer,</span>
<span id="cb7-62">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-63">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>}}},</span>
<span id="cb7-64">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:outs</span></span>
<span id="cb7-65">                           {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span></span>
<span id="cb7-66">                            {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-67">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-68">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb7-69">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span></span>
<span id="cb7-70">                             {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> FixedBuffer,</span>
<span id="cb7-71">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-72">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>}}}},</span>
<span id="cb7-73"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:notifier</span></span>
<span id="cb7-74"> #<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow</span>{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:pid</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:notifier</span>,</span>
<span id="cb7-75">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:status</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:paused</span>,</span>
<span id="cb7-76">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:state</span></span>
<span id="cb7-77">                           {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:prefix</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alert: "</span>,</span>
<span id="cb7-78">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/pid</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:notifier</span>},</span>
<span id="cb7-79">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-80">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:ins</span></span>
<span id="cb7-81">                           {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:in</span></span>
<span id="cb7-82">                            {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-83">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-84">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb7-85">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span></span>
<span id="cb7-86">                             {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> SlidingBuffer,</span>
<span id="cb7-87">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-88">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>}}},</span>
<span id="cb7-89">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:outs</span> {}},</span>
<span id="cb7-90"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:scheduler</span></span>
<span id="cb7-91"> #<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow</span>{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:pid</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:scheduler</span>,</span>
<span id="cb7-92">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:status</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:paused</span>,</span>
<span id="cb7-93">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:state</span></span>
<span id="cb7-94">                           {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3000</span>,</span>
<span id="cb7-95">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/pid</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:scheduler</span>,</span>
<span id="cb7-96">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/in-ports</span></span>
<span id="cb7-97">                            {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alarm</span></span>
<span id="cb7-98">                             {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-99">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-100">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb7-101">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span></span>
<span id="cb7-102">                              {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> FixedBuffer,</span>
<span id="cb7-103">                               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-104">                               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>}}},</span>
<span id="cb7-105">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stop</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>]},</span>
<span id="cb7-106">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-107">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:ins</span></span>
<span id="cb7-108">                           {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alarm</span></span>
<span id="cb7-109">                            {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-110">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-111">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb7-112">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span></span>
<span id="cb7-113">                             {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> FixedBuffer,</span>
<span id="cb7-114">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-115">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>}}},</span>
<span id="cb7-116">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:outs</span></span>
<span id="cb7-117">                           {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span></span>
<span id="cb7-118">                            {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-119">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-120">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb7-121">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span></span>
<span id="cb7-122">                             {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> FixedBuffer,</span>
<span id="cb7-123">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-124">                              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>}}}}}</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb8-1">(async/poll! report-chan)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb9-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb10-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> error-chan </span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:error-chan</span> chs))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb11-1">(async/poll! error-chan)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb12-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span></span></code></pre></div>
</div>
<p>(flow/stop stats-flow) (async/close! stat-chan)</p>
<p>@(flow/inject stats-flow [:aggregator :poke] [true])</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb13-1">(datafy/datafy stats-flow)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb14-1">{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:procs</span></span>
<span id="cb14-2"> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:generator</span></span>
<span id="cb14-3">  {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:args</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>},</span>
<span id="cb14-4">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:proc</span></span>
<span id="cb14-5">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:step</span> lib.core.async.flow.example.stats/source,</span>
<span id="cb14-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:desc</span></span>
<span id="cb14-7">    {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:params</span></span>
<span id="cb14-8">     {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Min value to generate"</span>,</span>
<span id="cb14-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Max value to generate"</span>,</span>
<span id="cb14-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time in ms to wait between generating"</span>},</span>
<span id="cb14-11">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:outs</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Output channel for stats"</span>}}}},</span>
<span id="cb14-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:aggregator</span></span>
<span id="cb14-13">  {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:args</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>},</span>
<span id="cb14-14">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:proc</span></span>
<span id="cb14-15">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:step</span> lib.core.async.flow.example.stats/aggregator,</span>
<span id="cb14-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:desc</span></span>
<span id="cb14-17">    {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:params</span></span>
<span id="cb14-18">     {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Min value, alert if lower"</span>,</span>
<span id="cb14-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Max value, alert if higher"</span>},</span>
<span id="cb14-20">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:ins</span></span>
<span id="cb14-21">     {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Channel to receive stat values"</span>,</span>
<span id="cb14-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:poke</span></span>
<span id="cb14-23">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Channel to poke when it is time to report a window of data to the log"</span>},</span>
<span id="cb14-24">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:outs</span></span>
<span id="cb14-25">     {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alert</span></span>
<span id="cb14-26">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Notify of value out of range {:val value, :error :high|:low"</span>},</span>
<span id="cb14-27">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:workload</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:compute</span>}}},</span>
<span id="cb14-28">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:scheduler</span></span>
<span id="cb14-29">  {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:args</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3000</span>},</span>
<span id="cb14-30">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:proc</span></span>
<span id="cb14-31">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:step</span> lib.core.async.flow.example.stats/scheduler,</span>
<span id="cb14-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:desc</span></span>
<span id="cb14-33">    {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:params</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time to wait between pokes"</span>},</span>
<span id="cb14-34">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:outs</span></span>
<span id="cb14-35">     {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Poke channel, will send true when the alarm goes off"</span>}}}},</span>
<span id="cb14-36">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:notifier</span></span>
<span id="cb14-37">  {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:args</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:prefix</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alert: "</span>},</span>
<span id="cb14-38">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:proc</span></span>
<span id="cb14-39">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:step</span> lib.core.async.flow.example.stats/printer,</span>
<span id="cb14-40">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:desc</span></span>
<span id="cb14-41">    {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:params</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:prefix</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Log message prefix"</span>},</span>
<span id="cb14-42">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:ins</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:in</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Channel to receive messages"</span>}}},</span>
<span id="cb14-43">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:chan-opts</span></span>
<span id="cb14-44">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:in</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buf-or-n</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> SlidingBuffer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>}}}}},</span>
<span id="cb14-45"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:conns</span></span>
<span id="cb14-46"> [[[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:generator</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span>] [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:aggregator</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span>]]</span>
<span id="cb14-47">  [[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:scheduler</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span>] [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:aggregator</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:poke</span>]]</span>
<span id="cb14-48">  [[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:aggregator</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alert</span>] [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:notifier</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:in</span>]]],</span>
<span id="cb14-49"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:execs</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:mixed</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:io</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:compute</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span>},</span>
<span id="cb14-50"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:chans</span></span>
<span id="cb14-51"> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:ins</span></span>
<span id="cb14-52">  {[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:aggregator</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span>]</span>
<span id="cb14-53">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb14-54">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb14-55">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb14-56">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> FixedBuffer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>}},</span>
<span id="cb14-57">   [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:aggregator</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:poke</span>]</span>
<span id="cb14-58">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb14-59">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb14-60">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb14-61">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> FixedBuffer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>}},</span>
<span id="cb14-62">   [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:notifier</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:in</span>]</span>
<span id="cb14-63">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb14-64">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb14-65">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb14-66">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> SlidingBuffer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>}}},</span>
<span id="cb14-67">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:outs</span></span>
<span id="cb14-68">  {[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:generator</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span>]</span>
<span id="cb14-69">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb14-70">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb14-71">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb14-72">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> FixedBuffer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>}},</span>
<span id="cb14-73">   [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:aggregator</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alert</span>]</span>
<span id="cb14-74">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb14-75">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb14-76">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb14-77">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> SlidingBuffer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>}},</span>
<span id="cb14-78">   [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:scheduler</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span>]</span>
<span id="cb14-79">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb14-80">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb14-81">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb14-82">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> FixedBuffer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>}}},</span>
<span id="cb14-83">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:error</span></span>
<span id="cb14-84">  {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb14-85">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb14-86">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb14-87">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> SlidingBuffer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>}},</span>
<span id="cb14-88">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:report</span></span>
<span id="cb14-89">  {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb14-90">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb14-91">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb14-92">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> SlidingBuffer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>}}}}</span></code></pre></div>
</div>
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/content/lib/core/async/flow/exploration.clj">content/lib/core/async/flow/exploration.clj</a></small></small></pre></div>


</section>
</section>

 ]]></description>
  <guid>https://clojurecivitas.github.io/lib/core/async/flow/exploration.html</guid>
  <pubDate>Mon, 02 Jun 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Core Async Flow Stats Example</title>
  <dc:creator>Alex Miller</dc:creator>
  <dc:creator>Timothy Pratley</dc:creator>
  <link>https://clojurecivitas.github.io/lib/core/async/flow/example/stats.html</link>
  <description><![CDATA[ 





<style></style>
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="lib/core/async/flow/example/stats_files/md-default0.js" type="text/javascript"></script>
<script src="lib/core/async/flow/example/stats_files/md-default1.js" type="text/javascript"></script>
<section id="core-async-flow-stats-example" class="level1">
<h1>Core async flow stats example</h1>
<p>Adapted from https://github.com/puredanger/flow-example</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb1-1">^<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:kind/video</span></span>
<span id="cb1-2">{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:youtube-id</span>   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lXFwf3O4BVY"</span></span>
<span id="cb1-3"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:iframe-width</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"100%"</span>}</span></code></pre></div>
</div>
<iframe allowfullscreen="allowfullscreen" src="https://www.youtube.com/embed/lXFwf3O4BVY" width="100%"></iframe>
<div class="sourceClojure">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb2-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> stat-gen</span></span>
<span id="cb2-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Generates a random value between min (inclusive) and max (exclusive)</span></span>
<span id="cb2-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  and writes it to out chan, waiting wait ms between until stop-atom is flagged."</span></span>
<span id="cb2-4">  ([out <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">min</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">max</span> wait stop-atom]</span>
<span id="cb2-5">   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">loop</span> []</span>
<span id="cb2-6">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">val</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">+</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">min</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rand-int</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">max</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">min</span>)))</span>
<span id="cb2-7">           put (a/&gt;!! out <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">val</span>)]</span>
<span id="cb2-8">       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;(println "stat-gen" (System/identityHashCode stop-atom) val put (not @stop-atom))</span></span>
<span id="cb2-9">       (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">when</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> put (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@stop-atom</span>))</span>
<span id="cb2-10">         (^[<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">long</span>] Thread/sleep wait)</span>
<span id="cb2-11">         (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">recur</span>))))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb3-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> source</span></span>
<span id="cb3-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source proc for random stats"</span></span>
<span id="cb3-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; describe</span></span>
<span id="cb3-4">  ([] {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:params</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span>  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Min value to generate"</span></span>
<span id="cb3-5">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span>  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Max value to generate"</span></span>
<span id="cb3-6">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time in ms to wait between generating"</span>}</span>
<span id="cb3-7">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:outs</span>   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Output channel for stats"</span>}})</span>
<span id="cb3-8"></span>
<span id="cb3-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; init</span></span>
<span id="cb3-10">  ([args]</span>
<span id="cb3-11">   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assoc</span> args</span>
<span id="cb3-12">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/in-ports</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span> (a/chan <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)}</span>
<span id="cb3-13">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stop</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">atom</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>)))</span>
<span id="cb3-14"></span>
<span id="cb3-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; transition</span></span>
<span id="cb3-16">  ([{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:keys</span> [<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">min</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">max</span> wait <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/in-ports</span>] <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:as</span> state} transition]</span>
<span id="cb3-17">   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;(println "transition" transition)</span></span>
<span id="cb3-18">   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> transition</span>
<span id="cb3-19">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/resume</span></span>
<span id="cb3-20">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [stop-atom (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">atom</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>)]</span>
<span id="cb3-21">       (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">future</span> (stat-gen (<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span> in-ports) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">min</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">max</span> wait stop-atom))</span>
<span id="cb3-22">       (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assoc</span> state <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stop</span> stop-atom))</span>
<span id="cb3-23"></span>
<span id="cb3-24">     (<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/pause</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/stop</span>)</span>
<span id="cb3-25">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb3-26">       (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reset!</span> (<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stop</span> state) <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span>)</span>
<span id="cb3-27">       state)))</span>
<span id="cb3-28"></span>
<span id="cb3-29">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; transform</span></span>
<span id="cb3-30">  ([state in msg]</span>
<span id="cb3-31">   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;(println "source transform" in msg)</span></span>
<span id="cb3-32">   [state (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">when</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> in <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span>) {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span> [msg]})]))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb4-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> aggregator</span></span>
<span id="cb4-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; describe</span></span>
<span id="cb4-3">  ([] {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:params</span>   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Min value, alert if lower"</span></span>
<span id="cb4-4">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Max value, alert if higher"</span>}</span>
<span id="cb4-5">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:ins</span>      {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Channel to receive stat values"</span></span>
<span id="cb4-6">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:poke</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Channel to poke when it is time to report a window of data to the log"</span>}</span>
<span id="cb4-7">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:outs</span>     {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alert</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Notify of value out of range {:val value, :error :high|:low"</span>}</span>
<span id="cb4-8">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:workload</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:compute</span></span>
<span id="cb4-9">       })</span>
<span id="cb4-10"></span>
<span id="cb4-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; init</span></span>
<span id="cb4-12">  ([args] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assoc</span> args <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:vals</span> []))</span>
<span id="cb4-13"></span>
<span id="cb4-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; transition</span></span>
<span id="cb4-15">  ([state transition] state)</span>
<span id="cb4-16"></span>
<span id="cb4-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; transform</span></span>
<span id="cb4-18">  ([{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:keys</span> [<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">min</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">max</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vals</span>] <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:as</span> state} input-id msg]</span>
<span id="cb4-19">   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> input-id</span>
<span id="cb4-20">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [state' (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assoc</span> state <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:vals</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">conj</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vals</span> msg))</span>
<span id="cb4-21">                 msgs (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">cond</span></span>
<span id="cb4-22">                        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&lt;</span> msg <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">min</span>) {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alert</span> [{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:val</span> msg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:error</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:low</span>}]}</span>
<span id="cb4-23">                        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&lt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">max</span> msg) {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alert</span> [{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:val</span> msg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:error</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:high</span>}]}</span>
<span id="cb4-24">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span>)]</span>
<span id="cb4-25">             [state' msgs])</span>
<span id="cb4-26">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:poke</span> [(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assoc</span> state <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:vals</span> [])</span>
<span id="cb4-27">            {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/report</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">empty?</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vals</span>)</span>
<span id="cb4-28">                                               [{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}]</span>
<span id="cb4-29">                                               [{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:avg</span>   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">/</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">double</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reduce</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">+</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vals</span>)) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">count</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vals</span>))</span>
<span id="cb4-30">                                                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">count</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vals</span>)}])}]</span>
<span id="cb4-31">     [state <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span>])))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb5-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">comment</span></span>
<span id="cb5-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; test aggregator alert case - no channels involved</span></span>
<span id="cb5-3">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [state {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:vals</span> []}</span>
<span id="cb5-4">        [state' msgs'] (aggregator state <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)]</span>
<span id="cb5-5">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> msgs' {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alert</span> [{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:val</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:error</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:high</span>}]})))</span>
<span id="cb5-6">  )</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb6-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> scheduler</span></span>
<span id="cb6-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; describe</span></span>
<span id="cb6-3">  ([] {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:params</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time to wait between pokes"</span>}</span>
<span id="cb6-4">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:outs</span>   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Poke channel, will send true when the alarm goes off"</span>}})</span>
<span id="cb6-5"></span>
<span id="cb6-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; init</span></span>
<span id="cb6-7">  ([args]</span>
<span id="cb6-8">   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assoc</span> args</span>
<span id="cb6-9">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/in-ports</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alarm</span> (a/chan <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)}</span>
<span id="cb6-10">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stop</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">atom</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>)))</span>
<span id="cb6-11"></span>
<span id="cb6-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; transition</span></span>
<span id="cb6-13">  ([{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:keys</span> [wait <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/in-ports</span>] <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:as</span> state} transition]</span>
<span id="cb6-14">   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;(println "scheduler transition" transition state transition)</span></span>
<span id="cb6-15">   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> transition</span>
<span id="cb6-16">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/resume</span></span>
<span id="cb6-17">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [stop-atom (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">atom</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>)]</span>
<span id="cb6-18">       (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">future</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">loop</span> []</span>
<span id="cb6-19">                 (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [put (a/&gt;!! (<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alarm</span> in-ports) <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span>)]</span>
<span id="cb6-20">                   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">when</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> put (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@stop-atom</span>))</span>
<span id="cb6-21">                     (^[<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">long</span>] Thread/sleep wait)</span>
<span id="cb6-22">                     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">recur</span>)))))</span>
<span id="cb6-23">       (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assoc</span> state <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stop</span> stop-atom))</span>
<span id="cb6-24"></span>
<span id="cb6-25">     (<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/pause</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/stop</span>)</span>
<span id="cb6-26">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb6-27">       (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reset!</span> (<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stop</span> state) <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span>)</span>
<span id="cb6-28">       state)))</span>
<span id="cb6-29"></span>
<span id="cb6-30">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; transform</span></span>
<span id="cb6-31">  ([state in msg]</span>
<span id="cb6-32">   [state (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">when</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> in <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alarm</span>) {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span>]})]))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb7-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> printer</span></span>
<span id="cb7-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; describe</span></span>
<span id="cb7-3">  ([] {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:params</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:prefix</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Log message prefix"</span>}</span>
<span id="cb7-4">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:ins</span>    {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:in</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Channel to receive messages"</span>}})</span>
<span id="cb7-5"></span>
<span id="cb7-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; init</span></span>
<span id="cb7-7">  ([state] state)</span>
<span id="cb7-8"></span>
<span id="cb7-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; transition</span></span>
<span id="cb7-10">  ([state _transition] state)</span>
<span id="cb7-11"></span>
<span id="cb7-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; transform</span></span>
<span id="cb7-13">  ([{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:keys</span> [prefix] <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:as</span> state} _in msg]</span>
<span id="cb7-14">   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">println</span> prefix msg)</span>
<span id="cb7-15">   [state <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span>]))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb8-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> config</span></span>
<span id="cb8-2">  {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:procs</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:generator</span>  {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:args</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>} <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:proc</span> (flow/process <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">#'source</span>)}</span>
<span id="cb8-3">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:aggregator</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:args</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>} <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:proc</span> (flow/process <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">#'aggregator</span>)}</span>
<span id="cb8-4">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:scheduler</span>  {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:args</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3000</span>} <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:proc</span> (flow/process <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">#'scheduler</span>)}</span>
<span id="cb8-5">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:notifier</span>   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:args</span>      {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:prefix</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alert: "</span>} <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:proc</span> (flow/process <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">#'printer</span>)</span>
<span id="cb8-6">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:chan-opts</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:in</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buf-or-n</span> (a/sliding-buffer <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)}}}}</span>
<span id="cb8-7">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:conns</span> [[[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:generator</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span>] [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:aggregator</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span>]]</span>
<span id="cb8-8">           [[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:scheduler</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span>] [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:aggregator</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:poke</span>]]</span>
<span id="cb8-9">           [[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:aggregator</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alert</span>] [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:notifier</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:in</span>]]]})</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb9-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> create-flow</span></span>
<span id="cb9-2">  []</span>
<span id="cb9-3">  (flow/create-flow config))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb10-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">comment</span></span>
<span id="cb10-2">  (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> f </span>(create-flow))</span>
<span id="cb10-3">  (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> chs </span>(flow/start f))</span>
<span id="cb10-4">  (flow/resume f)</span>
<span id="cb10-5">  (flow/pause f)</span>
<span id="cb10-6">  (flow/stop f)</span>
<span id="cb10-7"></span>
<span id="cb10-8">  (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> server </span>(mon/start-server {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:flow</span> f}))</span>
<span id="cb10-9">  (mon/stop-server server)</span>
<span id="cb10-10"></span>
<span id="cb10-11">  @(flow/inject f [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:aggregator</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:poke</span>] [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span>])</span>
<span id="cb10-12">  @(flow/inject f [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:aggregator</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span>] [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abc1000"</span>])          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; trigger an alert</span></span>
<span id="cb10-13">  @(flow/inject f [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:notifier</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:in</span>] [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:sandwich</span>])</span>
<span id="cb10-14"></span>
<span id="cb10-15">  (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> report-chan </span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:report-chan</span> chs))</span>
<span id="cb10-16">  (flow/ping f)</span>
<span id="cb10-17">  (a/poll! report-chan)</span>
<span id="cb10-18">  (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> error-chan </span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:error-chan</span> chs))</span>
<span id="cb10-19">  (a/poll! error-chan)</span>
<span id="cb10-20"></span>
<span id="cb10-21">  (flow/stop f)</span>
<span id="cb10-22">  (a/close! stat-chan)</span>
<span id="cb10-23"></span>
<span id="cb10-24">  @(flow/inject f [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:aggregator</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:poke</span>] [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span>])</span>
<span id="cb10-25"></span>
<span id="cb10-26">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">require</span> '[clojure.datafy <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:as</span> datafy])</span>
<span id="cb10-27">  (datafy/datafy f)</span>
<span id="cb10-28"></span>
<span id="cb10-29">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">require</span> '[clojure.core.async.flow-static <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:refer</span> [graph]])</span>
<span id="cb10-30">  (graph f)</span>
<span id="cb10-31"></span>
<span id="cb10-32">  )</span></code></pre></div>
</div>
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/content/lib/core/async/flow/example/stats.clj">content/lib/core/async/flow/example/stats.clj</a></small></small></pre></div>


</section>

 ]]></description>
  <guid>https://clojurecivitas.github.io/lib/core/async/flow/example/stats.html</guid>
  <pubDate>Sun, 01 Jun 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>The Z-Combinator Gambit</title>
  <dc:creator>Chris Houser</dc:creator>
  <dc:creator>Timothy Pratley</dc:creator>
  <link>https://clojurecivitas.github.io/idea/code_interview/beating/with_stupid_stuff/z_combinator_gambit.html</link>
  <description><![CDATA[ 





<style></style>
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="idea/code_interview/beating/with_stupid_stuff/z_combinator_gambit_files/md-default0.js" type="text/javascript"></script>
<script src="idea/code_interview/beating/with_stupid_stuff/z_combinator_gambit_files/md-default1.js" type="text/javascript"></script>
<p>Welcome back code champs, number ninjas, and data divers to our first episode of Beating Code Interviews with Stupid Stuff. People often send me emails asking, “How can I use lambda calculus to impress people?” Today, we find out.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://clojurecivitas.github.io/idea/code_interview/beating/with_stupid_stuff/z-combinator.jpg" class="img-fluid figure-img"></p>
<figcaption>programmer staring at Z-combinator</figcaption>
</figure>
</div>
<p>I have an interview with ZCorp lined up in 5 minutes, and our challenge is to only use anonymous functions. No defn, no loops, and definitely no self-reference. I’ll allow myself the occasional def for brevity, but beyond that, we’ll be running on pure lambda calculus.</p>
<p><strong>20 minutes later</strong></p>
<blockquote class="blockquote">
<p>Hey, sorry to keep you waiting. I just got out of a more important meeting. I’m kind of a big deal here at ZCorp. Why don’t you tell me a <em>little</em> bit about yourself?</p>
</blockquote>
<p>Born of binary, raised on algorithms, I walk the path of lambda…</p>
<blockquote class="blockquote">
<p>Riiiight… Let’s just start with the warm-up problem. Show me how you would reverse a list.</p>
</blockquote>
<p>Ah, the timeless list reversal. Deceptively simple, perilously deep. We must first define our purpose.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb1-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF LIST])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb2-1">#object[idea.code_interview.beating.with_stupid_stuff.z_combinator_gambit$eval49700$fn__49701 <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x16efa1ef</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"idea.code_interview.beating.with_stupid_stuff.z_combinator_gambit$eval49700$fn__49701@16efa1ef"</span>]</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>We’re just writing a function, and it only needs to take a list…</p>
</blockquote>
<p>Not just any function, my friend, but one that knows itself. To know yourself is to find your fixed point.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb3-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> REV</span></span>
<span id="cb3-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF LIST]</span>
<span id="cb3-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">empty?</span> LIST)</span>
<span id="cb3-4">      []</span>
<span id="cb3-5">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">conj</span> (SELF SELF (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rest</span> LIST))</span>
<span id="cb3-6">            (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">first</span> LIST)))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb4-1">(REV REV [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb5-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<p>=&gt; [5 4 3 2 1]</p>
<p><code>SELF</code> is an input to itself, the logic of reversal.</p>
<blockquote class="blockquote">
<p>Ok let’s just move on to the next problem, creating a Fibonacci sequence.</p>
</blockquote>
<p>Oh no, our definition of reverse is intertwined with recursion. Let’s factor that out:</p>
<p>We need to lift our <code>SELF</code></p>
<div class="sourceClojure">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb6-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> REV'</span></span>
<span id="cb6-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF]</span>
<span id="cb6-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LIST]</span>
<span id="cb6-4">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">empty?</span> LIST)</span>
<span id="cb6-5">        []</span>
<span id="cb6-6">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">conj</span> (SELF (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rest</span> LIST))</span>
<span id="cb6-7">              (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">first</span> LIST))))))</span></code></pre></div>
</div>
<pre><code>((REV' REV') [1 2 3 4 5])</code></pre>
<p><strong>error</strong></p>
<p>Oh, no… <code>SELF</code> doesn’t take <code>LIST</code>, it’s a function that returns a function that operates on <code>LIST</code>, and the argument to <code>SELF</code> is… <code>SELF</code>. Therefore, we need to give it <code>(SELF SELF)</code>.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb8-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> REV''</span></span>
<span id="cb8-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF]</span>
<span id="cb8-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LIST]</span>
<span id="cb8-4">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">empty?</span> LIST)</span>
<span id="cb8-5">        []</span>
<span id="cb8-6">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">conj</span> ((SELF SELF) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rest</span> LIST))</span>
<span id="cb8-7">              (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">first</span> LIST))))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb9-1">((REV<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">''</span> REV<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">''</span>) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb10-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<p>=&gt; [5 4 3 2 1]</p>
<blockquote class="blockquote">
<p>That’s a confusing way to write it</p>
</blockquote>
<p>Quite right, because it’s not obvious what (SELF SELF) is. We need to extract it out. What we want is:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb11-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> REV-LOGIC</span></span>
<span id="cb11-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF]</span>
<span id="cb11-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LIST]</span>
<span id="cb11-4">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">empty?</span> LIST)</span>
<span id="cb11-5">        []</span>
<span id="cb11-6">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">conj</span> (SELF (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rest</span> LIST))</span>
<span id="cb11-7">              (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">first</span> LIST))))))</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>Believe me when I say that is not what I meant…</p>
</blockquote>
<p>Oh, right. Now <code>SELF = (SELF SELF)</code>.</p>
<blockquote class="blockquote">
<p>Not what I meant, and also that sounds impossible.</p>
</blockquote>
<p>But identity is the identity of itself:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb12-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb13-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<p>=&gt; 1</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb14-1">((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb15-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<p>=&gt; 1</p>
<blockquote class="blockquote">
<p>O.K. sure, but that’s a special case.</p>
</blockquote>
<div class="sourceClojure">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb16-1">(((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span>)) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb17-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<p>=&gt; 1</p>
<blockquote class="blockquote">
<p>This is an identity crisis.</p>
</blockquote>
<p>We just need to find the right conditions for <code>(SELF SELF) = SELF</code>.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb18-1">(REV-LOGIC REV-LOGIC)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb19-1">#object[idea.code_interview.beating.with_stupid_stuff.z_combinator_gambit$REV_LOGIC$fn__49715 <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x648e1f21</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"idea.code_interview.beating.with_stupid_stuff.z_combinator_gambit$REV_LOGIC$fn__49715@648e1f21"</span>]</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>Well, it’s a function! That much is clear…</p>
</blockquote>
<p>But it doesn’t work, because <code>(REV-LOGIC REV-LOGIC) =/= REV-LOGIC.</code> Let’s try something easier:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb20-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> FIX</span></span>
<span id="cb20-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LOGIC]</span>
<span id="cb20-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; return something like identity where self application does not change it</span></span>
<span id="cb20-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#_</span>FIXED))</span></code></pre></div>
</div>
<p><code>FIX</code> takes the logic function, and makes a function such that <code>(FIXED (FIX LOGIC)) = FIXED</code></p>
<p><code>(FIXED FIXED) =&gt; FIXED</code> which means that <code>((FIX LOGIC) (FIX LOGIC)) = (FIX LOGIC)</code></p>
<blockquote class="blockquote">
<p>Right, that sounds way easier… <strong>shaking head in disbelief</strong></p>
</blockquote>
<p>Exactly! Because we just reverse it: <code>(FIX F) = ((FIX F) (FIX F))</code></p>
<blockquote class="blockquote">
<p>Why did you call it <code>FIX</code>?</p>
</blockquote>
<p>Well, it was broken before right?</p>
<blockquote class="blockquote">
<p>I’m starting to think that you are the broken one.</p>
</blockquote>
<div class="sourceClojure">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb21-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> FIX</span></span>
<span id="cb21-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LOGIC]</span>
<span id="cb21-3">    ((FIX LOGIC) (FIX LOGIC))))</span></code></pre></div>
</div>
<p>But <code>FIX</code> can still see itself. We need to parameterize the use of <code>FIXED</code></p>
<div class="sourceClojure">
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb22-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> FIX</span></span>
<span id="cb22-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LOGIC]</span>
<span id="cb22-3">    ((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [FIXED]</span>
<span id="cb22-4">       (LOGIC (FIXED FIXED)))</span>
<span id="cb22-5">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [FIXED]</span>
<span id="cb22-6">       (LOGIC (FIXED FIXED))))))</span></code></pre></div>
</div>
<p>There, I fixed it.</p>
<blockquote class="blockquote">
<p>What is fixed?</p>
</blockquote>
<p><code>FIXED</code> is <code>(FIXED FIXED)</code>, obviously.</p>
<blockquote class="blockquote">
<p>Obviously. <strong>raises hands in dispair</strong></p>
</blockquote>
<p>Because <code>(FIX F) = ((FIX F) (FIX F))</code>, it was your idea to refactor remember?</p>
<pre><code>(FIX REV-LOGIC)</code></pre>
<p><strong>stack overflow</strong></p>
<blockquote class="blockquote">
<p>Everything looks to be inside out now.</p>
</blockquote>
<p>Oh, you are right, we can’t pass <code>(FIXED FIXED)</code> as an argument because it will be evaluated first. Thanks for the tip.</p>
<blockquote class="blockquote">
<p>Can we fix it? <strong>slaps self</strong></p>
</blockquote>
<p>Instead of calling <code>(FIXED FIXED)</code> we need a function that will create <code>(FIXED FIXED)</code> when it’s needed, after <code>LOGIC</code> gets called. <code>LOGIC</code> needs to take itself as it’s argument, so the function we pass to <code>LOGIC</code> should look very much like <code>LOGIC</code>, but of course without any actual logic in it.</p>
<blockquote class="blockquote">
<p>That actually sounds logical.</p>
</blockquote>
<p><code>LOGIC</code> is a function of itself, returning a function that acts on a value:</p>
<blockquote class="blockquote">
<p>didn’t you say that <code>(FIXED FIXED) = FIXED</code>?</p>
</blockquote>
<p>Yes but only after we <code>FIX</code> it. Fixing it requires us to go from <code>FIXED</code> to <code>(FIXED FIXED)</code> remember?</p>
<blockquote class="blockquote">
<p>Ah sure…</p>
</blockquote>
<p>So while we are fixing logic, let’s replace <code>(LOGIC (FIXED FIXED))</code> with our deferring function.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb24-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> FIX</span></span>
<span id="cb24-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LOGIC]</span>
<span id="cb24-3">    ((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [FIXED]</span>
<span id="cb24-4">       (LOGIC (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> SELF [VALUE]</span>
<span id="cb24-5">                ((FIXED FIXED) VALUE))))</span>
<span id="cb24-6">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [FIXED]</span>
<span id="cb24-7">       (LOGIC (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> SELF [VALUE]</span>
<span id="cb24-8">                ((FIXED FIXED) VALUE)))))))</span></code></pre></div>
</div>
<p>Did you know this is called continuation passing style?</p>
<blockquote class="blockquote">
<p>CSP?</p>
</blockquote>
<p>No, that’s communicating subprocesses.</p>
<blockquote class="blockquote">
<p>That’s confusing.</p>
</blockquote>
<p>Isn’t it!? Fortunately, we are about to be unconfused.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb25-1">(FIX REV-LOGIC)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb26-1">#object[idea.code_interview.beating.with_stupid_stuff.z_combinator_gambit$REV_LOGIC$fn__49715 <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x74732aab</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"idea.code_interview.beating.with_stupid_stuff.z_combinator_gambit$REV_LOGIC$fn__49715@74732aab"</span>]</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>At least it didn’t blow up this time…</p>
</blockquote>
<div class="sourceClojure">
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb27-1">((FIX REV-LOGIC) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb28-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<p>=&gt; [5 4 3 2 1]</p>
<blockquote class="blockquote">
<p>Nice, that’s the right answer.</p>
</blockquote>
<p>Even nicer is that our fixed logic behaves like identity now:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb29-1">((REV-LOGIC (FIX REV-LOGIC)) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb30-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<p>=&gt; [5 4 3 2 1]</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb31-1">((REV-LOGIC (REV-LOGIC (FIX REV-LOGIC))) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb32-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<p>=&gt; [5 4 3 2 1]</p>
<blockquote class="blockquote">
<p>I can’t believe something so ridiculous actually works.</p>
</blockquote>
<p>Yes it is ridiculous to have all those silly names. Let’s fix that:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb33-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> Z</span></span>
<span id="cb33-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [F]</span>
<span id="cb33-3">    ((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [X]</span>
<span id="cb33-4">       (F (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [V] ((X X) V))))</span>
<span id="cb33-5">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [X]</span>
<span id="cb33-6">       (F (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [V] ((X X) V)))))))</span></code></pre></div>
</div>
<p>You are not your variables. Rename them, rebind them. Your essence is invariant.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb34-1">((Z REV-LOGIC) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb35-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<p>=&gt; [5 4 3 2 1]</p>
<blockquote class="blockquote">
<p>Wait, we are meant to be doing Fibonacci, remember?</p>
</blockquote>
<p>We are factoring out our <code>LOGIC</code>.</p>
<blockquote class="blockquote">
<p>It looks to me like you doubled the code, that’s not great refactoring. Using single letters make it totally unreadable.</p>
</blockquote>
<p>Hmmm you got me there, there does seem to be a lot of doubling. What if we had a function for <code>f =&gt; (f f)</code></p>
<div class="sourceClojure">
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb36-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> REPLICATE </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Omega, the self-devouring serpent"</span></span>
<span id="cb36-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [F]</span>
<span id="cb36-3">    (F F)))</span></code></pre></div>
</div>
<p>The replication of identity is itself.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb37-1">((REPLICATE <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb38-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<p>=&gt; 1</p>
<p>But test not the serpent lightly</p>
<pre><code>(REPLICATE REPLICATE)</code></pre>
<p><strong>stack overflow</strong></p>
<p>The replication of replication is eternal. Now we can clean up that duplication.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb40-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> Z</span></span>
<span id="cb40-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LOGIC]</span>
<span id="cb40-3">    (REPLICATE (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [X]</span>
<span id="cb40-4">                 (LOGIC (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [V] ((X X) V)))))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb41-1">((Z REV-LOGIC) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb42-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<p>=&gt; [5 4 3 2 1]</p>
<blockquote class="blockquote">
<p>That’s not really any clearer…</p>
</blockquote>
<p>Very well, we can keep extracting.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb43-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> DEFER </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eta, the patient one"</span></span>
<span id="cb43-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LOGIC]</span>
<span id="cb43-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [VALUE]</span>
<span id="cb43-4">      ((REPLICATE LOGIC) VALUE))))</span></code></pre></div>
</div>
<p>If the infinite is deferred, is it infinite?</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb44-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> FOLD </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zeta, weaver of logic, bringer of finitude"</span></span>
<span id="cb44-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LOGIC]</span>
<span id="cb44-3">    (REPLICATE (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF]</span>
<span id="cb44-4">                 (LOGIC (DEFER SELF))))))</span></code></pre></div>
</div>
<p>OMEGA diverges, ZETA folds, LOGIC writes QED.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb45-1">((FOLD REV-LOGIC) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb46-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<p>=&gt; [5 4 3 2 1]</p>
<p>That’s much nicer, I’m so glad you suggested using longer names.</p>
<blockquote class="blockquote">
<p>Can we write Fibonacci, <em>please</em>?</p>
</blockquote>
<p>Oh, that’s easy now!</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb47-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> FIB-LOGIC</span></span>
<span id="cb47-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF]</span>
<span id="cb47-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [[B A <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:as</span> FIBS]]</span>
<span id="cb47-4">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&gt;</span> B <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb47-5">        FIBS</span>
<span id="cb47-6">        (SELF (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">concat</span> [(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">+</span> A B) B] FIBS))))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb48-1">((FOLD FIB-LOGIC) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb49-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>=&gt; (13 8 8 5 5 3 3 2 2 1 1 1)</p>
<blockquote class="blockquote">
<p>That’s all backward!!</p>
</blockquote>
<p>Oh, my mistake</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb50-1">((FOLD REV-LOGIC) ((FOLD FIB-LOGIC) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb51-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>]</span></code></pre></div>
</div>
<p>=&gt; [1 1 1 2 2 3 3 5 5 8 8 13]</p>
<blockquote class="blockquote">
<p>You can’t be serious… This is ridiculous. We’ll be here forever if you keep this up.</p>
</blockquote>
<p>I love that idea! An infinite sequence is exactly what we need…</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb52-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> FIB-LOGIC-FOREVER</span></span>
<span id="cb52-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF]</span>
<span id="cb52-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [A]</span>
<span id="cb52-4">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [B]</span>
<span id="cb52-5">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lazy-seq</span></span>
<span id="cb52-6">          (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">cons</span> A ((SELF B) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">+</span> A B))))))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb53-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">take</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> (((FOLD FIB-LOGIC-FOREVER) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb54-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">89</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">144</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">233</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">377</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">610</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">987</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1597</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2584</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4181</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6765</span>)</span></code></pre></div>
</div>
<p>=&gt; (1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765)</p>
<p>That’s so nice.</p>
<blockquote class="blockquote">
<p>Oh look at the time! I have a more important meeting to go to! <strong>disconnects</strong></p>
</blockquote>
<p>Ouch, Rough. ZCorp never got back to me, so let’s update the scoreboard as a loss without a GG.</p>
<div class="clay-table">
<div class="table-responsive">
<table class="table table-hover clay-table caption-top" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">Interviews</th>
<th data-quarto-table-cell-role="th">Wins</th>
<th data-quarto-table-cell-role="th">GGs</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>That’s all for today. Until next time, keep on coding.</p>
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/content/idea/code_interview/beating/with_stupid_stuff/z_combinator_gambit.clj">content/idea/code_interview/beating/with_stupid_stuff/z_combinator_gambit.clj</a></small></small></pre></div>



 ]]></description>
  <guid>https://clojurecivitas.github.io/idea/code_interview/beating/with_stupid_stuff/z_combinator_gambit.html</guid>
  <pubDate>Sun, 25 May 2025 00:00:00 GMT</pubDate>
  <media:content url="https://clojurecivitas.github.io/idea/code_interview/beating/with_stupid_stuff/z-combinator.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
