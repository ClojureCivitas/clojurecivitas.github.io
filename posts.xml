<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Clojure Civitas</title>
<link>https://clojurecivitas.github.io/posts.html</link>
<atom:link href="https://clojurecivitas.github.io/posts.xml" rel="self" type="application/rss+xml"/>
<description></description>
<image>
<url>https://clojurecivitas.github.io/images/civitas-icon.svg</url>
<title>Clojure Civitas</title>
<link>https://clojurecivitas.github.io/posts.html</link>
</image>
<generator>quarto-1.7.31</generator>
<lastBuildDate>Thu, 05 Jun 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>The Hidden Geometry of Dice</title>
  <dc:creator>Timothy Pratley</dc:creator>
  <link>https://clojurecivitas.github.io/math/stats/quantquestions/what_are_the_odds/the_hidden_geometry_of_dice.html</link>
  <description><![CDATA[ 





<style></style>
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="math/stats/quantquestions/what_are_the_odds/the_hidden_geometry_of_dice_files/md-default0.js" type="text/javascript"></script>
<script src="math/stats/quantquestions/what_are_the_odds/the_hidden_geometry_of_dice_files/md-default1.js" type="text/javascript"></script>
<p>Welcome to What Are the Odds? The show where we answer life’s important questions, like can I outsmart a six-sided die? Today we’re starting small. Two rolls of the dice and one burning question. No magic formulas, just curiosity, some patient counting, and a faint hope that math is on our side. Let’s roll.</p>
<blockquote class="blockquote">
<p><em>Pop quiz:</em> You roll a fair 6-sided die twice. Calculate the probability that the value of the first roll is strictly less than the value of the second roll.</p>
</blockquote>
<p>As I always like to say to my niece, “the secret to answering any probability question is to enumerate the outcomes and count the ones we care about.”</p>
<p><img src="https://latex.codecogs.com/png.latex?P(Interesting)%20=%20InterestingOutcomes%20/%20TotalOutcomes"></p>
<p>Rolling 1 die once has 6 outcomes: 1 2 3 4 5 6.</p>
<p>Rolling 1 die twice gives us a combination of outcomes, let’s write out a few.</p>
<pre><code>[1 1] [1 2] '... [1 6]
[2 1] [2 2] '...</code></pre>
<p>Following this pattern would produce 6 rows of 6 columns, so there must be <code>36</code> outcomes. We write down just enough of the pattern to figure out the best way to count it. Now we count how many of those meet the criteria.</p>
<pre><code>[1 1 :no] [1 2 :yes] '...
[2 1 :no] [2 2 :no] [2 3 :yes] '...</code></pre>
<p>Logically we should see 5 yeses on the first row, then 4, 3, 2, 1, and 0, which we can ignore. Add them all up and we get <code>15</code>.</p>
<p>So the answer to the question is <code>15/36</code> which reduces to <code>5/12</code>, dividing top and bottom by the greatest common divisor 3.</p>
<p>You might be thinking that it’s not practical to enumerate everything all the time, I should use the formulas of probability. That’s true, those are marvelous. However, in my experience it is also easy to go wrong reasoning from formulas. It’s harder to go wrong starting with a counting problem, then improving your method of counting. You end up in the same place, but more confident in the answer.</p>
<p>The full enumeration of our simple 2 roll question as a counting problem is just big enough to be too tedious to use only counting.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb3-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [roll [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]]</span>
<span id="cb3-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> [i roll]</span>
<span id="cb3-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> [j roll]</span>
<span id="cb3-4">      [i j])))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb4-1">(([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>])</span>
<span id="cb4-2"> ([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>])</span>
<span id="cb4-3"> ([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>])</span>
<span id="cb4-4"> ([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>])</span>
<span id="cb4-5"> ([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>])</span>
<span id="cb4-6"> ([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]))</span></code></pre></div>
</div>
<p>Identifying the pattern is enough to realize the answer</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb5-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb6-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span></code></pre></div>
</div>
<p>What a marvelous pattern it is! Predictable, but not flat. Smooth, but not boring. Recursive, and not obvious.</p>
<div class="printedClojure">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb7-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">36</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">66</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">91</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">136</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">153</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">171</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">190</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">210</span>]</span></code></pre></div>
</div>
<p>There’s something special about this sequence. Aren’t those numbers just… pleasing in some way?</p>
<p>This sequence is called the triangular numbers.</p>
<pre><code>            .
           . .
          . . .
         . . . .</code></pre>
<p>You can find the first 10 or so numbers in your head, and with some paper many more quite quickly.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://clojurecivitas.github.io/math/stats/quantquestions/what_are_the_odds/the_hidden_geometry_of_dice.jpg" class="img-fluid figure-img"></p>
<figcaption>So many dots</figcaption>
</figure>
</div>
<p>There is a formula for calculating the nth triangular number: <img src="https://latex.codecogs.com/png.latex?T_n%20=%201%20+%202%20+%203%20+%20%5Cdots%20+%20n%20=%20%5Cfrac%7Bn(n%20+%201)%7D%7B2%7D"></p>
<p>The 20th triangular number is <code>(20x21)/2 = (400+20)/2 = 210</code>. Isn’t it wonderful how there’s so many different ways to find the same answer in math?</p>
<p>There is something curious about the formula; it divides by 2 but only produces integers. How can we be certain we will only ever get an integer? So mysterious. <code>n(n+1)</code> is always even! Let’s think about that a bit more, if n is odd, then n+1 is even. If n is even, then n+1 is odd. One of the multiples is always even, meaning that 2 is a factor, so the multiple must always have a factor 2, and be even.</p>
<p>It’s easy now to imagine if we had a 1000 sided dice what the answer would be. But be careful! For a 1000 side die, we want the 999nth triangular number: <img src="https://latex.codecogs.com/png.latex?(999%20%5Ctimes%201000)/2%20=%20(1000000-1000)/2%20=%20500000-500%20=%20499500"> and the total outcomes would be <code>1000x1000</code>, so the answer would be <code>0.4995</code>. It’s comforting to see that for a large range, we land closer to 50%.</p>
<p>The point is that once we know what we are counting, it feels more obvious that we used the right formula to count it.</p>
<p>Triangular numbers show up in many situations, my favorite is that they can be used to lay out hexagons. The <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/src/civitas/explorer/geometry.clj">code that draws Clojure Civitas hexagons</a> is based on the triangular number formula.</p>
<svg viewbox="-640 -640 1280 1280" width="100%" xmlns="http://www.w3.org/2000/svg"><g transform="translate(0.0,0.0)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-120.0,69.28203230275508)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(0.0,138.56406460551017)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(120.0,69.28203230275508)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(120.0,-69.28203230275508)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(0.0,-138.56406460551017)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-120.0,-69.28203230275508)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-120.0,69.28203230275508)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-240.0,138.56406460551017)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-120.0,207.84609690826528)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(0.0,277.12812921102034)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(120.0,207.84609690826528)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(240.0,138.56406460551017)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(240.0,0.0)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(240.0,-138.56406460551017)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(120.0,-207.84609690826528)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(0.0,-277.12812921102034)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-120.0,-207.84609690826528)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-240.0,-138.56406460551017)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-240.0,0.0)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-240.0,138.56406460551017)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-360.0,207.84609690826528)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-240.0,277.1281292110204)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-120.0,346.4101615137755)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(0.0,415.69219381653056)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(120.0,346.4101615137754)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(240.0,277.12812921102034)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(360.0,207.84609690826528)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(360.0,69.28203230275511)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(360.0,-69.28203230275507)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(360.0,-207.84609690826528)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(240.0,-277.1281292110204)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(120.0,-346.4101615137755)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(0.0,-415.69219381653056)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-120.0,-346.4101615137754)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-240.0,-277.12812921102034)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-360.0,-207.84609690826528)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-360.0,-69.28203230275511)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-360.0,69.28203230275507)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-360.0,207.84609690826528)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g></svg>
<p>Triangular numbers also show up in the number of pairs, handshakes, edges in a complete graph, diagonals sum to triangular numbers, square numbers as sums of consecutive odd numbers, differences of triangulars, acceleration frames, smooth transitions, spacing. Such a beautiful pattern that can be found in so many situations!</p>
<p>Until next time, may your dice be fair and your outcomes interesting.</p>
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/src/math/stats/quantquestions/what_are_the_odds/the_hidden_geometry_of_dice.clj">src/math/stats/quantquestions/what_are_the_odds/the_hidden_geometry_of_dice.clj</a></small></small></pre></div>



 ]]></description>
  <guid>https://clojurecivitas.github.io/math/stats/quantquestions/what_are_the_odds/the_hidden_geometry_of_dice.html</guid>
  <pubDate>Thu, 05 Jun 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>What if… we were taught transducers first?</title>
  <dc:creator>Sean Corfield</dc:creator>
  <link>https://clojurecivitas.github.io/clojure/transducers/what_if.html</link>
  <description><![CDATA[ 





<style></style>
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="clojure/transducers/what_if_files/md-default0.js" type="text/javascript"></script>
<script src="clojure/transducers/what_if_files/md-default1.js" type="text/javascript"></script>
<p>Most Clojure tutorials start out with sequence functions like <code>map</code>, <code>filter</code> etc, and then explain how to avoid some of the problems that lazy sequences can cause. Transducers tend to be introduced later as a more advanced topic, but I’d argue that they could (and should) be taught earlier, and instead treat lazy sequences as an advanced topic.</p>
<p>What if… we were taught transducers first?</p>
<p>We’re typically taught to use <code>map</code> or <code>filter</code> on a sequence or collection to produce a new sequence – and there’s often a comment that <code>map</code> applied to a vector does not produce a vector. With transducers, one of the key concepts is that the transformation is separated from the input and also from the output.</p>
<p>Let’s start out with the <code>sequence</code> function, just to show how we can go straight to a sequence of results:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb1-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sequence</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb2-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</div>
<p><code>sequence</code> works with multiple collections, like <code>map</code>:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb3-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sequence</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">*</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb4-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb5-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sequence</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vector</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb6-1">([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span></code></pre></div>
</div>
<p>How about chaining several transformations together? We can use <code>eduction</code> (but see the caveats below about <code>eduction</code>):</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb7-1">(eduction (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">filter</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">even?</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb8-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
</div>
<p>Let’s look at producing different types of output, using <code>into</code>:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb9-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> [] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb10-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb11-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> #{} (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb12-1">#{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>}</span></code></pre></div>
</div>
<p>Under the hood, <code>into</code> uses <code>conj</code> so if you use a list, the order is reversed (because <code>conj</code> onto a list prepends items, whereas <code>conj</code> onto a vector appends items):</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb13-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> () (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb14-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>For the next level of control, we can use <code>transduce</code> to specify how to combine the results, as well as what we start with initially:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb15-1">(transduce (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">conj</span> [] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb16-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb17-1">(transduce (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">conj</span> #{} (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb18-1">#{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>}</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb19-1">(transduce (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">conj</span> () (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb20-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>We might be tempted to use <code>cons</code> here, but its argument order is different from <code>conj</code> so this will fail:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb21-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span> (transduce (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">cons</span> () (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb21-2">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">catch</span> Exception <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">e</span> (ex-message <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">e</span>)))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb22-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Don't know how to create ISeq from: java.lang.Long"</span></span></code></pre></div>
</div>
<p>Okay, well, let’s use an anonymous function to reverse the order of the arguments:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb23-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span> (transduce (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) #(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">cons</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%2</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%1</span>) () (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb23-2">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">catch</span> Exception <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">e</span> (ex-message <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">e</span>)))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb24-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wrong number of args (1) passed to: clojure.transducers.what-if/eval13931/fn--13932"</span></span></code></pre></div>
</div>
<p>Why is it trying to call <code>cons</code> with a single argument? In addition to separating the transformation from the output, <code>transduce</code> also has a “completion” step, which is performed on the final result. A convenience function called <code>completing</code> can be used to wrap the function here to provide a “no-op” completion:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb25-1">(transduce (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) (completing #(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">cons</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%2</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%1</span>)) () (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb26-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p><code>completing</code> lets us provide a “completion” function (instead of the default which is <code>identity</code>) so we could reverse the result:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb27-1">(transduce (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) (completing #(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">cons</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%2</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%1</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reverse</span>) () (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb28-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</div>
<p>Instead of producing a collection result, we can also use <code>transduce</code> to compute results in other ways:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb29-1">(transduce (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb30-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb31-1">(transduce (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb32-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span></span></code></pre></div>
</div>
<p>The way <code>(transduce xf f init coll)</code> works is pretty much like this:</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb33-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [rf (xf f)]</span>
<span id="cb33-2">  (rf (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reduce</span> rf init coll)))</span></code></pre></div>
<p>Note how <code>xf</code> and <code>f</code> are combined to create a single “reducing function” (which is a 2-arity function that takes an accumulator and a value), for the <code>reduce</code> and then also applied to the result as a 1-arity function, which is what <code>completing</code> does for us in the above example.</p>
<p>Now let’s circle back to chaining transformations, while also controlling the output type. We can use <code>comp</code> for this. As a recap, here’s our <code>eduction</code> from earlier:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb34-1">(eduction (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">filter</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">even?</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb35-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
</div>
<p>We can compose multiple transducers:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb36-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">comp</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">filter</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">even?</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb37-1">#object[clojure.core$comp$fn__5895 <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x6456fcc4</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clojure.core$comp$fn__5895@6456fcc4"</span>]</span></code></pre></div>
</div>
<p>Let’s give this a name:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb38-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> evens+1 </span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">comp</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">filter</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">even?</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>)))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb39-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> [] evens+<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb40-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb41-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> #{} evens+<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb42-1">#{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>}</span></code></pre></div>
</div>
<p>We glossed over the result of <code>eduction</code> earlier – it produced a sequence because we printed it out, but it is a “reducible” that has captured both its input and the series of transformations to apply, so we could pass it directly to <code>into</code> or <code>transduce</code> as if it were a collection:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb43-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> [] (eduction (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">filter</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">even?</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb44-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb45-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> [] (eduction evens+<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb46-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]</span></code></pre></div>
</div>
<p>Because it is a “reducible”, it only does work when it is consumed, so it is “lazy” in that sense, but it is not a lazy sequence. We can get a lazy sequence from a transducer using <code>sequence</code>, if we want, or we can rely on <code>into</code> and <code>transduce</code> etc being eager. In addition, <code>eduction</code> performs the transformations each time it is consumed:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb47-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [s (eduction (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> #(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">doto</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">println</span>))) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))]</span>
<span id="cb47-2">  [(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> [] s)</span>
<span id="cb47-3">   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> [] s)])</span></code></pre></div>
</div>
<div data-lst-cap="OUT:">
<p>0 1 2 3 4 0 1 2 3 4</p>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb48-1">[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]]</span></code></pre></div>
</div>
<p>That will print 0 1 2 3 4 twice, because the <code>eduction</code> is consumed twice. Compare that behavior to <code>sequence</code>, which produces a lazy sequence and caches its results:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb49-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [s (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sequence</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> #(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">doto</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">println</span>))) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))]</span>
<span id="cb49-2">  [(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> [] s)</span>
<span id="cb49-3">   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> [] s)])</span></code></pre></div>
</div>
<div data-lst-cap="OUT:">
<p>0 1 2 3 4</p>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb50-1">[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]]</span></code></pre></div>
</div>
<p>This will only print 0 1 2 3 4 once.</p>
<p>In conclusion, by separating the transformation from the input and the output, we gain expressive power, flexibility, and reuse: we can compose transducers, we can apply them to any input that produces values, and consume the results in any way we like.</p>
<p>For example, transducers can be used in several different ways with <code>core.async</code> channels:</p>
<ul>
<li><a href="https://clojure.github.io/core.async/clojure.core.async.html#var-chan">on a <code>chan</code>nel</a></li>
<li><a href="https://clojure.github.io/core.async/clojure.core.async.html#var-pipeline">in a <code>pipeline</code></a></li>
<li><a href="https://clojure.github.io/core.async/clojure.core.async.html#var-transduce">or consumed with <code>transduce</code></a></li>
</ul>
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/src/clojure/transducers/what_if.clj">src/clojure/transducers/what_if.clj</a></small></small></pre></div>



 ]]></description>
  <guid>https://clojurecivitas.github.io/clojure/transducers/what_if.html</guid>
  <pubDate>Sat, 31 May 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>The Hallway Track: SciNoj Light #1 Data Analysis Stories</title>
  <dc:creator>Timothy Pratley</dc:creator>
  <link>https://clojurecivitas.github.io/conferences/scinoj_light_1/notes/hallway_track.html</link>
  <description><![CDATA[ 





<p>The <a href="https://scicloj.github.io/scinoj-light-1">SciNoj Light #1</a> Conference brought together Clojure enthusiasts, data scientists, and researchers for an engaging exploration of data analysis stories. The event fostered a collaborative, informal atmosphere where participants exchanged ideas across disciplines from cognitive psychology to urban planning.</p>
<p>If you missed it, you can view the talks on the <a href="https://www.youtube.com/playlist?list=PLb_VRZPxjMAAaoAPnk8ClWET3baRV1Whv">conference sessions playlist</a>. The <a href="https://scicloj.github.io/scinoj-light-1/speakers.html">conference website</a> has detailed information about the talks and speakers. Links to the notebook code presented are on the <a href="https://scicloj.github.io/scinoj-light-1/sessions">sessions page</a>, and available as data in the <a href="https://github.com/scicloj/scinoj-light-1/blob/main/info.edn">info.edn file</a>.</p>
<p>The <a href="https://youtu.be/3HZ5rngHzWM">concluding talk on lane reductions</a> stood out as my favorite because it blended data-driven insights with relatable, human-interest storytelling. As a cyclist, I immediately connected with how lane reductions and protected bike lanes are impactful to my safety. The talk’s compelling visuals, grounded in real case studies, made the story very tangible. Heather’s personal perspective as a car-free parent added emotional weight. She illustrated how community advocacy and smart urban design saves lives, and makes more livable spaces. The mix of passion, rigor, and optimism left me inspired; data analysis can drive tangible, life-improving change.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://clojurecivitas.github.io/conferences/scinoj_light_1/notes/crashes.png" class="img-fluid figure-img"></p>
<figcaption>Bike lane improvements reduce crashes</figcaption>
</figure>
</div>
<p>A major focus of the conference was the development of Clojure’s data science <a href="https://github.com/scicloj/noj">Noj</a> toolkit. This suite of libraries demonstrated how Clojure combines functional programming elegance with practical performance. Speakers highlighted Noj’s interoperability with Python and Java ecosystems while emphasizing its advantages for reproducible and maintainable workflows. The community’s collaborative energy was evident throughout.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://clojurecivitas.github.io/conferences/scinoj_light_1/notes/noj_components.png" class="img-fluid figure-img"></p>
<figcaption>Noj core components</figcaption>
</figure>
</div>
<p>Artificial intelligence emerged as a recurring theme, with several talks exploring hybrid approaches to enhance reliability. One discussion centered on Retrieval-Augmented Generation (RAG) systems, where combining large language models with Clojure’s logic programming capabilities could improve accuracy in structured domains like government Q&amp;A. Another session delved into probabilistic programming with Inferme, illustrating Bayesian methods for modeling uncertainty. These technical deep dives were balanced by ethical considerations and reflections on technology’s societal implications.</p>
<p>Scientific applications showcased Clojure’s versatility. One talk explored simulating fluid dynamics. Another focused on forecasting tropical cyclone paths using physics-informed machine learning. Cognitive science experiments were also featured, using collaborative games and puzzles to study human planning behavior, and brain wave monitors. The conference also highlighted social impact work, such as data-driven advocacy for safer street designs, proving that technical tools can drive urban change.</p>
<p>What stood out to me was how effectively the SciCloj community uses Clojure notebooks for collaborative work. Presenters shared their research through executable notebooks that cleanly combined code, visualizations and explanations. It’s a practical pattern broadly applicable for sharing ideas and knowledge.</p>
<p>Throughout the event, a sense of optimism prevailed about Clojure’s untapped potential. While acknowledging gaps in ML tooling compared to Python, speakers demonstrated that Clojure’s functional rigor and JVM scalability make it a good fit for data science. Attendee discussions envisioned collaborating further on logic-guided AI and semantic web ontologies. There was a recurring theme of bridging the gap between academic theory and real-world engineering. SciNoj Light ultimately painted a picture of Clojure not just as a language, but as a catalyst for interdisciplinary innovation.</p>
<blockquote class="blockquote">
<p>You can have the cake of Clojure’s immutable persistent data structures and eat it too;<br>
Get your answers fast and make your customers happy.<br>
— Harold</p>
</blockquote>
<p>A big thank you to the organizers! The event was an overwhelming success with high quality presentations and valuable discussions. I’m looking forward to the next SciNoj, it’s a rare and valuable blend of science, technology, community and code.</p>
<p>Below are my notes about the sessions and conversations from the conference.</p>
<section id="pre-conference-interview" class="level3">
<h3 class="anchored" data-anchor-id="pre-conference-interview">Pre-conference interview</h3>
<p>Engaging to have a taste of what’s to come, got me really enthusiastic about the coming event. Game as a Research Tool: “Tik Tik” is a controlled environment for studying human cognition and collaboration. Combines cognitive psychology, game design, and data analysis.</p>
</section>
<section id="hello" class="level3">
<h3 class="anchored" data-anchor-id="hello">1.1: Hello</h3>
<p>Community-driven event. Informal, interactive, and welcoming. Focus on Clojure for data workflows. Tools and libraries have matured, and the conference shares these advancements. <a href="https://www.clojurians-zulip.org/">Zulip</a> is the main forum, attendees are encouraged to engage via structured topic threads. The macroexpand session invites ideas for expanding Clojure adoption in various fields. Hosts encourage questions, jokes, and relaxed participation. Sets the tone for an inclusive, engaging, and slightly nerdy gathering of Clojure enthusiasts.</p>
</section>
<section id="an-intro-to-the-noj-toolkit" class="level3">
<h3 class="anchored" data-anchor-id="an-intro-to-the-noj-toolkit">1.2: An intro to the Noj toolkit</h3>
<p>Noj is a Clojure-based data science toolkit integrating libraries for data analysis, visualization, and machine learning. Designed for functional, efficient data processing with compatibility across libraries (e.g., Tablecloth, FastMath, Metamorph). Inspired by tools like R’s dplyr/ggplot and Python’s pandas/Plotly, but with a Clojure-centric approach. Tablecloth for tabular data manipulation (similar to pandas/dplyr). TablePlot grammar-of-graphics-inspired visualization (like ggplot). FastMath stats and statistical modeling (logistic regression and more). Metamorph for machine learning workflows. Worked example of predicting success in Kickstarter projects. Data loading/cleaning, exploratory analysis (grouping, aggregation, bar plots), predictive modeling, evaluation (train/test split, accuracy checks). Functional &amp; Immutable, Noj leverages Clojure’s strengths. Efficient columnar storage with zero-copy operations.</p>
</section>
<section id="probability-and-statistics---daniel-slutsky" class="level3">
<h3 class="anchored" data-anchor-id="probability-and-statistics---daniel-slutsky">1.3: Probability and statistics - Daniel Slutsky</h3>
<p>Generating pseudo-random numbers using seeds for reproducibility in research. Simulating dice rolls to explore distributions. Used histograms and scatter plots to visualize distributions. Computed mean, standard deviation and z-scores for comparison. Bayesian inference for probabilistic models with parameters. Conditioned models on observed data to infer posterior distributions. Highlighted constraints and efficient sampling algorithms. Avoid lazy sequences for large simulations; consider dtype-next or transducers. Visualization matters, histograms and scatter plots reveal patterns. Probabilistic programming models uncertainty and updates beliefs with data. Balanced foundational stats with advanced topics, emphasizing Clojure’s tools for data science.</p>
</section>
<section id="customer-churn-analysis-llms-logic-programming---siavash-mohammady" class="level3">
<h3 class="anchored" data-anchor-id="customer-churn-analysis-llms-logic-programming---siavash-mohammady">1.4: Customer churn analysis, LLMs &amp; logic programming - Siavash Mohammady</h3>
<p>Customers leaving significantly impacts revenue. Exploring factors like course format, teacher experience, and registration patterns. High churn in early months, newer teachers correlated with higher churn. User prompt → NLP entity recognition → LLM generates high-level DSL → Clara rule engine translates to low-level DSL → Execution. Mentorship for new teachers can reduce churn. Pairing LLMs abstract reasoning with logic engines concrete execution optimizes complex data tasks. A forward-looking talk blending data science, AI, and Clojure, emphasizing doing less.</p>
</section>
<section id="linear-foundations-nonlinear-frontiers---jelena-losic" class="level3">
<h3 class="anchored" data-anchor-id="linear-foundations-nonlinear-frontiers---jelena-losic">1.5: Linear Foundations &amp; Nonlinear Frontiers - Jelena Losic</h3>
<p>Linear systems rely on superposition, the whole is the sum of parts. Vector spaces, linear regression, Fourier analysis. Real-world systems are often nonlinear. Linear methods fail when data lies on curved manifolds or exhibits complex interactions. Techniques like t-SNE, UMAP, and autoencoders handle nonlinearity by preserving structures or learning manifold geometry. Nonlinear systems can be deterministic yet unpredictable. Nonlinear methods unlock richer patterns but sacrifice interpretability and require more data. Dimensionality reduction illustrates the trade-off between simplicity and accuracy. Embeddings leverage linear algebra but rely on nonlinear transformations for deeper semantics.</p>
</section>
<section id="raggedy-anns-big-adventure---paula-gearon" class="level3">
<h3 class="anchored" data-anchor-id="raggedy-anns-big-adventure---paula-gearon">1.6: RAGgedy Ann’s Big Adventure - Paula Gearon</h3>
<p>Vectors represent concepts in multidimensional space. Embeddings convert text into vectors, capturing meaning. Similarity between vectors is measurable. Neural networks process inputs through weighted connections and activation functions. Transformers contextualize words in sentences. Combining LLMs with vector databases to reduce hallucinations. Augmenting queries with retrieved context. LLMs are built from modular math operations. Vector databases enable semantic search. RAG improves accuracy by grounding LLM outputs in verified data.</p>
</section>
<section id="parliamentary-questions---rag-evaluation---eoin-carney" class="level3">
<h3 class="anchored" data-anchor-id="parliamentary-questions---rag-evaluation---eoin-carney">1.7: Parliamentary Questions - RAG Evaluation - Eoin Carney</h3>
<p>Can RAG effectively answer parliamentary style questions using Irish government data? 10k publicly available Irish parliamentary questions and answers. Compared sentence-based chunking with full document retrieval. Tested multiple LLMs for generation and evaluation. Retrieval Matters More Than Prompting. Smaller, precise chunks of 3–5 sentences improved precision over full document retrieval. Direct answer retrieval outperformed matching questions to answers. Deterministic metrics like word overlap failed to capture nuance. LLM as judge worked better for correctness. Clay notebook visualization helped explore vector embeddings interactively. Government answers should be plain and factual. LLMs are oddly well-suited for that.</p>
</section>
<section id="discussion-rags-and-structured-knowledge" class="level3">
<h3 class="anchored" data-anchor-id="discussion-rags-and-structured-knowledge">1.8 - Discussion: RAGs and Structured Knowledge</h3>
<p>Shared experiences using Clojure for AI projects. Exploring logic programming as a superset of reasoning techniques and unifying them with embeddings and vector logic. Foundational ontologies and their role in structuring knowledge for AI, particularly in medical domains. The conversation fluidly shifted from technical to philosophical and practical.</p>
</section>
<section id="noj-deep-dive---harold-daniel-slutsky" class="level3">
<h3 class="anchored" data-anchor-id="noj-deep-dive---harold-daniel-slutsky">1.9: Noj Deep Dive - Harold &amp; Daniel Slutsky</h3>
<p>Using Clojure for functional data science, contrasting it with Python tools like Pandas. The focus is on immutability, performance, and leveraging Clojure’s strengths for data processing. Tech.ml.dataset for tabular data processing. Columnar storage for efficiency and integrates with other libraries in the ecosystem. Layered Architecture. Hamfisted high-performance, immutable collections optimized for JVM memory/CPU. Dtype-next array random access and lazy, non-caching transformations. Tablecloth high-level tabular data tools built atop these foundations. Challenges and solutions for integrating with Python via libpython-clj and stdlang. Hamfisted and Dtype-next enable Clojure to match Java/Python performance while retaining functional idioms. 20x speedup in lazy sequences. Columnar storage in TMD reduces memory overhead. Libraries like FastMath, MetamorphML, and Tableplot extend the stack. Real-world applications in consulting and open-source collaboration. Frequent shoutouts to contributors and emphasis on community input via Zulip. If you think data science needs software engineering, you’re right. A blend of technical rigor, community spirit, and practical focus on building scalable, functional data tools.</p>
</section>
<section id="brain-data-in-clojure---lorelai-lyons" class="level3">
<h3 class="anchored" data-anchor-id="brain-data-in-clojure---lorelai-lyons">1.10: Brain data in Clojure - Lorelai Lyons</h3>
<p>Ethical and Historical Context of Brain-Computer Interfaces. Morally questionable history of neuroscience. Need for ethical considerations in modern BCIs. The goal is to bridge the gap between continuous human thought and discrete computing. Neurons generate electrical signals that can be recorded and digitized. EEG measures brainwave frequencies via electrodes placed on the scalp. EEG data from a motor imagery study. Applied filters to isolate frequency bands. Developing a low-cost binary file system for efficient EEG data storage. Exploring brain-controlled interfaces for creative applications. Consumer EEG devices make brain data collection feasible for programmers. BCIs require collaboration across neuroscience, hardware, and software. Mixed technical depth with ethical reflection.</p>
</section>
<section id="d-viscous-fluid-flow-data-analysis-burgers-equation---siyoung-byun" class="level3">
<h3 class="anchored" data-anchor-id="d-viscous-fluid-flow-data-analysis-burgers-equation---siyoung-byun">2.1: 1D Viscous Fluid Flow Data Analysis, Burgers’ Equation - Siyoung Byun</h3>
<p>Fluid dynamics is complex, involving variables like friction, pressure, and momentum. CFD uses computational methods to simulate fluid behavior, crucial for fields like aerospace, healthcare, and astrophysics. Astrophysics simulations of binary star collisions use CFD. Burgers’ Equation combines nonlinear convection (steepening fluid motion) and viscosity (smoothing/diffusion). Demonstrated via simulations of a shock in a 1D fluid, visualized over time. Used mutable Java arrays for performance. Extending to 2D/3D simulations and incorporate the Navier-Stokes equations for full fluid dynamics. Visualization Matters. Plotting data is critical for interpreting simulations. Siyoung emphasizes the learning process and invites collaboration. Technical but accessible, viscosity effects are explained with analogies. Passion for both astrophysics, fluid dynamics and Clojure shines through. Simulations of white dwarf collisions brought home the realization that star interactions are fluid. Korean ondol floor heating as an analogy for convection.</p>
</section>
<section id="uk-electricity-demand-time-series-forecasting---anton-lobach" class="level3">
<h3 class="anchored" data-anchor-id="uk-electricity-demand-time-series-forecasting---anton-lobach">2.2: UK Electricity Demand Time Series Forecasting - Anton Lobach</h3>
<p>The Taylor dataset contains electricity demand in Wales/England. Extract day of week, minute of day, weekend flag. Ridge regression regularized linear regression to prevent overfitting. Use rolling origin cross-validation. Root Mean Squared Error to measure forecast accuracy. Clojure has expressive, modular workflows with strong data processing capabilities. Seasonality matters. Minute-of-day was the most predictive feature. Ridge regression achieved reasonable accuracy. Split data into train/test sets before exploratory analysis to avoid bias. Use rolling windows for temporal data. The tutorial is available as an interactive notebook.</p>
</section>
<section id="tropical-cyclone-trajectory-modelling---k-ram-narayan-naimish-mani-b" class="level3">
<h3 class="anchored" data-anchor-id="tropical-cyclone-trajectory-modelling---k-ram-narayan-naimish-mani-b">2.3: Tropical cyclone trajectory modelling - K Ram Narayan, Naimish Mani B</h3>
<p>Accurate trajectory forecasting is crucial for disaster preparedness, evacuation planning, and minimizing loss of life and property. Forecasting relies on a mix of satellite data, computer simulations, and aircraft reconnaissance. Using SINDy (Sparse Identification of Nonlinear Dynamics), to extract governing equations from cyclone trajectory data to predict future paths. Global cyclone track dataset. Satellite imagery used to compute wind velocity and shear via optical flow. Incorporates cyclone dynamics to refine SINDy’s candidate equations. Cyclone movement is driven by steering winds, Coriolis force, beta drift, and interactions with pressure systems. Collect trajectory and satellite data. Construct a candidate library of possible dynamical terms. Use Lasso regression to sparsely select the most relevant terms. Derive interpretable differential equations for forecasting. SINDy achieved a 43.71 km mean absolute error, acceptable in cyclone forecasting. Outperformed by gradient boosting, and random forest in single-step prediction but excels in full trajectory forecasting. Bay of Bengal cyclones curve unpredictably due to land effects. Bridges meteorology, physics, and machine learning for cyclone prediction.</p>
</section>
<section id="studying-planning-with-a-novel-video-game---cvetomir-dimov" class="level3">
<h3 class="anchored" data-anchor-id="studying-planning-with-a-novel-video-game---cvetomir-dimov">2.4: Studying planning with a novel video game - Cvetomir Dimov</h3>
<p>Planning is a fundamental cognitive ability used in everyday tasks. “Tik Tik” game is designed to study planning. Players control a fireball and an ice cube that must collaborate to navigate obstacles and reach targets. A custom program was developed to generate and solve game levels, identifying optimal paths and measuring problem difficulty. Goal is to understand what incentivizes planning. Difficulty influenced by the number of barriers and their intersections. Problem difficulty predictors were the minimum moves needed and the number of possible paths up to the optimal length. Study 1 high dropout rates, large individual differences in planning ability. Study 2 time limits and stricter move limits reduced dropouts and reinforced planning incentives. Tight constraints encourage planning. Problem difficulty can be systematically manipulated for cognitive research. Demonstrations of the game and solver make abstract concepts tangible. Credits multiple software tools, emphasizing a community-driven approach to research.</p>
</section>
<section id="building-a-data-science-ecosystem-in-clojure---kira-howe" class="level3">
<h3 class="anchored" data-anchor-id="building-a-data-science-ecosystem-in-clojure---kira-howe">2.5: Building a Data Science Ecosystem in Clojure - Kira Howe</h3>
<p>Inspiration from the Tidyverse (R). A cohesive ecosystem with shared design principles on data and composable tools. Standardized data structures and streamline workflows. Fragmented tools create glue code overhead. Immutable data and pure functions enable reproducibility. JVM handles large-scale data efficiently. Engineering culture emphasis on stability and interoperability. Explosive data growth demands scalable, deterministic tools. Noj as a Clojure based ecosystem inspired by Tidyverse but optimized for scalability and engineering. Simplify onboarding through Jupyter support and Clojure in a box. Need for Shiny-like tools for rapid prototyping. Emphasized grassroots community building and learning together. Data quality should be a philosophy, not an afterthought.</p>
</section>
<section id="macroexpand-1" class="level3">
<h3 class="anchored" data-anchor-id="macroexpand-1">2.6: Macroexpand-1</h3>
<p>Ways to broaden Clojure’s impact beyond its traditional domains by fostering interdisciplinary collaboration. Need to make Clojure more accessible and visible in fields like data science, education, and specialized industries. Improve tooling, documentation, and community outreach. Developer intuitive libraries, enhancing interoperability with other languages. Lowering barriers for newcomers. Importance of geospatial analysis and modern programming practices. Sustainable community efforts and cross-disciplinary knowledge sharing.</p>
</section>
<section id="the-impact-of-lane-reductions---heather-moore-farley" class="level3">
<h3 class="anchored" data-anchor-id="the-impact-of-lane-reductions---heather-moore-farley">2.7: The Impact of Lane Reductions - Heather Moore-Farley</h3>
<p>Reducing car lanes, protected bike lanes, and pedestrian crossings decrease traffic injuries and fatalities. California’s crash data used to visualize collision hotspots to push for safer street redesigns. High injury corridors 6% of streets cause 60% of severe/fatal crashes. Correlated lane reductions, protected bike lanes, and raised bus stops led to fewer crashes over time. Local groups use data to advocate for safer streets. Police reported crash data has missing ages, locations and underreporting driver fault. Heather shares her lived experience as a car-free parent in Oakland, tying data to safety. Design solutions and community action work. Advocating for upcoming redesigns. A compelling mix of data science, urbanism, and grassroots advocacy. Number crunching can drive tangible change.</p>


</section>

 ]]></description>
  <guid>https://clojurecivitas.github.io/conferences/scinoj_light_1/notes/hallway_track.html</guid>
  <pubDate>Wed, 28 May 2025 00:00:00 GMT</pubDate>
  <media:content url="https://clojurecivitas.github.io/conferences/scinoj_light_1/notes/noj_components.png" medium="image" type="image/png" height="75" width="144"/>
</item>
<item>
  <title>Factorization of Eratosthenes</title>
  <dc:creator>Tim Schafer</dc:creator>
  <link>https://clojurecivitas.github.io/math/primes/factorization/sieve_augmented.html</link>
  <description><![CDATA[ 





<style></style>
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="math/primes/factorization/sieve_augmented_files/md-default0.js" type="text/javascript"></script>
<script src="math/primes/factorization/sieve_augmented_files/md-default1.js" type="text/javascript"></script>
<p>Adapts the <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes">Sieve of Eratosthenes</a> to prime factorize numbers through <code>n</code>.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb1-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> prime-factors </span>[n]</span>
<span id="cb1-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reduce</span></span>
<span id="cb1-3">   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [factors prime]</span>
<span id="cb1-4">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">count</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">nth</span> factors prime)))</span>
<span id="cb1-5">       (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reduce</span></span>
<span id="cb1-6">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [factors multiple]</span>
<span id="cb1-7">          (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [[composite-divisor <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:as</span> divisors] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">nth</span> factors multiple)]</span>
<span id="cb1-8">            (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&lt;</span> prime composite-divisor)</span>
<span id="cb1-9">              (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [remaining-divisor (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">/</span> composite-divisor prime)</span>
<span id="cb1-10">                    remaining-divisors (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">nth</span> factors remaining-divisor)</span>
<span id="cb1-11">                    prime-divisors (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">cons</span> prime (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rest</span> divisors))]</span>
<span id="cb1-12">                (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assoc</span></span>
<span id="cb1-13">                 factors multiple</span>
<span id="cb1-14">                 (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">count</span> remaining-divisors))</span>
<span id="cb1-15">                   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">concat</span> remaining-divisors prime-divisors)</span>
<span id="cb1-16">                   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">cons</span> remaining-divisor prime-divisors))))</span>
<span id="cb1-17">              factors)))</span>
<span id="cb1-18">        factors</span>
<span id="cb1-19">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">*</span> prime prime) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span> n) prime))</span>
<span id="cb1-20">       factors))</span>
<span id="cb1-21">   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">mapv</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">list</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span> n)))</span>
<span id="cb1-22">   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span> (m/sqrt n)))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb2-1">(prime-factors <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb3-1">[(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-2"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-3"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-4"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb3-5"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-6"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb3-7"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-8"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb3-9"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-10"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb3-11"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-12"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)</span>
<span id="cb3-13"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-14"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)]</span></code></pre></div>
</div>
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/src/math/primes/factorization/sieve_augmented.clj">src/math/primes/factorization/sieve_augmented.clj</a></small></small></pre></div>



 ]]></description>
  <guid>https://clojurecivitas.github.io/math/primes/factorization/sieve_augmented.html</guid>
  <pubDate>Wed, 28 May 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Clean object printing by removing extraneous</title>
  <dc:creator>Timothy Pratley</dc:creator>
  <link>https://clojurecivitas.github.io/clojure/print_object/remove_extraneous.html</link>
  <description><![CDATA[ 





<style></style>
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="clojure/print_object/remove_extraneous_files/md-default0.js" type="text/javascript"></script>
<script src="clojure/print_object/remove_extraneous_files/md-default1.js" type="text/javascript"></script>
<p>The Clojure default for printing objects is noisy. Clojure’s <code>print-method</code> for <code>Object</code> delegates to <code>clojure.core/print-object</code></p>
<div class="sourceClojure">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb1-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defmethod</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> print-method </span>Object [x ^java.io.Writer w]</span>
<span id="cb1-2">  (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">#'clojure.core/print-object</span> x w))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb2-1">#object[clojure.lang.MultiFn <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x23a354a1</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clojure.lang.MultiFn@23a354a1"</span>]</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb3-1">(Object.)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb4-1">#object[java.lang.Object <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x2c507e20</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"java.lang.Object@2c507e20"</span>]</span></code></pre></div>
</div>
<p>The syntax is <code>#object[CLASS-NAME HASH toString())]</code> and as you can see, the toString of an Object is <code>CLASS-NAME@HASH</code>. For most objects this becomes quite a long string.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb5-1">(async/chan)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb6-1">#object[clojure.core.async.impl.channels.ManyToManyChannel <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0xa1100b7</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clojure.core.async.impl.channels.ManyToManyChannel@a1100b7"</span>]</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://clojurecivitas.github.io/clojure/print_object/objection.jpg" class="img-fluid figure-img"></p>
<figcaption>Objection!</figcaption>
</figure>
</div>
<p>Functions are printed as objects</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb7-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [x] x)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb8-1">#object[clojure.print_object.remove_extraneous$eval22473$fn__22474 <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x70bd17ed</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clojure.print_object.remove_extraneous$eval22473$fn__22474@70bd17ed"</span>]</span></code></pre></div>
</div>
<p>It’s quite easy to miss the fact that it is a function as we are looking for a tiny little <code>fn</code> in a sea of text. If, like me, you are fond of the <a href="../../code_interview/beating/with_stupid_stuff/z_combinator_gambit.html">odd lambda calculus excursion</a>, things get even more hectic.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb9-1">((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [x] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [v] ((x x) v))) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [y] y))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb10-1">#object[clojure.print_object.remove_extraneous$eval22477$fn__22478$fn__22479 <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x612b6e2c</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clojure.print_object.remove_extraneous$eval22477$fn__22478$fn__22479@612b6e2c"</span>]</span></code></pre></div>
</div>
<p>Yikes! what an eyesore. This is not an academic issue specific to lambda calculus. Any function created from inside a function is helpfully identifiable through the <code>fn$fn</code> nesting. We create these quite regularly, and they are often printed in stack traces. I’m sure you have seen them when you map an inline function across a seq, and there is a bug in the anonymous function.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb11-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> caesar-cipher </span>[s]</span>
<span id="cb11-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">mapv</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> add2 [x] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> x)) s))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb12-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span> (caesar-cipher <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello world"</span>)</span>
<span id="cb12-2">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">catch</span> Exception ex</span>
<span id="cb12-3">       (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vec</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">take</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> (.getStackTrace ex)))))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb13-1">[[clojure.lang.Numbers add <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Numbers.java"</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">155</span>]</span>
<span id="cb13-2"> [clojure.lang.Numbers add <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Numbers.java"</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3747</span>]</span>
<span id="cb13-3"> [clojure.print_object.remove_extraneous$caesar_cipher$add2__22485 invoke <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NO_SOURCE_FILE"</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb13-4"> [clojure.core$mapv$fn__8565 invoke <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"core.clj"</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7059</span>]]</span></code></pre></div>
</div>
<p>See that part <code>caesar_cipher$add2</code>? That is <strong>very</strong> useful information. It tells us that the exception was inside <code>add2</code>, which is inside <code>caesar-cipher</code>. The stack trace doesn’t print functions as objects, but it illustrates that the thing that we care about is that they are a function, what their name is, and whether they were created from inside another function.</p>
<p>Let’s return to printing a function as an object. An easy improvement is to demunge from Java names to Clojure names. Demunging converts <code>_</code> to <code>-</code> and <code>$</code> to <code>/</code>, and munged characters like <code>+</code> which is <code>PLUS</code> in Java.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb14-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> class-name</span></span>
<span id="cb14-2">  [x]</span>
<span id="cb14-3">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> .getName Compiler/demunge))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb15-1">(class-name ((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [y] y))))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb16-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clojure.print-object.remove-extraneous/eval22491/fn--22492/fn--22493"</span></span></code></pre></div>
</div>
<p>Next, we don’t need the eval identities.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb17-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> remove-extraneous</span></span>
<span id="cb17-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Clojure compiles with unique names that include things like `/eval32352/` and `--4321`.</span></span>
<span id="cb17-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  These are rarely useful when printing a function.</span></span>
<span id="cb17-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  They can still be accessed via (class x) or similar."</span></span>
<span id="cb17-5">  [s]</span>
<span id="cb17-6">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;</span> s</span>
<span id="cb17-7">      (str/replace <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">#"/eval\d+/"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb17-8">      (str/replace <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">#"--\d+(/|$)"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$1"</span>)))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb18-1">(remove-extraneous (class-name ((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [y] y)))))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb19-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clojure.print-object.remove-extraneous/fn/fn"</span></span></code></pre></div>
</div>
<p>Much nicer. I can actually read that! I’m not particularly fond of the long namespace shown as the name is either defined in this namespace, referred, or part of <code>clojure.core</code>. The multiple slashes form invalid symbols which annoy me; I prefer using <code>/</code> only for <code>namespace/name</code> separation and <code>$</code> as the name level delimiter: <code>my.namespace/my$nested$name</code>.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb20-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> format-class-name </span>^String [s]</span>
<span id="cb20-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [[ns-str &amp; names] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;</span> (remove-extraneous s)</span>
<span id="cb20-3">                             (str/split <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">#"/"</span>))]</span>
<span id="cb20-4">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> ns-str names)</span>
<span id="cb20-5">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span> (str/join <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$"</span> names))</span>
<span id="cb20-6">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;</span> s (str/split <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">#"\."</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">last</span>)))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb21-1">(format-class-name (remove-extraneous (class-name ((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [y] y))))))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb22-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fn$fn"</span></span></code></pre></div>
</div>
<p>So short, so sweet. If it’s a function, why call it an object?</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb23-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> object-str </span>^String [x]</span>
<span id="cb23-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn?</span> x) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fn"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#object"</span>)</span>
<span id="cb23-3">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" ["</span> (format-class-name (class-name x)) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"]"</span>))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb24-1">(object-str ((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [y] y))))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb25-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fn [fn$fn]"</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb26-1">(object-str (async/chan))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb27-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#object [ManyToManyChannel]"</span></span></code></pre></div>
</div>
<p>This is really all I care to know about when printing objects and functions, and it matters inside notebooks, where we want to print things, eval things that return objects and functions, and datafy complex objects that contain other objects. To print things without knowing if they are objects, functions, or data, we can extend Clojure’s <code>print-method</code>.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb28-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defmethod</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> print-method </span>Object [x ^Writer w]</span>
<span id="cb28-2">  (.write w (object-str x)))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb29-1">#object [MultiFn]</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb30-1">((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [y] y)))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb31-1">#fn [fn$fn]</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb32-1">(async/chan)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb33-1">#object [ManyToManyChannel]</span></code></pre></div>
</div>
<p>You can require this namespace from other notebooks to turn on this nice, concise mode of object printing.</p>
<p>Happy notebooking!</p>
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/src/clojure/print_object/remove_extraneous.clj">src/clojure/print_object/remove_extraneous.clj</a></small></small></pre></div>



 ]]></description>
  <guid>https://clojurecivitas.github.io/clojure/print_object/remove_extraneous.html</guid>
  <pubDate>Mon, 26 May 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>The Z-Combinator Gambit</title>
  <dc:creator>Chris Houser</dc:creator>
  <dc:creator>Timothy Pratley</dc:creator>
  <link>https://clojurecivitas.github.io/code_interview/beating/with_stupid_stuff/z_combinator_gambit.html</link>
  <description><![CDATA[ 





<style></style>
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="code_interview/beating/with_stupid_stuff/z_combinator_gambit_files/md-default0.js" type="text/javascript"></script>
<script src="code_interview/beating/with_stupid_stuff/z_combinator_gambit_files/md-default1.js" type="text/javascript"></script>
<p>Welcome back code champs, number ninjas, and data divers to our first episode of Beating Code Interviews with Stupid Stuff. People often send me emails asking, “How can I use lambda calculus to impress people?” Today, we find out.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://clojurecivitas.github.io/code_interview/beating/with_stupid_stuff/z-combinator.jpg" class="img-fluid figure-img"></p>
<figcaption>Programmer staring at Z-combinator</figcaption>
</figure>
</div>
<p>I have an interview with ZCorp lined up in 5 minutes, and our challenge is to only use anonymous functions. No defn, no loops, and definitely no self-reference. I’ll allow myself the occasional def for brevity, but beyond that, we’ll be running on pure lambda calculus.</p>
<p><strong>20 minutes later</strong></p>
<blockquote class="blockquote">
<p>Hey, sorry to keep you waiting. I just got out of a more important meeting. I’m kind of a big deal here at ZCorp. Why don’t you tell me a <em>little</em> bit about yourself?</p>
</blockquote>
<p>Born of binary, raised on algorithms, I walk the path of lambda…</p>
<blockquote class="blockquote">
<p>Riiiight… Let’s just start with the warm-up problem. Show me how you would reverse a list.</p>
</blockquote>
<p>Ah, the timeless list reversal. Deceptively simple, perilously deep. We must first define our purpose.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb1-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF LIST])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb2-1">#object [<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span>]</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>We’re just writing a function, and it only needs to take a list…</p>
</blockquote>
<p>Not just any function, my friend, but one that knows itself. To know yourself is to find your fixed point.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb3-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> REV</span></span>
<span id="cb3-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF LIST]</span>
<span id="cb3-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">empty?</span> LIST)</span>
<span id="cb3-4">      []</span>
<span id="cb3-5">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">conj</span> (SELF SELF (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rest</span> LIST))</span>
<span id="cb3-6">            (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">first</span> LIST)))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb4-1">(REV REV [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb5-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<p><code>SELF</code> is an input to itself, the logic of reversal.</p>
<blockquote class="blockquote">
<p>Ok let’s just move on to the next problem, creating a Fibonacci sequence.</p>
</blockquote>
<p>Oh no, our definition of reverse is intertwined with recursion. Let’s factor that out:</p>
<p>We need to lift our <code>SELF</code></p>
<div class="sourceClojure">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb6-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> REV'</span></span>
<span id="cb6-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF]</span>
<span id="cb6-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LIST]</span>
<span id="cb6-4">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">empty?</span> LIST)</span>
<span id="cb6-5">        []</span>
<span id="cb6-6">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">conj</span> (SELF (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rest</span> LIST))</span>
<span id="cb6-7">              (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">first</span> LIST))))))</span></code></pre></div>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb7-1">((REV' REV') [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
<p><strong>error</strong></p>
<p>Oh, no… <code>SELF</code> doesn’t take <code>LIST</code>, it’s a function that returns a function that operates on <code>LIST</code>, and the argument to <code>SELF</code> is… <code>SELF</code>. Therefore, we need to give it <code>(SELF SELF)</code>.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb8-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> REV''</span></span>
<span id="cb8-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF]</span>
<span id="cb8-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LIST]</span>
<span id="cb8-4">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">empty?</span> LIST)</span>
<span id="cb8-5">        []</span>
<span id="cb8-6">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">conj</span> ((SELF SELF) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rest</span> LIST))</span>
<span id="cb8-7">              (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">first</span> LIST))))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb9-1">((REV<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">''</span> REV<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">''</span>) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb10-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>That’s a confusing way to write it</p>
</blockquote>
<p>Quite right, because it’s not obvious what <code>(SELF SELF)</code> is. We need to extract it out. What we want is:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb11-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> REV-LOGIC</span></span>
<span id="cb11-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF]</span>
<span id="cb11-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LIST]</span>
<span id="cb11-4">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">empty?</span> LIST)</span>
<span id="cb11-5">        []</span>
<span id="cb11-6">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">conj</span> (SELF (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rest</span> LIST))</span>
<span id="cb11-7">              (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">first</span> LIST))))))</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>Believe me when I say that is not what I meant…</p>
</blockquote>
<p>Oh, right. Now <code>SELF = (SELF SELF)</code>.</p>
<blockquote class="blockquote">
<p>Not what I meant, and also that sounds impossible.</p>
</blockquote>
<p>But identity is the identity of itself:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb12-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb13-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb14-1">((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb15-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>O.K. sure, but that’s a special case.</p>
</blockquote>
<div class="sourceClojure">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb16-1">(((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span>)) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb17-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>This is an identity crisis.</p>
</blockquote>
<p>We just need to find the right conditions for <code>(SELF SELF) = SELF</code>.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb18-1">(REV-LOGIC REV-LOGIC)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb19-1">#object [REV-LOGIC$fn]</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>Well, it’s a function! That much is clear…</p>
</blockquote>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb20-1">((REV-LOGIC REV-LOGIC) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
<p><strong>Error</strong></p>
<p>But it doesn’t work, because <code>(REV-LOGIC REV-LOGIC) =/= REV-LOGIC.</code> Let’s try something easier:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb21-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> FIX</span></span>
<span id="cb21-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LOGIC]</span>
<span id="cb21-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; return something like identity where self application does not change it</span></span>
<span id="cb21-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#_</span>FIXED))</span></code></pre></div>
</div>
<p><code>FIX</code> takes the logic function, and makes a function such that <code>(FIXED (FIX LOGIC)) = FIXED</code></p>
<p><code>(FIXED FIXED) =&gt; FIXED</code> which means that <code>((FIX LOGIC) (FIX LOGIC)) = (FIX LOGIC)</code></p>
<blockquote class="blockquote">
<p>Right, that sounds way easier… <strong>shaking head in disbelief</strong></p>
</blockquote>
<p>Exactly! Because we just reverse it: <code>(FIX F) = ((FIX F) (FIX F))</code></p>
<blockquote class="blockquote">
<p>Why did you call it <code>FIX</code>?</p>
</blockquote>
<p>Well, it was broken before right?</p>
<blockquote class="blockquote">
<p>I’m starting to think that you are the broken one.</p>
</blockquote>
<div class="sourceClojure">
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb22-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> FIX</span></span>
<span id="cb22-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LOGIC]</span>
<span id="cb22-3">    ((FIX LOGIC) (FIX LOGIC))))</span></code></pre></div>
</div>
<p>But <code>FIX</code> can still see itself. We need to parameterize the use of <code>FIXED</code></p>
<div class="sourceClojure">
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb23-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> FIX</span></span>
<span id="cb23-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LOGIC]</span>
<span id="cb23-3">    ((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [FIXED]</span>
<span id="cb23-4">       (LOGIC (FIXED FIXED)))</span>
<span id="cb23-5">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [FIXED]</span>
<span id="cb23-6">       (LOGIC (FIXED FIXED))))))</span></code></pre></div>
</div>
<p>There, I fixed it.</p>
<blockquote class="blockquote">
<p>What is fixed?</p>
</blockquote>
<p><code>FIXED</code> is <code>(FIXED FIXED)</code>, obviously.</p>
<blockquote class="blockquote">
<p>Obviously. <strong>raises hands in dispair</strong></p>
</blockquote>
<p>Because <code>(FIX F) = ((FIX F) (FIX F))</code>, it was your idea to refactor remember?</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb24-1">(FIX REV-LOGIC)</span></code></pre></div>
<p><strong>stack overflow</strong></p>
<blockquote class="blockquote">
<p>Everything looks to be inside out now.</p>
</blockquote>
<p>Oh, you are right, we can’t pass <code>(FIXED FIXED)</code> as an argument because it will be evaluated first. Thanks for the tip.</p>
<blockquote class="blockquote">
<p>Can we fix it? <strong>slaps self</strong></p>
</blockquote>
<p>Instead of calling <code>(FIXED FIXED)</code> we need a function that will create <code>(FIXED FIXED)</code> when it’s needed, after <code>LOGIC</code> gets called. <code>LOGIC</code> needs to take itself as it’s argument, so the function we pass to <code>LOGIC</code> should look very much like <code>LOGIC</code>, but of course without any actual logic in it.</p>
<blockquote class="blockquote">
<p>That actually sounds logical.</p>
</blockquote>
<p><code>LOGIC</code> is a function of itself, returning a function that acts on a value:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb25-1">(LOGIC (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> SELF [VALUE]</span>
<span id="cb25-2">         ((FIXED FIXED) VALUE)))</span></code></pre></div>
<blockquote class="blockquote">
<p>didn’t you say that <code>(FIXED FIXED) = FIXED</code>?</p>
</blockquote>
<p>Yes but only after we <code>FIX</code> it. Fixing it requires us to go from <code>FIXED</code> to <code>(FIXED FIXED)</code> remember?</p>
<blockquote class="blockquote">
<p>Ah sure…</p>
</blockquote>
<p>So while we are fixing logic, let’s replace <code>(LOGIC (FIXED FIXED))</code> with our deferring function.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb26-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> FIX</span></span>
<span id="cb26-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LOGIC]</span>
<span id="cb26-3">    ((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [FIXED]</span>
<span id="cb26-4">       (LOGIC (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> SELF [VALUE]</span>
<span id="cb26-5">                ((FIXED FIXED) VALUE))))</span>
<span id="cb26-6">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [FIXED]</span>
<span id="cb26-7">       (LOGIC (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> SELF [VALUE]</span>
<span id="cb26-8">                ((FIXED FIXED) VALUE)))))))</span></code></pre></div>
</div>
<p>Did you know this is called continuation passing style?</p>
<blockquote class="blockquote">
<p>CSP?</p>
</blockquote>
<p>No, that’s communicating subprocesses.</p>
<blockquote class="blockquote">
<p>That’s confusing.</p>
</blockquote>
<p>Isn’t it!? Fortunately, we are about to be unconfused.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb27-1">(FIX REV-LOGIC)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb28-1">#object [REV-LOGIC$fn]</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>At least it didn’t blow up this time…</p>
</blockquote>
<div class="sourceClojure">
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb29-1">((FIX REV-LOGIC) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb30-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>Nice, that’s the right answer.</p>
</blockquote>
<p>Even nicer is that our fixed logic behaves like identity now:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb31-1">((REV-LOGIC (FIX REV-LOGIC)) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb32-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb33-1">((REV-LOGIC (REV-LOGIC (FIX REV-LOGIC))) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb34-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>I can’t believe something so ridiculous actually works.</p>
</blockquote>
<p>Yes it is ridiculous to have all those silly names. Let’s fix that:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb35-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> Z</span></span>
<span id="cb35-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [F]</span>
<span id="cb35-3">    ((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [X]</span>
<span id="cb35-4">       (F (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [V] ((X X) V))))</span>
<span id="cb35-5">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [X]</span>
<span id="cb35-6">       (F (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [V] ((X X) V)))))))</span></code></pre></div>
</div>
<p>You are not your variables. Rename them, rebind them. Your essence is invariant.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb36-1">((Z REV-LOGIC) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb37-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>Wait, we are meant to be doing Fibonacci, remember?</p>
</blockquote>
<p>We are factoring out our <code>LOGIC</code>.</p>
<blockquote class="blockquote">
<p>It looks to me like you doubled the code, that’s not great refactoring. Using single letters make it totally unreadable.</p>
</blockquote>
<p>Hmmm, there does seem to be a lot of doubling. We can factor out a function for <code>f =&gt; (f f)</code>.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb38-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> REPLICATE </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Omega, the self-devouring serpent"</span></span>
<span id="cb38-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [F]</span>
<span id="cb38-3">    (F F)))</span></code></pre></div>
</div>
<p>The replication of identity is itself.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb39-1">((REPLICATE <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb40-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<p>But test not the serpent lightly</p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb41-1">(REPLICATE REPLICATE)</span></code></pre></div>
<p><strong>stack overflow</strong></p>
<p>The replication of replication is eternal. Now we can clean up that duplication.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb42-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> Z</span></span>
<span id="cb42-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LOGIC]</span>
<span id="cb42-3">    (REPLICATE (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [X]</span>
<span id="cb42-4">                 (LOGIC (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [V] ((X X) V)))))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb43-1">((Z REV-LOGIC) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb44-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>That’s not really any clearer…</p>
</blockquote>
<p>Very well, we can keep extracting.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb45-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> DEFER </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eta, the patient one"</span></span>
<span id="cb45-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LOGIC]</span>
<span id="cb45-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [VALUE]</span>
<span id="cb45-4">      ((REPLICATE LOGIC) VALUE))))</span></code></pre></div>
</div>
<p>If the infinite is deferred, is it infinite?</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb46-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> FOLD </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zeta, weaver of logic, bringer of finitude"</span></span>
<span id="cb46-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LOGIC]</span>
<span id="cb46-3">    (REPLICATE (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF]</span>
<span id="cb46-4">                 (LOGIC (DEFER SELF))))))</span></code></pre></div>
</div>
<p>OMEGA diverges, ZETA folds, LOGIC writes QED.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb47-1">((FOLD REV-LOGIC) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb48-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<p>That’s much nicer, I’m so glad you suggested using longer names.</p>
<blockquote class="blockquote">
<p>Can we write Fibonacci, <em>please</em>?</p>
</blockquote>
<p>Oh, that’s easy now!</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb49-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> FIB-LOGIC</span></span>
<span id="cb49-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF]</span>
<span id="cb49-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [[B A <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:as</span> FIBS]]</span>
<span id="cb49-4">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&gt;</span> B <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb49-5">        FIBS</span>
<span id="cb49-6">        (SELF (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">concat</span> [(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">+</span> A B) B] FIBS))))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb50-1">((FOLD FIB-LOGIC) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb51-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>That’s all backward!!</p>
</blockquote>
<p>Oh, my mistake</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb52-1">((FOLD REV-LOGIC) ((FOLD FIB-LOGIC) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb53-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>]</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>You can’t be serious… This is ridiculous. We’ll be here forever if you keep this up.</p>
</blockquote>
<p>I love that idea! An infinite sequence is exactly what we need…</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb54-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> FIB-LOGIC-FOREVER</span></span>
<span id="cb54-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF]</span>
<span id="cb54-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [A]</span>
<span id="cb54-4">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [B]</span>
<span id="cb54-5">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lazy-seq</span></span>
<span id="cb54-6">          (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">cons</span> A ((SELF B) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">+</span> A B))))))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb55-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">take</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> (((FOLD FIB-LOGIC-FOREVER) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb56-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">89</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">144</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">233</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">377</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">610</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">987</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1597</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2584</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4181</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6765</span>)</span></code></pre></div>
</div>
<p>That’s so nice.</p>
<blockquote class="blockquote">
<p>Oh look at the time! I have a more important meeting to go to! <strong>disconnects</strong></p>
</blockquote>
<p>Ouch, Rough. ZCorp never got back to me, so let’s update the scoreboard as a loss.</p>
<div class="clay-table">
<div class="table-responsive">
<table class="table table-hover clay-table caption-top" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">Interviews</th>
<th data-quarto-table-cell-role="th">Wins</th>
<th data-quarto-table-cell-role="th">GGs</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>That’s all for today. Until next time, keep on coding.</p>
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/src/code_interview/beating/with_stupid_stuff/z_combinator_gambit.clj">src/code_interview/beating/with_stupid_stuff/z_combinator_gambit.clj</a></small></small></pre></div>



 ]]></description>
  <guid>https://clojurecivitas.github.io/code_interview/beating/with_stupid_stuff/z_combinator_gambit.html</guid>
  <pubDate>Sun, 25 May 2025 00:00:00 GMT</pubDate>
  <media:content url="https://clojurecivitas.github.io/code_interview/beating/with_stupid_stuff/z-combinator.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Noj Reload Executable</title>
  <dc:creator>Timothy Pratley</dc:creator>
  <link>https://clojurecivitas.github.io/scicloj/noj/intro/getting-started-noj.html</link>
  <description><![CDATA[ 





<p>Transcript of <a href="https://youtu.be/tDz1x2d65C0">Noj Reload Executable</a></p>
<p>Hello code champs, number ninjas and data divers!</p>
<p>Imagine being able to experiment with Clojure without needing to install tooling, set up editors, or even know about deps.edn Sounds like a dream, right? Well, dream no more—meet <a href="https://scicloj.github.io/noj/">Noj’s</a> new Code Reload Executable!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://clojurecivitas.github.io/scicloj/noj/intro/Noj-icon.svg" class="img-fluid figure-img"></p>
<figcaption>Noj</figcaption>
</figure>
</div>
<p>We can skip the Clojure tooling and editor setup, but we do need to install the recommended Adoptive Java. Now we download the latest Noj jar from the Scicloj Noj GitHub releases page. Let’s check the jar is in the Downloads directory, and that we have java installed by executing <code>java -version</code>.</p>
<p>Launch Noj using <code>java -jar</code> and the path to the jar file. Pro tip, if you press tab while typing a path, it will autocomplete. Noj is running, it created a directory called notebooks, and it recommends we create a Clojure file there.</p>
<p>I’ll create my file with Notepad, being careful to create a .clj file rather than a text file. When I saved that file, a browser window opened. Let’s put them side by side. Every time I save the file, the notebook updates.</p>
<p>If I’m interested in one particular top-level form, I can narrow the output by adding ,, anywhere in the form. And removing it renders the full notebook. And check this out—comments are rendered as Markdown. How cool is that? What an easy way to get coding!</p>
<p>Noj isn’t just a notebook—it’s a fully featured data science environment. It includes interesting datasets that can be queried and the results shown as tables or even better as charts.</p>
<p>Noj makes experimenting with Clojure easier than ever. No setup headaches, no complicated tooling—just pure coding joy.</p>
<p>Until next time, Keep on coding</p>



 ]]></description>
  <guid>https://clojurecivitas.github.io/scicloj/noj/intro/getting-started-noj.html</guid>
  <pubDate>Tue, 06 May 2025 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
