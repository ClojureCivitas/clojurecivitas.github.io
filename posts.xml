<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Clojure Civitas</title>
<link>https://clojurecivitas.github.io/posts.html</link>
<atom:link href="https://clojurecivitas.github.io/posts.xml" rel="self" type="application/rss+xml"/>
<description></description>
<image>
<url>https://clojurecivitas.github.io/images/civitas-icon.svg</url>
<title>Clojure Civitas</title>
<link>https://clojurecivitas.github.io/posts.html</link>
</image>
<generator>quarto-1.7.32</generator>
<lastBuildDate>Fri, 27 Jun 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>Convergence to Normal Distribution, independent of original distribution</title>
  <dc:creator>Sam Umbach</dc:creator>
  <link>https://clojurecivitas.github.io/math/stats/central_limit_theorem_different_distributions.html</link>
  <description><![CDATA[ 





<style></style>
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="central_limit_theorem_different_distributions_files/md-default0.js" type="text/javascript"></script>
<script src="central_limit_theorem_different_distributions_files/md-default1.js" type="text/javascript"></script>
<script src="central_limit_theorem_different_distributions_files/plotly2.js" type="text/javascript"></script>
<p>We mentioned <a href="central_limit_theorem_convergence.html">last time</a> that the result of combining more and more events will approach the normal distribution, regardless of the shape of the original event distribution. Let’s try to demonstrate that visually.</p>
<p>Our previous definition of a random event is an example of a uniform distribution:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb1-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> event </span>[]</span>
<span id="cb1-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rand</span>))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb2-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> event-sample-dataset </span>[event-fn sample-count]</span>
<span id="cb2-2">  {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:index</span>       (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> sample-count)</span>
<span id="cb2-3">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:event-value</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeatedly</span> sample-count event-fn)})</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb3-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> uniform-ds </span>(event-sample-dataset event <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb4-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> histogram </span>[ds]</span>
<span id="cb4-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;</span> ds</span>
<span id="cb4-3">      (tc/dataset)</span>
<span id="cb4-4">      (plotly/layer-histogram</span>
<span id="cb4-5">       {:=x <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:event-value</span></span>
<span id="cb4-6">        :=histnorm <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"count"</span></span>
<span id="cb4-7">        :=histogram-nbins <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>})</span>
<span id="cb4-8">      (plotly/layer-point)))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb5-1">(histogram uniform-ds)</span></code></pre></div>
</div>
<div style="height:auto;width:100%;"><script>Plotly.newPlot(document.currentScript.parentElement,
               [{"y":[2516,2543,2543,2497,2436,2465,2559,2529,2478,2477,2523,2506,2522,2540,2522,2494,2469,2420,2554,2560,2541,2525,2455,2497,2394,2576,2512,2512,2519,2496,2461,2521,2523,2556,2426,2370,2425,2552,2512,2474],"r":null,"name":"","fill":null,"mode":null,"width":[0.024999523939442766,0.024999523939442766,0.024999523939442762,0.02499952393944277,0.024999523939442755,0.02499952393944277,0.02499952393944274,0.024999523939442797,0.02499952393944274,0.02499952393944277,0.02499952393944277,0.02499952393944277,0.02499952393944277,0.024999523939442714,0.024999523939442825,0.02499952393944277,0.024999523939442714,0.02499952393944277,0.02499952393944277,0.02499952393944277,0.024999523939442825,0.024999523939442714,0.024999523939442714,0.024999523939442825,0.024999523939442714,0.024999523939442825,0.024999523939442825,0.024999523939442603,0.024999523939442825,0.024999523939442825,0.024999523939442714,0.024999523939442825,0.024999523939442603,0.024999523939442825,0.024999523939442825,0.024999523939442714,0.024999523939442825,0.024999523939442714,0.024999523939442714,0.024999523939442825],"type":"bar","theta":null,"z":null,"lon":null,"lat":null,"x":[0.012499988429645307,0.03749951236908807,0.062499036308530834,0.0874985602479736,0.11249808418741636,0.13749760812685913,0.1624971320663019,0.18749665600574467,0.21249617994518744,0.23749570388463018,0.262495227824073,0.2874947517635157,0.3124942757029585,0.3374937996424012,0.362493323581844,0.38749284752128677,0.41249237146072953,0.4374918954001723,0.462491419339615,0.48749094327905784,0.5124904672185007,0.5374899911579434,0.5624895150973861,0.5874890390368288,0.6124885629762716,0.6374880869157145,0.6624876108551572,0.6874871347945999,0.7124866587340426,0.7374861826734855,0.7624857066129282,0.787485230552371,0.8124847544918137,0.8374842784312564,0.8624838023706993,0.887483326310142,0.9124828502495848,0.9374823741890276,0.9624818981284703,0.9874814220679131],"text":null},{"r":null,"name":"","fill":null,"mode":"markers","width":null,"type":"scatter","theta":null,"z":null,"lon":null,"lat":null,"text":null}], {"width":500,"height":400,"margin":{"t":25},"automargin":false,"plot_bgcolor":"rgb(235,235,235)","xaxis":{"gridcolor":"rgb(255,255,255)","title":"event-value","showgrid":true},"yaxis":{"gridcolor":"rgb(255,255,255)","title":"count","showgrid":true},"title":null}, {});</script></div>
<p>If we combine several of these distributions, watch the shape of the distribution:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb6-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> avg </span>[nums]</span>
<span id="cb6-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">/</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reduce</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">+</span> nums) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">count</span> nums)))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb7-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> combined-event </span>[number-of-events]</span>
<span id="cb7-2">  (avg (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeatedly</span> number-of-events event)))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb8-1">(histogram (event-sample-dataset #(combined-event <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>))</span></code></pre></div>
</div>
<div style="height:auto;width:100%;"><script>Plotly.newPlot(document.currentScript.parentElement,
               [{"y":[144,376,633,925,1148,1371,1579,1851,2118,2313,2523,2822,3164,3436,3657,3921,4077,4205,4730,4925,4895,4602,4360,4133,3874,3628,3361,3129,2886,2530,2459,2138,1873,1614,1378,1133,883,660,382,164],"r":null,"name":"","fill":null,"mode":null,"width":[0.024877267326272,0.024877267326272,0.024877267326271997,0.024877267326272004,0.024877267326272004,0.02487726732627199,0.02487726732627199,0.024877267326272018,0.02487726732627199,0.024877267326272018,0.02487726732627199,0.02487726732627199,0.02487726732627199,0.02487726732627199,0.02487726732627199,0.024877267326272046,0.024877267326271935,0.024877267326272046,0.024877267326271935,0.024877267326272046,0.02487726732627199,0.024877267326272046,0.024877267326271935,0.024877267326272046,0.024877267326271935,0.024877267326272046,0.024877267326272046,0.024877267326271935,0.024877267326271935,0.024877267326272046,0.024877267326272046,0.024877267326272046,0.024877267326271935,0.024877267326271935,0.024877267326272046,0.024877267326272046,0.024877267326272046,0.024877267326271824,0.024877267326272046,0.024877267326272046],"type":"bar","theta":null,"z":null,"lon":null,"lat":null,"x":[0.014367329316711008,0.03924459664298301,0.06412186396925501,0.088999131295527,0.11387639862179902,0.138753665948071,0.163630933274343,0.18850820060061502,0.213385467926887,0.238262735253159,0.26314000257943104,0.288017269905703,0.312894537231975,0.33777180455824696,0.362649071884519,0.387526339210791,0.412403606537063,0.437280873863335,0.46215814118960696,0.48703540851587895,0.5119126758421509,0.536789943168423,0.5616672104946949,0.586544477820967,0.611421745147239,0.636299012473511,0.661176279799783,0.6860535471260549,0.710930814452327,0.7358080817785989,0.760685349104871,0.785562616431143,0.8104398837574149,0.835317151083687,0.8601944184099589,0.885071685736231,0.909948953062503,0.9348262203887749,0.9597034877150469,0.9845807550413189],"text":null},{"r":null,"name":"","fill":null,"mode":"markers","width":null,"type":"scatter","theta":null,"z":null,"lon":null,"lat":null,"text":null}], {"width":500,"height":400,"margin":{"t":25},"automargin":false,"plot_bgcolor":"rgb(235,235,235)","xaxis":{"gridcolor":"rgb(255,255,255)","title":"event-value","showgrid":true},"yaxis":{"gridcolor":"rgb(255,255,255)","title":"count","showgrid":true},"title":null}, {});</script></div>
<div class="sourceClojure">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb9-1">(histogram (event-sample-dataset #(combined-event <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>))</span></code></pre></div>
</div>
<div style="height:auto;width:100%;"><script>Plotly.newPlot(document.currentScript.parentElement,
               [{"y":[5,21,41,83,172,307,466,717,1073,1448,1983,2630,3088,3851,4467,5157,5719,6269,6280,6640,6667,6546,6210,5605,4980,4367,3719,3062,2452,1841,1444,1019,641,452,295,160,74,29,14,6],"r":null,"name":"","fill":null,"mode":null,"width":[0.02231011903395897,0.022310119033958978,0.022310119033958964,0.02231011903395899,0.022310119033958964,0.022310119033958964,0.022310119033958964,0.02231011903395899,0.022310119033958964,0.022310119033958964,0.02231011903395902,0.022310119033958964,0.022310119033958964,0.022310119033958964,0.022310119033958964,0.02231011903395902,0.02231011903395891,0.02231011903395902,0.02231011903395891,0.022310119033958964,0.022310119033959075,0.022310119033958964,0.022310119033958853,0.022310119033959075,0.022310119033958964,0.022310119033958964,0.022310119033958964,0.022310119033958964,0.022310119033958964,0.022310119033958964,0.022310119033959075,0.022310119033958964,0.022310119033958853,0.022310119033958964,0.022310119033959075,0.022310119033958964,0.022310119033958964,0.022310119033958853,0.022310119033959075,0.022310119033958964],"type":"bar","theta":null,"z":null,"lon":null,"lat":null,"x":[0.06623803415674655,0.08854815319070553,0.11085827222466449,0.13316839125862345,0.15547851029258244,0.1777886293265414,0.20009874836050037,0.22240886739445936,0.24471898642841833,0.2670291054623773,0.2893392244963363,0.3116493435302953,0.33395946256425424,0.3562695815982132,0.37857970063217217,0.40088981966613113,0.4231999387000901,0.44551005773404906,0.467820176768008,0.490130295801967,0.5124404148359261,0.534750533869885,0.557060652903844,0.579370771937803,0.6016808909717619,0.6239910100057209,0.6463011290396798,0.6686112480736388,0.6909213671075978,0.7132314861415567,0.7355416051755157,0.7578517242094748,0.7801618432434336,0.8024719622773926,0.8247820813113516,0.8470922003453106,0.8694023193792696,0.8917124384132284,0.9140225574471874,0.9363326764811465],"text":null},{"r":null,"name":"","fill":null,"mode":"markers","width":null,"type":"scatter","theta":null,"z":null,"lon":null,"lat":null,"text":null}], {"width":500,"height":400,"margin":{"t":25},"automargin":false,"plot_bgcolor":"rgb(235,235,235)","xaxis":{"gridcolor":"rgb(255,255,255)","title":"event-value","showgrid":true},"yaxis":{"gridcolor":"rgb(255,255,255)","title":"count","showgrid":true},"title":null}, {});</script></div>
<div class="sourceClojure">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb10-1">(histogram (event-sample-dataset #(combined-event <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>))</span></code></pre></div>
</div>
<div style="height:auto;width:100%;"><script>Plotly.newPlot(document.currentScript.parentElement,
               [{"y":[1,0,2,4,14,32,68,145,265,430,746,1192,1737,2506,3410,4608,5772,6651,7586,8160,8590,8515,7916,7222,6291,5191,4085,2952,2085,1457,1005,624,374,184,100,47,16,11,4,2],"r":null,"name":"","fill":null,"mode":null,"width":[0.013968668223534791,0.013968668223534791,0.013968668223534791,0.013968668223534764,0.013968668223534764,0.01396866822353482,0.013968668223534764,0.01396866822353482,0.013968668223534764,0.01396866822353482,0.013968668223534764,0.013968668223534764,0.01396866822353482,0.013968668223534764,0.013968668223534764,0.01396866822353482,0.013968668223534764,0.013968668223534764,0.01396866822353482,0.01396866822353482,0.01396866822353482,0.013968668223534708,0.01396866822353482,0.013968668223534708,0.01396866822353482,0.01396866822353482,0.01396866822353482,0.013968668223534708,0.01396866822353482,0.01396866822353482,0.01396866822353482,0.013968668223534708,0.01396866822353482,0.013968668223534708,0.01396866822353482,0.01396866822353482,0.01396866822353482,0.013968668223534708,0.01396866822353482,0.01396866822353482],"type":"bar","theta":null,"z":null,"lon":null,"lat":null,"x":[0.2170003766892794,0.23096904491281423,0.244937713136349,0.25890638135988375,0.27287504958341857,0.28684371780695334,0.3008123860304881,0.3147810542540229,0.32874972247755774,0.3427183907010925,0.35668705892462726,0.3706557271481621,0.38462439537169685,0.3985930635952316,0.41256173181876643,0.4265304000423012,0.44049906826583596,0.4544677364893708,0.46843640471290554,0.48240507293644036,0.4963737411599752,0.5103424093835099,0.5243110776070448,0.5382797458305795,0.5522484140541142,0.5662170822776491,0.5801857505011838,0.5941544187247186,0.6081230869482535,0.6220917551717882,0.6360604233953231,0.6500290916188578,0.6639977598423925,0.6779664280659273,0.6919350962894621,0.7059037645129969,0.7198724327365318,0.7338411009600665,0.7478097691836012,0.7617784374071361],"text":null},{"r":null,"name":"","fill":null,"mode":"markers","width":null,"type":"scatter","theta":null,"z":null,"lon":null,"lat":null,"text":null}], {"width":500,"height":400,"margin":{"t":25},"automargin":false,"plot_bgcolor":"rgb(235,235,235)","xaxis":{"gridcolor":"rgb(255,255,255)","title":"event-value","showgrid":true},"yaxis":{"gridcolor":"rgb(255,255,255)","title":"count","showgrid":true},"title":null}, {});</script></div>
<p>Let’s try this again with a different shape of distribution:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb11-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> triangle-wave </span>[x]</span>
<span id="cb11-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;</span> x (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) (Math/abs) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span>)))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb12-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [xs (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.01</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span>
<span id="cb12-2">          ys (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">mapv</span> triangle-wave xs)]</span>
<span id="cb12-3">      (tc/dataset {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:x</span> xs <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:y</span> ys}))</span>
<span id="cb12-4">    (plotly/layer-point</span>
<span id="cb12-5">     {:=x <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:x</span></span>
<span id="cb12-6">      :=y <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:y</span>}))</span></code></pre></div>
</div>
<div style="height:auto;width:100%;"><script>Plotly.newPlot(document.currentScript.parentElement,
               [{"y":[2.0,1.96,1.92,1.88,1.84,1.8,1.76,1.72,1.68,1.6400000000000001,1.6,1.56,1.52,1.48,1.44,1.4,1.3599999999999999,1.3199999999999998,1.2799999999999998,1.2399999999999998,1.1999999999999997,1.1599999999999997,1.1199999999999997,1.0799999999999996,1.0399999999999996,0.9999999999999998,0.9599999999999997,0.9199999999999997,0.8799999999999997,0.8399999999999996,0.7999999999999996,0.7599999999999996,0.7199999999999995,0.6799999999999995,0.6399999999999995,0.5999999999999994,0.5599999999999994,0.5199999999999994,0.4799999999999993,0.4399999999999993,0.39999999999999925,0.3599999999999992,0.3199999999999992,0.27999999999999914,0.2399999999999991,0.19999999999999907,0.15999999999999903,0.119999999999999,0.07999999999999896,0.039999999999998925,8.881784197001252E-16,0.040000000000000924,0.08000000000000096,0.120000000000001,0.16000000000000103,0.20000000000000107,0.2400000000000011,0.28000000000000114,0.3200000000000012,0.3600000000000012,0.40000000000000124,0.4400000000000013,0.4800000000000013,0.5200000000000014,0.5600000000000014,0.6000000000000014,0.6400000000000015,0.6800000000000015,0.7200000000000015,0.7600000000000016,0.8000000000000016,0.8400000000000016,0.8800000000000017,0.9200000000000017,0.9600000000000017,1.0000000000000018,1.0400000000000018,1.0800000000000018,1.1200000000000019,1.160000000000002,1.200000000000002,1.240000000000002,1.280000000000002,1.320000000000002,1.360000000000002,1.4000000000000021,1.4400000000000022,1.4800000000000022,1.5200000000000022,1.5600000000000023,1.6000000000000023,1.6400000000000023,1.6800000000000024,1.7200000000000024,1.7600000000000025,1.8000000000000025,1.8400000000000025,1.8800000000000026,1.9200000000000026,1.9600000000000026,2.0000000000000027],"r":null,"name":"","fill":null,"mode":"markers","width":null,"type":"scatter","theta":null,"z":null,"lon":null,"lat":null,"x":[0.0,0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.1,0.11,0.12,0.13,0.14,0.15,0.16,0.17,0.18,0.19,0.2,0.21,0.22,0.23,0.24,0.25,0.26,0.27,0.28,0.29,0.3,0.31,0.32,0.33,0.34,0.35000000000000003,0.36,0.37,0.38,0.39,0.4,0.41000000000000003,0.42,0.43,0.44,0.45,0.46,0.47000000000000003,0.48,0.49,0.5,0.51,0.52,0.53,0.54,0.55,0.56,0.5700000000000001,0.58,0.59,0.6,0.61,0.62,0.63,0.64,0.65,0.66,0.67,0.68,0.6900000000000001,0.7000000000000001,0.71,0.72,0.73,0.74,0.75,0.76,0.77,0.78,0.79,0.8,0.81,0.8200000000000001,0.8300000000000001,0.84,0.85,0.86,0.87,0.88,0.89,0.9,0.91,0.92,0.93,0.9400000000000001,0.9500000000000001,0.96,0.97,0.98,0.99,1.0],"text":null}], {"width":500,"height":400,"margin":{"t":25},"automargin":false,"plot_bgcolor":"rgb(235,235,235)","xaxis":{"gridcolor":"rgb(255,255,255)","title":"x","showgrid":true},"yaxis":{"gridcolor":"rgb(255,255,255)","title":"y","showgrid":true},"title":null}, {});</script></div>
<p>Generating samples from this distribution is more complicated than I initially expected. This warrants a follow-up, but for now I’ll just link to my source for this method: <a href="https://web.mit.edu/urban_or_book/www/book/chapter7/7.1.3.html"><em>Urban Operations Research</em> by Richard C. Larson and Amedeo R. Odoni, Section 7.1.3 Generating Samples from Probability Distributions</a> (see “The rejection method”).</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb13-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> sample-from-function </span>[f x-min x-max y-min y-max]</span>
<span id="cb13-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">loop</span> []</span>
<span id="cb13-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [x (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">+</span> x-min (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">*</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rand</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span> x-max x-min)))</span>
<span id="cb13-4">          y (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">+</span> y-min (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">*</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rand</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span> y-max y-min)))]</span>
<span id="cb13-5">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&lt;=</span> y (f x))</span>
<span id="cb13-6">        x</span>
<span id="cb13-7">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">recur</span>)))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb14-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> event </span>[]</span>
<span id="cb14-2">  (sample-from-function triangle-wave <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb15-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> triangle-wave-ds </span>(event-sample-dataset event <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb16-1">(histogram triangle-wave-ds)</span></code></pre></div>
</div>
<div style="height:auto;width:100%;"><script>Plotly.newPlot(document.currentScript.parentElement,
               [{"y":[4862,4537,4374,4138,3940,3722,3358,3075,2869,2598,2416,2100,1831,1615,1398,1111,808,638,370,115,111,382,656,804,1114,1375,1641,1908,2126,2381,2518,2878,3192,3390,3660,3909,4173,4368,4612,4927],"r":null,"name":"","fill":null,"mode":null,"width":[0.024999293100962543,0.024999293100962543,0.024999293100962536,0.02499929310096255,0.024999293100962536,0.024999293100962536,0.02499929310096255,0.02499929310096255,0.024999293100962522,0.02499929310096255,0.024999293100962577,0.024999293100962494,0.02499929310096255,0.02499929310096255,0.02499929310096255,0.02499929310096255,0.024999293100962494,0.02499929310096255,0.02499929310096255,0.02499929310096255,0.02499929310096255,0.024999293100962605,0.024999293100962383,0.024999293100962605,0.024999293100962605,0.024999293100962494,0.024999293100962605,0.024999293100962494,0.024999293100962494,0.024999293100962605,0.024999293100962494,0.024999293100962605,0.024999293100962494,0.024999293100962494,0.024999293100962605,0.024999293100962494,0.024999293100962605,0.024999293100962494,0.024999293100962494,0.024999293100962605],"type":"bar","theta":null,"z":null,"lon":null,"lat":null,"x":[0.012501298574461996,0.037500591675424536,0.06249988477638708,0.08749917787734962,0.11249847097831217,0.1374977640792747,0.16249705718023724,0.1874963502811998,0.2124956433821623,0.23749493648312486,0.2624942295840874,0.28749352268504996,0.3124928157860125,0.337492108886975,0.3624914019879376,0.3874906950889001,0.41248998818986266,0.4374892812908252,0.4624885743917877,0.4874878674927503,0.5124871605937128,0.5374864536946754,0.5624857467956379,0.5874850398966004,0.612484332997563,0.6374836260985255,0.6624829191994881,0.6874822123004507,0.7124815054014131,0.7374807985023757,0.7624800916033383,0.7874793847043008,0.8124786778052633,0.8374779709062259,0.8624772640071884,0.8874765571081509,0.9124758502091135,0.9374751433100761,0.9624744364110385,0.9874737295120011],"text":null},{"r":null,"name":"","fill":null,"mode":"markers","width":null,"type":"scatter","theta":null,"z":null,"lon":null,"lat":null,"text":null}], {"width":500,"height":400,"margin":{"t":25},"automargin":false,"plot_bgcolor":"rgb(235,235,235)","xaxis":{"gridcolor":"rgb(255,255,255)","title":"event-value","showgrid":true},"yaxis":{"gridcolor":"rgb(255,255,255)","title":"count","showgrid":true},"title":null}, {});</script></div>
<p>Let’s combine several of these distributions:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb17-1">(histogram (event-sample-dataset #(combined-event <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>))</span></code></pre></div>
</div>
<div style="height:auto;width:100%;"><script>Plotly.newPlot(document.currentScript.parentElement,
               [{"y":[562,1311,1919,2361,2624,2692,2725,2524,2231,1837,1526,1262,1281,1545,2060,2639,3340,4227,5203,6182,6078,5217,4273,3312,2605,1951,1493,1273,1221,1437,1897,2346,2530,2817,2721,2561,2367,1927,1377,546],"r":null,"name":"","fill":null,"mode":null,"width":[0.024930771909008553,0.024930771909008553,0.02493077190900854,0.024930771909008567,0.024930771909008553,0.024930771909008526,0.024930771909008553,0.02493077190900858,0.024930771909008526,0.02493077190900858,0.024930771909008553,0.024930771909008498,0.02493077190900861,0.024930771909008498,0.024930771909008553,0.02493077190900861,0.024930771909008498,0.024930771909008553,0.024930771909008553,0.024930771909008498,0.02493077190900861,0.02493077190900861,0.024930771909008498,0.024930771909008498,0.02493077190900861,0.02493077190900861,0.024930771909008498,0.024930771909008498,0.02493077190900861,0.024930771909008498,0.02493077190900861,0.02493077190900861,0.024930771909008387,0.02493077190900861,0.02493077190900861,0.024930771909008498,0.02493077190900861,0.024930771909008498,0.024930771909008498,0.02493077190900861],"type":"bar","theta":null,"z":null,"lon":null,"lat":null,"x":[0.013865404670839604,0.03879617657984816,0.06372694848885671,0.08865772039786526,0.11358849230687382,0.13851926421588234,0.1634500361248909,0.18838080803389945,0.213311579942908,0.23824235185191656,0.26317312376092517,0.28810389566993366,0.3130346675789422,0.33796543948795077,0.36289621139695927,0.3878269833059679,0.41275775521497643,0.437688527123985,0.4626192990329935,0.48755007094200203,0.5124808428510106,0.5374116147600192,0.5623423866690278,0.5872731585780362,0.6122039304870448,0.6371347023960534,0.662065474305062,0.6869962462140704,0.711927018123079,0.7368577900320876,0.7617885619410961,0.7867193338501047,0.8116501057591132,0.8365808776681217,0.8615116495771303,0.8864424214861388,0.9113731933951474,0.936303965304156,0.9612347372131644,0.986165509122173],"text":null},{"r":null,"name":"","fill":null,"mode":"markers","width":null,"type":"scatter","theta":null,"z":null,"lon":null,"lat":null,"text":null}], {"width":500,"height":400,"margin":{"t":25},"automargin":false,"plot_bgcolor":"rgb(235,235,235)","xaxis":{"gridcolor":"rgb(255,255,255)","title":"event-value","showgrid":true},"yaxis":{"gridcolor":"rgb(255,255,255)","title":"count","showgrid":true},"title":null}, {});</script></div>
<div class="sourceClojure">
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb18-1">(histogram (event-sample-dataset #(combined-event <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>))</span></code></pre></div>
</div>
<div style="height:auto;width:100%;"><script>Plotly.newPlot(document.currentScript.parentElement,
               [{"y":[11,71,145,339,483,599,677,916,1416,2084,2634,2978,3060,3184,3830,4858,5708,6035,5573,5242,5284,5734,6039,5761,4863,3924,3348,3062,2907,2600,2034,1362,935,683,576,470,322,192,50,11],"r":null,"name":"","fill":null,"mode":null,"width":[0.0239956470198385,0.0239956470198385,0.023995647019838487,0.0239956470198385,0.023995647019838487,0.0239956470198385,0.023995647019838473,0.02399564701983853,0.023995647019838473,0.0239956470198385,0.02399564701983853,0.023995647019838473,0.023995647019838473,0.023995647019838473,0.02399564701983853,0.02399564701983853,0.023995647019838473,0.023995647019838473,0.023995647019838473,0.02399564701983853,0.023995647019838473,0.023995647019838584,0.023995647019838362,0.023995647019838584,0.023995647019838473,0.023995647019838473,0.023995647019838584,0.023995647019838362,0.023995647019838584,0.023995647019838473,0.023995647019838473,0.023995647019838584,0.023995647019838362,0.023995647019838584,0.023995647019838473,0.023995647019838473,0.023995647019838584,0.023995647019838362,0.023995647019838584,0.023995647019838473],"type":"bar","theta":null,"z":null,"lon":null,"lat":null,"x":[0.03216146201522903,0.05615710903506753,0.08015275605490602,0.10414840307474452,0.12814405009458302,0.1521396971144215,0.17613534413426,0.2001309911540985,0.224126638173937,0.2481222851937755,0.272117932213614,0.2961135792334525,0.32010922625329097,0.34410487327312944,0.3681005202929679,0.3920961673128065,0.41609181433264497,0.44008746135248344,0.4640831083723219,0.4880787553921604,0.512074402411999,0.5360700494318374,0.5600656964516759,0.5840613434715144,0.6080569904913529,0.6320526375111915,0.6560482845310299,0.6800439315508684,0.7040395785707069,0.7280352255905453,0.7520308726103839,0.7760265196302224,0.8000221666500609,0.8240178136698993,0.8480134606897378,0.8720091077095764,0.8960047547294149,0.9200004017492533,0.9439960487690918,0.9679916957889303],"text":null},{"r":null,"name":"","fill":null,"mode":"markers","width":null,"type":"scatter","theta":null,"z":null,"lon":null,"lat":null,"text":null}], {"width":500,"height":400,"margin":{"t":25},"automargin":false,"plot_bgcolor":"rgb(235,235,235)","xaxis":{"gridcolor":"rgb(255,255,255)","title":"event-value","showgrid":true},"yaxis":{"gridcolor":"rgb(255,255,255)","title":"count","showgrid":true},"title":null}, {});</script></div>
<div class="sourceClojure">
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb19-1">(histogram (event-sample-dataset #(combined-event <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>))</span></code></pre></div>
</div>
<div style="height:auto;width:100%;"><script>Plotly.newPlot(document.currentScript.parentElement,
               [{"y":[2,1,10,20,48,107,212,334,606,953,1429,2169,3099,3979,4927,6023,7119,7877,8312,8241,8148,7570,6730,5700,4762,3623,2759,1914,1316,830,566,300,156,84,45,19,6,3,0,1],"r":null,"name":"","fill":null,"mode":null,"width":[0.016828979358653767,0.016828979358653767,0.016828979358653795,0.016828979358653767,0.016828979358653767,0.01682897935865374,0.016828979358653795,0.016828979358653795,0.016828979358653795,0.01682897935865374,0.016828979358653795,0.01682897935865374,0.016828979358653795,0.01682897935865374,0.016828979358653795,0.016828979358653795,0.01682897935865374,0.016828979358653795,0.01682897935865374,0.01682897935865374,0.016828979358653795,0.016828979358653795,0.016828979358653795,0.016828979358653795,0.016828979358653795,0.016828979358653795,0.016828979358653795,0.016828979358653573,0.016828979358653795,0.016828979358653795,0.016828979358653795,0.016828979358653795,0.016828979358653795,0.016828979358653795,0.016828979358653795,0.016828979358653795,0.016828979358653795,0.016828979358653573,0.016828979358653795,0.016828979358653906],"type":"bar","theta":null,"z":null,"lon":null,"lat":null,"x":[0.1827307010157157,0.19955968037436944,0.21638865973302324,0.23321763909167703,0.25004661845033077,0.2668755978089845,0.2837045771676383,0.3005335565262921,0.3173625358849459,0.3341915152435997,0.35102049460225343,0.36784947396090717,0.38467845331956096,0.40150743267821476,0.4183364120368685,0.4351653913955223,0.45199437075417603,0.46882335011282983,0.4856523294714836,0.5024813088301373,0.5193102881887911,0.5361392675474449,0.5529682469060987,0.5697972262647525,0.5866262056234063,0.6034551849820601,0.6202841643407139,0.6371131436993676,0.6539421230580212,0.670771102416675,0.6876000817753288,0.7044290611339826,0.7212580404926364,0.7380870198512902,0.754915999209944,0.7717449785685978,0.7885739579272516,0.8054029372859053,0.822231916644559,0.8390608960032129],"text":null},{"r":null,"name":"","fill":null,"mode":"markers","width":null,"type":"scatter","theta":null,"z":null,"lon":null,"lat":null,"text":null}], {"width":500,"height":400,"margin":{"t":25},"automargin":false,"plot_bgcolor":"rgb(235,235,235)","xaxis":{"gridcolor":"rgb(255,255,255)","title":"event-value","showgrid":true},"yaxis":{"gridcolor":"rgb(255,255,255)","title":"count","showgrid":true},"title":null}, {});</script></div>
<p>I find these visuals surprisingly powerful because you can see the original distribution “morph” into this characteristic shape.</p>
<p>The normal distribution holds a unique place in mathematics and in the world itself: whenever you combine multiple independent and identically-distributed events, the result will converge to the normal distribution as the number of combined events increases.</p>
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/src/math/stats/central_limit_theorem_different_distributions.clj">src/math/stats/central_limit_theorem_different_distributions.clj</a></small></small></pre></div>



 ]]></description>
  <guid>https://clojurecivitas.github.io/math/stats/central_limit_theorem_different_distributions.html</guid>
  <pubDate>Fri, 27 Jun 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Convergence of Random Events</title>
  <dc:creator>Sam Umbach</dc:creator>
  <dc:creator>Timothy Pratley</dc:creator>
  <link>https://clojurecivitas.github.io/math/stats/central_limit_theorem_convergence.html</link>
  <description><![CDATA[ 





<style></style>
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="central_limit_theorem_convergence_files/md-default0.js" type="text/javascript"></script>
<script src="central_limit_theorem_convergence_files/md-default1.js" type="text/javascript"></script>
<p>Life is full of random events.</p>
<p>We learn that multiple coin flips are “independent events” – no matter whether the past flip was heads or tails, the next flip is 50/50. (So why do they show the last few results at the routlette table? Hint: Don’t play routlette.) We learn that about half of babies are male and half female, so chances are 50/50 that your new little sibling will be a boy or a girl.</p>
<p>I found the answer to “Of my 8 children, what are the chances that 4 are girls and 4 are boys?” counterintuitive. The central limit theorem is crucial to intuition around this question.</p>
<p>When I initially encountered the Monte Hall problem, the correct answer wasn’t obvious or intuitive, but the mathemetical explanation is surprisingly understandable. We’ll try here to make the central limit theorem more understandable as well.</p>
<p>Start with a single random event – value drawn from [0.0, 1.0)</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb1-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rand</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb2-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7173767870755758</span></span></code></pre></div>
</div>
<p>One way to combine random events is to take the average:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb3-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> avg </span>[nums]</span>
<span id="cb3-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">/</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reduce</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">+</span> nums) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">count</span> nums)))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb4-1">(avg [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb5-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span></code></pre></div>
</div>
<p>Let’s try taking the average of several events together:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb6-1">(avg [(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rand</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rand</span>)])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb7-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.26136583874809594</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb8-1">(avg [(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rand</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rand</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rand</span>)])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb9-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6041811806726243</span></span></code></pre></div>
</div>
<p>This is getting repetitive. We can make the computer repeat for us:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb10-1">(avg (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeatedly</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rand</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb11-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3411601821927417</span></span></code></pre></div>
</div>
<p>The more events that you average, the closer the result comes to 0.5:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb12-1">(avg (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeatedly</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rand</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb13-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.45354054524852655</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb14-1">(avg (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeatedly</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rand</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb15-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.47722020064351983</span></span></code></pre></div>
</div>
<p>Let’s try taking several events together:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb16-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> event </span>[]</span>
<span id="cb16-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rand</span>))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb17-1">(event)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb18-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7133043981747822</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb19-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> combined-event </span>[number-of-events]</span>
<span id="cb19-2">  (avg (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeatedly</span> number-of-events event)))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb20-1">(combined-event <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb21-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6143011788467995</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb22-1">(combined-event <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb23-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.33528188036559736</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb24-1">(combined-event <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb25-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.435908138200442</span></span></code></pre></div>
</div>
<p>Let’s look at a series of multiple of these combined event</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb26-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeatedly</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> #(combined-event <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb27-1">(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4019541514044179</span></span>
<span id="cb27-2"> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3038719307107345</span></span>
<span id="cb27-3"> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8484556377340566</span></span>
<span id="cb27-4"> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.41097725642082233</span></span>
<span id="cb27-5"> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6058573789116752</span>)</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb28-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeatedly</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> #(combined-event <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb29-1">(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4884666696079959</span></span>
<span id="cb29-2"> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4724747832195578</span></span>
<span id="cb29-3"> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.385783298705694</span></span>
<span id="cb29-4"> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6289962971420195</span></span>
<span id="cb29-5"> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4962863849008876</span>)</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb30-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeatedly</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> #(combined-event <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb31-1">(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5828705154366562</span></span>
<span id="cb31-2"> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.426771839808932</span></span>
<span id="cb31-3"> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.756937838679179</span></span>
<span id="cb31-4"> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.663563738300766</span></span>
<span id="cb31-5"> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.31692714491487023</span>)</span></code></pre></div>
</div>
<p>As we combine a larger number of events, the values cluster more closely to the middle of the original distribution.</p>
<p>And regardless of the shape of the original event distribution, the result of combining more and more events will approach the normal distribution – it’s a unique function toward which these combinations always converge.</p>
<p>This is true for both continuous variables (like <code>(rand)</code>) or discrete variables (like dice <code>(rand-nth [1 2 3 4 5 6])</code>), and it’s true even for oddly shaped distributions. When you combine enough of them, they take on the character of the bell-shaped curve.</p>
<p>Learn More at <a href="https://www.youtube.com/watch?v=zeJD6dqJ5lo">3Blue1Brown - But what is the Central Limit Theorem?</a></p>
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/src/math/stats/central_limit_theorem_convergence.clj">src/math/stats/central_limit_theorem_convergence.clj</a></small></small></pre></div>



 ]]></description>
  <guid>https://clojurecivitas.github.io/math/stats/central_limit_theorem_convergence.html</guid>
  <pubDate>Wed, 25 Jun 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Transforming Datasets to Stack Charts</title>
  <dc:creator>Harold </dc:creator>
  <link>https://clojurecivitas.github.io/scicloj/tableplot/ideas/stacking.html</link>
  <description><![CDATA[ 





<style></style>
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="stacking_files/md-default0.js" type="text/javascript"></script>
<script src="stacking_files/md-default1.js" type="text/javascript"></script>
<script src="stacking_files/plotly2.js" type="text/javascript"></script>
<p>With observed data, presumably from two runs of some experiment…</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb1-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> ds0</span></span>
<span id="cb1-2">  (ds/-&gt;dataset <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gist.githubusercontent.com/harold/18ba174c6c34e7d1c5d8d0954b48327c/raw"</span></span>
<span id="cb1-3">                {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:file-type</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:csv</span>}))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb2-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> ds1</span></span>
<span id="cb2-2">  (ds/-&gt;dataset <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://gist.githubusercontent.com/harold/008bbcd477bf51b47548d680107a6195/raw"</span></span>
<span id="cb2-3">                {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:file-type</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:csv</span>}))</span></code></pre></div>
</div>
<p>Well, what have we got?</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb3-1">ds0</span></code></pre></div>
</div>
<div class="clay-dataset">
<p>https://gist.githubusercontent.com/harold/18ba174c6c34e7d1c5d8d0954b48327c/raw [500 1]:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th style="text-align: right;">y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">-0.09138541</td>
</tr>
<tr class="even">
<td style="text-align: right;">0.73573478</td>
</tr>
<tr class="odd">
<td style="text-align: right;">0.66637442</td>
</tr>
<tr class="even">
<td style="text-align: right;">1.42894310</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1.17985915</td>
</tr>
<tr class="even">
<td style="text-align: right;">2.10245096</td>
</tr>
<tr class="odd">
<td style="text-align: right;">2.35628501</td>
</tr>
<tr class="even">
<td style="text-align: right;">1.65951387</td>
</tr>
<tr class="odd">
<td style="text-align: right;">2.66932952</td>
</tr>
<tr class="even">
<td style="text-align: right;">1.96287689</td>
</tr>
<tr class="odd">
<td style="text-align: right;">…</td>
</tr>
<tr class="even">
<td style="text-align: right;">6.30911743</td>
</tr>
<tr class="odd">
<td style="text-align: right;">6.65394635</td>
</tr>
<tr class="even">
<td style="text-align: right;">5.88407917</td>
</tr>
<tr class="odd">
<td style="text-align: right;">6.59312352</td>
</tr>
<tr class="even">
<td style="text-align: right;">6.32078823</td>
</tr>
<tr class="odd">
<td style="text-align: right;">5.78220740</td>
</tr>
<tr class="even">
<td style="text-align: right;">6.11383638</td>
</tr>
<tr class="odd">
<td style="text-align: right;">6.62701870</td>
</tr>
<tr class="even">
<td style="text-align: right;">6.29688536</td>
</tr>
<tr class="odd">
<td style="text-align: right;">5.87255145</td>
</tr>
<tr class="even">
<td style="text-align: right;">6.34171349</td>
</tr>
</tbody>
</table>
</div>
<p>A few hundred numbers… Hm…</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb4-1">ds1</span></code></pre></div>
</div>
<div class="clay-dataset">
<p>https://gist.githubusercontent.com/harold/008bbcd477bf51b47548d680107a6195/raw [500 1]:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th style="text-align: right;">y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1.23590349</td>
</tr>
<tr class="even">
<td style="text-align: right;">0.97176804</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1.44779983</td>
</tr>
<tr class="even">
<td style="text-align: right;">2.09836076</td>
</tr>
<tr class="odd">
<td style="text-align: right;">2.39260885</td>
</tr>
<tr class="even">
<td style="text-align: right;">2.33861635</td>
</tr>
<tr class="odd">
<td style="text-align: right;">2.55252144</td>
</tr>
<tr class="even">
<td style="text-align: right;">2.75108032</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3.42274612</td>
</tr>
<tr class="even">
<td style="text-align: right;">3.13478376</td>
</tr>
<tr class="odd">
<td style="text-align: right;">…</td>
</tr>
<tr class="even">
<td style="text-align: right;">22.45761328</td>
</tr>
<tr class="odd">
<td style="text-align: right;">22.35632666</td>
</tr>
<tr class="even">
<td style="text-align: right;">21.93285307</td>
</tr>
<tr class="odd">
<td style="text-align: right;">22.24006990</td>
</tr>
<tr class="even">
<td style="text-align: right;">22.51064120</td>
</tr>
<tr class="odd">
<td style="text-align: right;">22.38858256</td>
</tr>
<tr class="even">
<td style="text-align: right;">22.53949283</td>
</tr>
<tr class="odd">
<td style="text-align: right;">22.57957379</td>
</tr>
<tr class="even">
<td style="text-align: right;">22.31971585</td>
</tr>
<tr class="odd">
<td style="text-align: right;">22.69953383</td>
</tr>
<tr class="even">
<td style="text-align: right;">22.23848485</td>
</tr>
</tbody>
</table>
</div>
<p>This neglects the hundreds of thousands of years invested in evolving a visual system…</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb5-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;</span> ds0</span>
<span id="cb5-2">    (plotly/base {:=title <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Run 0"</span>})</span>
<span id="cb5-3">    (plotly/layer-point {:=y <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>}))</span></code></pre></div>
</div>
<div style="height:auto;width:100%;"><script>Plotly.newPlot(document.currentScript.parentElement,
               [{"y":[-0.091385411,0.7357347817,0.6663744183,1.4289431,1.179859148,2.102450964,2.356285014,1.659513874,2.669329516,1.962876893,2.281320933,2.030971725,2.141806851,2.429028935,2.216699759,3.248792885,2.85915459,2.844708284,3.347163669,2.891986281,2.867806981,2.939552549,3.530527055,2.769636136,2.985509439,2.823217401,3.63149304,3.187964595,3.271761601,3.107162245,3.047525099,3.292144813,3.002385293,3.097708367,3.246215985,3.64382165,3.255837186,3.484767637,3.81569846,3.388807711,3.734923657,4.100898178,4.126134948,3.724342008,3.373228956,4.134103517,4.204602566,3.887541318,3.608231335,3.643346791,3.836617666,3.555458076,3.942211948,4.347721452,4.224846204,4.372289127,3.557516938,4.438496663,3.759143278,4.30069596,4.304466775,4.597806501,4.581932132,4.63187867,4.33820323,4.498562163,4.669056699,3.782983731,4.045015575,3.807231735,4.088620523,4.460617118,4.669192693,4.114449092,3.948954958,4.375677852,4.228203214,4.277982715,4.301740732,4.457420499,4.887012682,4.378413888,3.927439598,4.433599969,3.951603701,4.859943753,4.497573817,4.718746978,4.037272762,4.457068905,4.082025187,4.784066973,4.769034452,4.192434474,4.349406454,4.570151039,4.579471617,5.071994698,5.09469185,5.047632021,4.783628085,5.100680389,4.92067516,4.731114596,5.131047529,4.895093581,4.998457176,4.808153009,4.461820489,4.479319437,4.837047076,4.557745861,4.926508979,4.815765904,4.903294365,4.901762168,4.469075933,5.245012178,4.750751951,5.257908272,4.917454736,5.286966678,5.039702659,4.344291017,5.07815135,5.190206268,4.460464692,5.223326998,4.689280348,5.207188258,5.108224819,4.66669397,4.950692566,4.820097309,5.300029844,4.873214638,4.620361372,5.045409123,5.173200718,4.678009925,5.342951166,4.504824305,4.659315811,4.65395239,4.959500146,5.166044476,4.589043072,4.92539717,5.036407221,4.528934515,4.750483309,5.089362258,4.747420384,4.560933931,4.69731983,5.370775861,5.54408188,4.870151807,4.982952378,5.026103224,4.758093537,5.445398846,5.282926242,5.053611337,5.393322878,4.789481486,5.560350127,5.46872462,4.885679163,5.425402534,5.027629126,4.75937043,5.535845462,5.56468368,5.162722115,5.648908521,5.652861744,5.192845033,5.449265634,4.963183232,5.185810578,4.949147626,4.827288954,5.22343374,4.76636586,4.956024728,5.064878242,5.568241777,5.636722333,5.188198435,5.391030063,5.745392331,4.895431283,5.062298167,5.766067698,5.208467726,4.857926322,5.674868001,5.108376217,4.803191047,5.099029922,5.51997003,5.644845461,5.134980168,4.921490378,5.57716168,5.307292295,5.47186863,5.577605636,5.376444346,5.758267153,4.955895394,5.560248961,5.01885209,5.197031724,4.971260618,5.675118796,5.159668614,5.570128425,5.748989674,5.407793115,5.645831426,5.19084417,5.675543258,5.307176712,5.83990229,5.05800463,5.316756816,5.721186798,5.660053708,5.356917392,5.868687341,5.241031353,5.018840653,5.723915428,5.603391508,5.637191236,5.653098351,5.860835194,5.890353924,5.903225723,5.303125738,4.996896207,5.543229987,5.262778653,5.821386156,5.512832313,5.566762767,5.640670087,5.069275414,5.765756885,5.86017912,5.150716419,5.395079354,5.783127748,5.071064951,5.610929485,5.077061999,6.030309973,5.587665478,5.96100319,5.3626966,5.898617729,5.607751118,5.727503825,5.638371629,5.909348956,5.328635437,5.358938216,5.823474525,5.884209802,5.565626329,5.335881594,5.298575835,5.4936582,5.525137649,5.450604887,5.549507114,5.662079015,6.033882978,5.546148793,5.237446258,5.282335842,5.2570193,5.306550249,5.589693753,5.572127651,5.825803118,5.397934131,5.846644209,5.190710731,5.339267173,5.374441315,5.997527781,5.926929834,5.404621157,5.283471825,6.190815888,5.368134841,5.737524975,5.831479599,6.014756592,5.464442066,5.356078597,5.3045633,5.309324968,5.313932408,5.571318059,6.177355281,5.292944249,5.811761126,5.302201681,5.489218933,5.565653446,6.029786912,6.224517035,5.61852193,5.98496836,5.323210598,5.400833485,6.043761277,5.501502093,6.196847236,5.332571109,6.044573437,5.788482211,5.906037026,5.825451633,6.066170852,5.902622054,5.615834451,5.666042866,5.647504032,6.273373334,5.696997351,5.869802763,5.396455836,6.033408391,5.398430085,6.179975378,5.48463293,6.07524997,5.703118623,5.571885244,5.529826853,6.247287193,5.648227464,5.748623236,5.535974751,5.786986581,5.769911265,6.001811161,5.768458367,5.429927263,5.619527323,6.355078392,6.056836894,5.630359657,5.490317126,5.608078928,6.037617488,5.982307846,5.59225871,5.755322353,6.276425252,6.239805108,5.917673811,6.266787905,6.041941727,6.30067354,5.951306868,5.886235872,5.743239427,6.140328336,6.195976116,5.928325916,5.687647087,5.960407501,6.208528763,5.537097344,5.868038792,5.751598649,5.470716323,6.006061381,5.946447362,6.060854493,5.955738113,6.054101275,5.46516054,6.000258703,5.693584094,5.90157089,5.58696624,6.438124872,5.986940838,6.097427986,6.342970966,5.872480739,6.184307647,6.310933829,6.449423159,5.702910738,6.07810205,5.720395753,6.244231381,6.488800398,6.062917197,6.206624964,6.189374541,6.310345423,6.162726299,6.29022684,5.687159835,5.533259983,5.915712047,5.639536589,5.66629128,6.11893789,5.891531858,6.019958406,6.507969813,6.118891564,6.308212477,5.755661183,6.402753955,6.145612947,5.814500515,6.131029811,6.155667228,6.421572125,6.008377832,5.671965928,5.790046997,6.473888629,5.6735842,5.916077289,6.039886923,5.664281175,6.033371815,6.105990598,5.965932878,6.522222149,6.544349437,6.221467547,6.482550183,6.283792696,5.88315662,5.903699501,6.540387969,6.129555512,5.81484123,6.119101187,6.074123949,6.361832185,6.574196636,5.86011935,6.59508085,6.165092024,6.239947132,5.787017609,6.485263692,5.652730549,6.336553539,6.477293864,6.632374648,6.619335014,6.559543435,5.86833222,6.034620457,5.789605536,6.08765354,6.554086483,6.39963447,6.383420064,6.418704021,5.828037579,6.56359408,6.501102408,6.046008323,5.752362724,5.764621373,6.173771942,6.578253584,6.077199459,6.418813178,5.920725007,6.098170899,6.534082792,6.067753932,6.309117426,6.653946352,5.884079166,6.593123523,6.320788232,5.782207403,6.113836385,6.627018695,6.296885356,5.872551451,6.341713486],"r":null,"name":"","fill":null,"mode":"markers","width":null,"type":"scatter","theta":null,"z":null,"lon":null,"lat":null,"text":null}], {"width":500,"height":400,"margin":{"t":25},"automargin":false,"plot_bgcolor":"rgb(235,235,235)","xaxis":{"gridcolor":"rgb(255,255,255)","title":"x","showgrid":true},"yaxis":{"gridcolor":"rgb(255,255,255)","title":"y","showgrid":true},"title":"Run 0"}, {});</script></div>
<div class="sourceClojure">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb6-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;</span> ds1</span>
<span id="cb6-2">    (plotly/base {:=title <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Run 1"</span>})</span>
<span id="cb6-3">    (plotly/layer-point {:=y <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>}))</span></code></pre></div>
</div>
<div style="height:auto;width:100%;"><script>Plotly.newPlot(document.currentScript.parentElement,
               [{"y":[1.235903492,0.9717680404,1.447799826,2.098360756,2.392608847,2.338616348,2.552521436,2.751080324,3.422746121,3.134783757,3.646956674,3.736483046,3.742625698,4.207895263,4.126756518,3.680256397,4.028980935,4.194108157,4.641337617,4.715920619,4.924349303,5.171440202,4.400223137,5.121200297,4.879814785,5.143247978,4.832666143,5.621949963,5.289418223,5.373038912,5.111833212,5.470284045,5.854284174,5.337885369,5.526769149,5.897592187,6.436283586,6.526452533,6.091875573,6.20895634,6.398166843,6.428212683,6.099935198,6.609892832,6.572024523,6.838299449,6.548014036,6.837531012,6.549492657,7.036871018,7.49533298,6.805938283,6.945048706,7.492608757,7.448282703,7.769205051,7.647968207,7.487019005,7.810114789,7.95607824,7.849003649,7.459513161,8.2814631,8.236368191,7.804595919,7.932803359,7.852726117,8.142042955,7.884432217,8.593968301,8.690470177,8.484867049,8.437419743,8.478610969,8.787394678,8.887634745,8.406650354,9.233849634,8.719031505,8.777492284,9.425688403,9.12045248,9.230233635,8.777538686,9.336521259,9.755246333,9.660638994,8.976838574,9.683769196,9.591999672,9.410679949,9.259176534,9.760259381,9.792300347,9.748339501,9.727326906,10.20582556,9.447518463,10.2617393,10.27230861,9.994203464,10.0787653,10.17377676,10.50603932,9.882149349,9.963828894,10.55241099,10.60099904,10.0404168,10.11838791,10.17383111,11.06195803,10.63798481,10.69337488,10.42562162,11.0925196,10.60893771,11.14118087,11.17317401,11.01317318,10.69565591,10.7504634,10.95497534,11.13774867,11.13248327,11.05264006,11.22103795,11.62160875,11.01079565,11.16272055,11.58361699,11.05760978,11.44940221,11.33294987,11.21049545,12.01480926,12.18346944,11.869806,11.55849894,12.29009093,12.08066553,12.09321583,11.61853554,12.37432567,12.39497995,12.20142272,11.72333864,12.52238077,12.27668214,12.74576048,12.75522362,11.86023558,12.17113938,11.91665771,12.28355198,12.16265685,12.25972356,12.99551751,12.76022927,12.29133279,13.02279263,13.13668775,12.4064462,12.79605937,13.33774162,13.10955709,12.835005,12.85051869,13.26437524,12.75288266,12.7699555,13.51938357,12.81536199,13.67177535,13.44889924,13.33492862,13.56128802,13.14233909,13.4232015,13.29902303,13.87783568,13.27978064,13.50748503,13.72032528,14.00687101,13.27287704,13.5721611,13.74669615,13.87373073,13.89100798,13.72138727,14.0592909,13.7797584,13.52953051,14.15372324,13.9574872,13.67214604,13.77509416,13.66388956,13.98275053,13.6823965,13.84456459,14.31141645,14.30473437,14.02022866,14.27954449,14.25560284,14.3243574,14.11150596,14.96305018,14.13608879,14.33629565,15.07677642,14.86572347,14.66447697,14.63727245,14.26127001,14.92602806,15.28482166,15.16672466,14.54770727,15.12220019,14.85943707,14.62286905,14.61003046,15.1032938,15.34135883,15.00988732,15.09917694,14.71248042,15.30592579,14.74089475,14.99127199,15.35783471,15.03133227,15.74655132,14.97412575,15.46415641,15.54163293,15.52062108,15.79967738,15.17395037,15.65556615,15.67147921,15.98803693,16.05650599,15.62069399,15.34251295,16.13303367,15.83108818,15.35474003,15.81455691,16.32968664,16.01357223,15.66463866,15.70994901,15.92077184,15.95542489,16.06869303,16.48048867,15.842668,15.95975488,16.00837076,16.28052402,16.33992028,16.03122584,16.30365001,15.90158993,16.71346979,16.34494522,16.67946103,16.17646497,16.06925401,16.70401308,17.07065105,16.14820927,16.74189136,17.09623501,17.19903368,16.34369189,17.18242075,16.95757331,16.60846565,16.69131087,16.61957508,16.90323157,16.94252846,16.9790546,16.73082498,17.49683756,16.75427284,17.26174863,16.89243752,17.09400975,17.54861925,17.29527708,17.31705162,16.91866341,17.0753885,16.90076338,17.53278068,17.30873213,17.11457045,17.14314031,17.20961002,17.50255111,17.12532123,17.34623429,17.29686449,17.42796895,17.16631242,17.26043502,17.79978029,17.70332494,17.43743787,18.14921572,18.2937218,17.46274885,17.64151758,18.16721568,17.45134255,17.6778112,18.11952009,18.16529117,18.44099746,18.36337167,18.37395788,17.97688689,18.04397074,18.42754377,18.16249332,18.3152749,18.73359222,17.95401472,17.81742525,18.6426534,18.76107219,18.38952873,18.82660908,18.75979325,18.50089314,18.45016359,18.99749634,18.4088652,18.9228541,18.5570993,18.71836226,18.88227625,19.07837156,18.265899,18.9294226,18.48678875,18.91539835,18.46289225,18.42142436,18.72489129,18.56932998,19.06807063,18.99042698,19.2243357,18.51652572,18.60597713,18.79487412,18.77194973,18.62257909,19.28438949,18.98468872,19.28928034,19.16923102,19.15516958,19.30200664,19.22531791,19.40182602,19.52246992,18.8892973,19.63549694,19.00346996,19.01055975,18.98300239,19.16636388,19.17255553,19.6068525,19.51945669,19.2717486,19.65707966,19.55528755,19.93473731,19.24897079,20.18218478,20.19103914,19.60122156,20.10255817,20.19661332,19.67959546,19.41101515,19.81814858,19.75927345,20.15157165,19.99004627,20.36069334,19.68887087,19.90919052,19.90650353,20.5987749,19.80757022,20.22118491,20.02342815,20.4007964,20.22390666,20.71994658,19.8376547,20.34899683,20.12067684,20.568066,20.24592612,20.87369039,20.4402953,20.37097821,20.68389257,20.12282413,20.19311117,20.27825055,20.99483631,20.55089283,20.85343711,20.83811724,20.70234691,21.03644618,20.4535504,20.94818755,20.58480531,20.31886798,20.5376844,20.6798235,20.57941619,20.68280261,21.09603554,20.84450375,21.07966293,21.11254933,20.96306969,20.91756091,20.6324404,20.58894021,20.9349188,21.3379991,20.88975523,20.80766319,21.03741727,21.26266996,21.42476475,21.36068624,20.9593346,21.56890433,21.6830594,21.34138491,21.65461925,21.2717683,21.90747595,21.40917013,21.51297603,21.55043202,21.34836157,21.58085872,21.29985755,21.26271004,21.4510919,21.40372449,21.27495757,22.16765232,21.99877879,21.70911271,21.51255268,22.07313564,21.38048634,21.84569673,21.46754542,21.77872464,22.25390665,22.14789997,22.25782105,21.99364333,21.8763296,22.40770267,21.96653689,22.37551659,22.28887347,22.28699735,22.5072217,22.45761328,22.35632666,21.93285307,22.2400699,22.5106412,22.38858256,22.53949283,22.57957379,22.31971585,22.69953383,22.23848485],"r":null,"name":"","fill":null,"mode":"markers","width":null,"type":"scatter","theta":null,"z":null,"lon":null,"lat":null,"text":null}], {"width":500,"height":400,"margin":{"t":25},"automargin":false,"plot_bgcolor":"rgb(235,235,235)","xaxis":{"gridcolor":"rgb(255,255,255)","title":"x","showgrid":true},"yaxis":{"gridcolor":"rgb(255,255,255)","title":"y","showgrid":true},"title":"Run 1"}, {});</script></div>
<p>Better; however, our aim is to compare them… Which is higher?</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb7-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;</span> (ds/concat (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assoc</span> ds0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:v</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Run 0"</span>)</span>
<span id="cb7-2">               (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assoc</span> ds1 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:v</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Run 1"</span>))</span>
<span id="cb7-3">    (plotly/base {:=title <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Comparison Between Runs"</span>})</span>
<span id="cb7-4">    (plotly/layer-point {:=y <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span></span>
<span id="cb7-5">                         :=color <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:v</span>}))</span></code></pre></div>
</div>
<div style="height:auto;width:100%;"><script>Plotly.newPlot(document.currentScript.parentElement,
               [{"y":[-0.091385411,0.7357347817,0.6663744183,1.4289431,1.179859148,2.102450964,2.356285014,1.659513874,2.669329516,1.962876893,2.281320933,2.030971725,2.141806851,2.429028935,2.216699759,3.248792885,2.85915459,2.844708284,3.347163669,2.891986281,2.867806981,2.939552549,3.530527055,2.769636136,2.985509439,2.823217401,3.63149304,3.187964595,3.271761601,3.107162245,3.047525099,3.292144813,3.002385293,3.097708367,3.246215985,3.64382165,3.255837186,3.484767637,3.81569846,3.388807711,3.734923657,4.100898178,4.126134948,3.724342008,3.373228956,4.134103517,4.204602566,3.887541318,3.608231335,3.643346791,3.836617666,3.555458076,3.942211948,4.347721452,4.224846204,4.372289127,3.557516938,4.438496663,3.759143278,4.30069596,4.304466775,4.597806501,4.581932132,4.63187867,4.33820323,4.498562163,4.669056699,3.782983731,4.045015575,3.807231735,4.088620523,4.460617118,4.669192693,4.114449092,3.948954958,4.375677852,4.228203214,4.277982715,4.301740732,4.457420499,4.887012682,4.378413888,3.927439598,4.433599969,3.951603701,4.859943753,4.497573817,4.718746978,4.037272762,4.457068905,4.082025187,4.784066973,4.769034452,4.192434474,4.349406454,4.570151039,4.579471617,5.071994698,5.09469185,5.047632021,4.783628085,5.100680389,4.92067516,4.731114596,5.131047529,4.895093581,4.998457176,4.808153009,4.461820489,4.479319437,4.837047076,4.557745861,4.926508979,4.815765904,4.903294365,4.901762168,4.469075933,5.245012178,4.750751951,5.257908272,4.917454736,5.286966678,5.039702659,4.344291017,5.07815135,5.190206268,4.460464692,5.223326998,4.689280348,5.207188258,5.108224819,4.66669397,4.950692566,4.820097309,5.300029844,4.873214638,4.620361372,5.045409123,5.173200718,4.678009925,5.342951166,4.504824305,4.659315811,4.65395239,4.959500146,5.166044476,4.589043072,4.92539717,5.036407221,4.528934515,4.750483309,5.089362258,4.747420384,4.560933931,4.69731983,5.370775861,5.54408188,4.870151807,4.982952378,5.026103224,4.758093537,5.445398846,5.282926242,5.053611337,5.393322878,4.789481486,5.560350127,5.46872462,4.885679163,5.425402534,5.027629126,4.75937043,5.535845462,5.56468368,5.162722115,5.648908521,5.652861744,5.192845033,5.449265634,4.963183232,5.185810578,4.949147626,4.827288954,5.22343374,4.76636586,4.956024728,5.064878242,5.568241777,5.636722333,5.188198435,5.391030063,5.745392331,4.895431283,5.062298167,5.766067698,5.208467726,4.857926322,5.674868001,5.108376217,4.803191047,5.099029922,5.51997003,5.644845461,5.134980168,4.921490378,5.57716168,5.307292295,5.47186863,5.577605636,5.376444346,5.758267153,4.955895394,5.560248961,5.01885209,5.197031724,4.971260618,5.675118796,5.159668614,5.570128425,5.748989674,5.407793115,5.645831426,5.19084417,5.675543258,5.307176712,5.83990229,5.05800463,5.316756816,5.721186798,5.660053708,5.356917392,5.868687341,5.241031353,5.018840653,5.723915428,5.603391508,5.637191236,5.653098351,5.860835194,5.890353924,5.903225723,5.303125738,4.996896207,5.543229987,5.262778653,5.821386156,5.512832313,5.566762767,5.640670087,5.069275414,5.765756885,5.86017912,5.150716419,5.395079354,5.783127748,5.071064951,5.610929485,5.077061999,6.030309973,5.587665478,5.96100319,5.3626966,5.898617729,5.607751118,5.727503825,5.638371629,5.909348956,5.328635437,5.358938216,5.823474525,5.884209802,5.565626329,5.335881594,5.298575835,5.4936582,5.525137649,5.450604887,5.549507114,5.662079015,6.033882978,5.546148793,5.237446258,5.282335842,5.2570193,5.306550249,5.589693753,5.572127651,5.825803118,5.397934131,5.846644209,5.190710731,5.339267173,5.374441315,5.997527781,5.926929834,5.404621157,5.283471825,6.190815888,5.368134841,5.737524975,5.831479599,6.014756592,5.464442066,5.356078597,5.3045633,5.309324968,5.313932408,5.571318059,6.177355281,5.292944249,5.811761126,5.302201681,5.489218933,5.565653446,6.029786912,6.224517035,5.61852193,5.98496836,5.323210598,5.400833485,6.043761277,5.501502093,6.196847236,5.332571109,6.044573437,5.788482211,5.906037026,5.825451633,6.066170852,5.902622054,5.615834451,5.666042866,5.647504032,6.273373334,5.696997351,5.869802763,5.396455836,6.033408391,5.398430085,6.179975378,5.48463293,6.07524997,5.703118623,5.571885244,5.529826853,6.247287193,5.648227464,5.748623236,5.535974751,5.786986581,5.769911265,6.001811161,5.768458367,5.429927263,5.619527323,6.355078392,6.056836894,5.630359657,5.490317126,5.608078928,6.037617488,5.982307846,5.59225871,5.755322353,6.276425252,6.239805108,5.917673811,6.266787905,6.041941727,6.30067354,5.951306868,5.886235872,5.743239427,6.140328336,6.195976116,5.928325916,5.687647087,5.960407501,6.208528763,5.537097344,5.868038792,5.751598649,5.470716323,6.006061381,5.946447362,6.060854493,5.955738113,6.054101275,5.46516054,6.000258703,5.693584094,5.90157089,5.58696624,6.438124872,5.986940838,6.097427986,6.342970966,5.872480739,6.184307647,6.310933829,6.449423159,5.702910738,6.07810205,5.720395753,6.244231381,6.488800398,6.062917197,6.206624964,6.189374541,6.310345423,6.162726299,6.29022684,5.687159835,5.533259983,5.915712047,5.639536589,5.66629128,6.11893789,5.891531858,6.019958406,6.507969813,6.118891564,6.308212477,5.755661183,6.402753955,6.145612947,5.814500515,6.131029811,6.155667228,6.421572125,6.008377832,5.671965928,5.790046997,6.473888629,5.6735842,5.916077289,6.039886923,5.664281175,6.033371815,6.105990598,5.965932878,6.522222149,6.544349437,6.221467547,6.482550183,6.283792696,5.88315662,5.903699501,6.540387969,6.129555512,5.81484123,6.119101187,6.074123949,6.361832185,6.574196636,5.86011935,6.59508085,6.165092024,6.239947132,5.787017609,6.485263692,5.652730549,6.336553539,6.477293864,6.632374648,6.619335014,6.559543435,5.86833222,6.034620457,5.789605536,6.08765354,6.554086483,6.39963447,6.383420064,6.418704021,5.828037579,6.56359408,6.501102408,6.046008323,5.752362724,5.764621373,6.173771942,6.578253584,6.077199459,6.418813178,5.920725007,6.098170899,6.534082792,6.067753932,6.309117426,6.653946352,5.884079166,6.593123523,6.320788232,5.782207403,6.113836385,6.627018695,6.296885356,5.872551451,6.341713486],"r":null,"name":"Run 0","marker":{"color":"#1B9E77"},"fill":null,"mode":"markers","width":null,"type":"scatter","theta":null,"z":null,"lon":null,"lat":null,"text":null},{"y":[1.235903492,0.9717680404,1.447799826,2.098360756,2.392608847,2.338616348,2.552521436,2.751080324,3.422746121,3.134783757,3.646956674,3.736483046,3.742625698,4.207895263,4.126756518,3.680256397,4.028980935,4.194108157,4.641337617,4.715920619,4.924349303,5.171440202,4.400223137,5.121200297,4.879814785,5.143247978,4.832666143,5.621949963,5.289418223,5.373038912,5.111833212,5.470284045,5.854284174,5.337885369,5.526769149,5.897592187,6.436283586,6.526452533,6.091875573,6.20895634,6.398166843,6.428212683,6.099935198,6.609892832,6.572024523,6.838299449,6.548014036,6.837531012,6.549492657,7.036871018,7.49533298,6.805938283,6.945048706,7.492608757,7.448282703,7.769205051,7.647968207,7.487019005,7.810114789,7.95607824,7.849003649,7.459513161,8.2814631,8.236368191,7.804595919,7.932803359,7.852726117,8.142042955,7.884432217,8.593968301,8.690470177,8.484867049,8.437419743,8.478610969,8.787394678,8.887634745,8.406650354,9.233849634,8.719031505,8.777492284,9.425688403,9.12045248,9.230233635,8.777538686,9.336521259,9.755246333,9.660638994,8.976838574,9.683769196,9.591999672,9.410679949,9.259176534,9.760259381,9.792300347,9.748339501,9.727326906,10.20582556,9.447518463,10.2617393,10.27230861,9.994203464,10.0787653,10.17377676,10.50603932,9.882149349,9.963828894,10.55241099,10.60099904,10.0404168,10.11838791,10.17383111,11.06195803,10.63798481,10.69337488,10.42562162,11.0925196,10.60893771,11.14118087,11.17317401,11.01317318,10.69565591,10.7504634,10.95497534,11.13774867,11.13248327,11.05264006,11.22103795,11.62160875,11.01079565,11.16272055,11.58361699,11.05760978,11.44940221,11.33294987,11.21049545,12.01480926,12.18346944,11.869806,11.55849894,12.29009093,12.08066553,12.09321583,11.61853554,12.37432567,12.39497995,12.20142272,11.72333864,12.52238077,12.27668214,12.74576048,12.75522362,11.86023558,12.17113938,11.91665771,12.28355198,12.16265685,12.25972356,12.99551751,12.76022927,12.29133279,13.02279263,13.13668775,12.4064462,12.79605937,13.33774162,13.10955709,12.835005,12.85051869,13.26437524,12.75288266,12.7699555,13.51938357,12.81536199,13.67177535,13.44889924,13.33492862,13.56128802,13.14233909,13.4232015,13.29902303,13.87783568,13.27978064,13.50748503,13.72032528,14.00687101,13.27287704,13.5721611,13.74669615,13.87373073,13.89100798,13.72138727,14.0592909,13.7797584,13.52953051,14.15372324,13.9574872,13.67214604,13.77509416,13.66388956,13.98275053,13.6823965,13.84456459,14.31141645,14.30473437,14.02022866,14.27954449,14.25560284,14.3243574,14.11150596,14.96305018,14.13608879,14.33629565,15.07677642,14.86572347,14.66447697,14.63727245,14.26127001,14.92602806,15.28482166,15.16672466,14.54770727,15.12220019,14.85943707,14.62286905,14.61003046,15.1032938,15.34135883,15.00988732,15.09917694,14.71248042,15.30592579,14.74089475,14.99127199,15.35783471,15.03133227,15.74655132,14.97412575,15.46415641,15.54163293,15.52062108,15.79967738,15.17395037,15.65556615,15.67147921,15.98803693,16.05650599,15.62069399,15.34251295,16.13303367,15.83108818,15.35474003,15.81455691,16.32968664,16.01357223,15.66463866,15.70994901,15.92077184,15.95542489,16.06869303,16.48048867,15.842668,15.95975488,16.00837076,16.28052402,16.33992028,16.03122584,16.30365001,15.90158993,16.71346979,16.34494522,16.67946103,16.17646497,16.06925401,16.70401308,17.07065105,16.14820927,16.74189136,17.09623501,17.19903368,16.34369189,17.18242075,16.95757331,16.60846565,16.69131087,16.61957508,16.90323157,16.94252846,16.9790546,16.73082498,17.49683756,16.75427284,17.26174863,16.89243752,17.09400975,17.54861925,17.29527708,17.31705162,16.91866341,17.0753885,16.90076338,17.53278068,17.30873213,17.11457045,17.14314031,17.20961002,17.50255111,17.12532123,17.34623429,17.29686449,17.42796895,17.16631242,17.26043502,17.79978029,17.70332494,17.43743787,18.14921572,18.2937218,17.46274885,17.64151758,18.16721568,17.45134255,17.6778112,18.11952009,18.16529117,18.44099746,18.36337167,18.37395788,17.97688689,18.04397074,18.42754377,18.16249332,18.3152749,18.73359222,17.95401472,17.81742525,18.6426534,18.76107219,18.38952873,18.82660908,18.75979325,18.50089314,18.45016359,18.99749634,18.4088652,18.9228541,18.5570993,18.71836226,18.88227625,19.07837156,18.265899,18.9294226,18.48678875,18.91539835,18.46289225,18.42142436,18.72489129,18.56932998,19.06807063,18.99042698,19.2243357,18.51652572,18.60597713,18.79487412,18.77194973,18.62257909,19.28438949,18.98468872,19.28928034,19.16923102,19.15516958,19.30200664,19.22531791,19.40182602,19.52246992,18.8892973,19.63549694,19.00346996,19.01055975,18.98300239,19.16636388,19.17255553,19.6068525,19.51945669,19.2717486,19.65707966,19.55528755,19.93473731,19.24897079,20.18218478,20.19103914,19.60122156,20.10255817,20.19661332,19.67959546,19.41101515,19.81814858,19.75927345,20.15157165,19.99004627,20.36069334,19.68887087,19.90919052,19.90650353,20.5987749,19.80757022,20.22118491,20.02342815,20.4007964,20.22390666,20.71994658,19.8376547,20.34899683,20.12067684,20.568066,20.24592612,20.87369039,20.4402953,20.37097821,20.68389257,20.12282413,20.19311117,20.27825055,20.99483631,20.55089283,20.85343711,20.83811724,20.70234691,21.03644618,20.4535504,20.94818755,20.58480531,20.31886798,20.5376844,20.6798235,20.57941619,20.68280261,21.09603554,20.84450375,21.07966293,21.11254933,20.96306969,20.91756091,20.6324404,20.58894021,20.9349188,21.3379991,20.88975523,20.80766319,21.03741727,21.26266996,21.42476475,21.36068624,20.9593346,21.56890433,21.6830594,21.34138491,21.65461925,21.2717683,21.90747595,21.40917013,21.51297603,21.55043202,21.34836157,21.58085872,21.29985755,21.26271004,21.4510919,21.40372449,21.27495757,22.16765232,21.99877879,21.70911271,21.51255268,22.07313564,21.38048634,21.84569673,21.46754542,21.77872464,22.25390665,22.14789997,22.25782105,21.99364333,21.8763296,22.40770267,21.96653689,22.37551659,22.28887347,22.28699735,22.5072217,22.45761328,22.35632666,21.93285307,22.2400699,22.5106412,22.38858256,22.53949283,22.57957379,22.31971585,22.69953383,22.23848485],"r":null,"name":"Run 1","marker":{"color":"#D95F02"},"fill":null,"mode":"markers","width":null,"type":"scatter","theta":null,"z":null,"lon":null,"lat":null,"text":null}], {"width":500,"height":400,"margin":{"t":25},"automargin":false,"plot_bgcolor":"rgb(235,235,235)","xaxis":{"gridcolor":"rgb(255,255,255)","title":"x","showgrid":true},"yaxis":{"gridcolor":"rgb(255,255,255)","title":"y","showgrid":true},"title":"Comparison Between Runs"}, {});</script></div>
<p>Now it’s up to the viewer to decide whether they like higher numbers or not.</p>
<hr>
<p>There are a couple of interesting ideas in that last bit of code:</p>
<ol type="1">
<li><code>assoc</code> a constant onto a ds creates a constant column</li>
<li><code>:=color</code> takes care of grouping the results and the downstream display</li>
</ol>
<p>Neat.</p>
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/src/scicloj/tableplot/ideas/stacking.clj">src/scicloj/tableplot/ideas/stacking.clj</a></small></small></pre></div>



 ]]></description>
  <guid>https://clojurecivitas.github.io/scicloj/tableplot/ideas/stacking.html</guid>
  <pubDate>Tue, 24 Jun 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>More on transliteration</title>
  <dc:creator>Elango Cheran</dc:creator>
  <link>https://clojurecivitas.github.io/internationalization/transliteration2.html</link>
  <description><![CDATA[ 





<style></style>
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="transliteration2_files/md-default0.js" type="text/javascript"></script>
<script src="transliteration2_files/md-default1.js" type="text/javascript"></script>
<p>In the last post on <a href="transliteration.html">transliteration</a>, I introduced the idea of transliteration as implemented in programming, and pointed out that the process of transforming text is more general. In that regard, the implementation that works for one use case will work for another. Now, the question is what is the most efficient and appropriate implementation?</p>
<p>I talked about a prefix tree as easy for storing the sub-/strings to match on. However, in my pure Clojure implementation of a prefix tree, which is implemented using nested maps, the performance is slow. Very slow! But that’s not a reflection of Clojure, which is a language that is very practical and optimizes what it can. And the ethos of Clojure programming follows the maxim in programming, stemming <a href="https://wiki.c2.com/?MakeItWorkMakeItRightMakeItFast">from early Unix, of “make it work, make it right, make it fast”</a>. As such, we should think about how to make this fast.</p>
<p>Tim asked me why this text transformation couldn’t have been implemented in a regex, and doing so would certainly make it fast. For example, to transliterate Tamil language text in Latin script into the Tamil script, my existing implementation would look like:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb1-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> s </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vaNakkam. padippavarkaLukku n-anRi."</span>)</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb2-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> expected </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"வணக்கம். படிப்பவர்களுக்கு நன்றி."</span>)</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb3-1">(cvt/romanized-&gt;தமிழ் s)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb4-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"வணக்கம். படிப்பவர்களுக்கு நன்றி."</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb5-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> expected (cvt/romanized-&gt;தமிழ் s)))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb6-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span></span></code></pre></div>
</div>
<p>That transliteration is converting Latin script into Tamil script in a somewhat predictable and intuitive way, such that: <code>a</code> -&gt; அ, <code>aa</code> -&gt; ஆ, …, <code>k</code> -&gt; க், <code>ng</code> -&gt; ங், etc. Tim’s point is that you can detect the input substrings using the regex, and then feed the matching substring occurrences into a replacement map to get the translation. His previous pseudocode in JS looked like this:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"this is a test"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> replacementMap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'th'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'t'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replace</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/th</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">t/g</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> (match) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb7-5">                                               <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> replacementMap[match]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-6">                                               })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(result)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>He is taking into account the caveat that some of the substrings will overlap or be a superstring of other substrings, and therefore, order matters so that the right “rule” (match + replace) is triggered.</p>
<p>This should work. Let’s try it. In the “romanized-&gt;தமிழ்” function, where the word “romanized” really should be “Latin” for the name of the script, the conversions are more or less defined <a href="https://github.com/echeran/clj-thamil/blob/78bb810b2ac73cf05d027b52528ba30118e3720e/src/clj_thamil/format/convert.cljc#L25">here</a>: Let’s just reuse it!</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb8-1">cvt/romanized-தமிழ்-phoneme-map</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb9-1">{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ட்"</span>,</span>
<span id="cb9-2"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ன்"</span>,</span>
<span id="cb9-3"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ee"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ஏ"</span>,</span>
<span id="cb9-4"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ழ்"</span>,</span>
<span id="cb9-5"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ந்"</span>,</span>
<span id="cb9-6"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aa"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ஆ"</span>,</span>
<span id="cb9-7"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ii"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ஈ"</span>,</span>
<span id="cb9-8"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ச்"</span>,</span>
<span id="cb9-9"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uu"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ஊ"</span>,</span>
<span id="cb9-10"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"எ"</span>,</span>
<span id="cb9-11"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zh"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ழ்"</span>,</span>
<span id="cb9-12"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ch"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ச்"</span>,</span>
<span id="cb9-13"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"q"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ஃ"</span>,</span>
<span id="cb9-14"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ள்"</span>,</span>
<span id="cb9-15"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ப்"</span>,</span>
<span id="cb9-16"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"oo"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ஓ"</span>,</span>
<span id="cb9-17"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nth"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ந்த்"</span>,</span>
<span id="cb9-18"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"v"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"வ்"</span>,</span>
<span id="cb9-19"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mb"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ம்ப்"</span>,</span>
<span id="cb9-20"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ஏ"</span>,</span>
<span id="cb9-21"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ற்"</span>,</span>
<span id="cb9-22"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"அ"</span>,</span>
<span id="cb9-23"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ட்"</span>,</span>
<span id="cb9-24"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ai"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ஐ"</span>,</span>
<span id="cb9-25"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ஊ"</span>,</span>
<span id="cb9-26"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ng"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ங்"</span>,</span>
<span id="cb9-27"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"O"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ஓ"</span>,</span>
<span id="cb9-28"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"i"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"இ"</span>,</span>
<span id="cb9-29"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"க்"</span>,</span>
<span id="cb9-30"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ப்"</span>,</span>
<span id="cb9-31"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ர்"</span>,</span>
<span id="cb9-32"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ய்"</span>,</span>
<span id="cb9-33"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"g"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"க்"</span>,</span>
<span id="cb9-34"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ல்"</span>,</span>
<span id="cb9-35"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ண்"</span>,</span>
<span id="cb9-36"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"உ"</span>,</span>
<span id="cb9-37"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ஆ"</span>,</span>
<span id="cb9-38"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ஈ"</span>,</span>
<span id="cb9-39"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ம்"</span>,</span>
<span id="cb9-40"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"th"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"த்"</span>,</span>
<span id="cb9-41"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nj"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ஞ்"</span>,</span>
<span id="cb9-42"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ஒ"</span>,</span>
<span id="cb9-43"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"au"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ஔ"</span>,</span>
<span id="cb9-44"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nr"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ன்ற்"</span>,</span>
<span id="cb9-45"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nd"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ண்ட்"</span>,</span>
<span id="cb9-46"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n-"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ந்"</span>}</span></code></pre></div>
</div>
<p>Now to handle the caveat. As you can see, <code>"t"</code> is a substring of <code>"th"</code>, and both are keys in the map. We effectively have to do a topological sort or some other graph traversal based on which keys are substrings of which other ones. In this particular case, a shortcut that is a huge hack (because it cannot possibly be generalizable) would be to sort the match strings in order of longest to shortest en route to constructing our regex string:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb10-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;&gt;</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">keys</span> cvt/romanized-தமிழ்-phoneme-map)</span>
<span id="cb10-2">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sort-by</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">count</span>)</span>
<span id="cb10-3">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reverse</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb11-1">(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nth"</span></span>
<span id="cb11-2"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n-"</span></span>
<span id="cb11-3"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nd"</span></span>
<span id="cb11-4"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nr"</span></span>
<span id="cb11-5"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"au"</span></span>
<span id="cb11-6"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nj"</span></span>
<span id="cb11-7"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"th"</span></span>
<span id="cb11-8"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ng"</span></span>
<span id="cb11-9"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ai"</span></span>
<span id="cb11-10"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mb"</span></span>
<span id="cb11-11"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"oo"</span></span>
<span id="cb11-12"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ch"</span></span>
<span id="cb11-13"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zh"</span></span>
<span id="cb11-14"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uu"</span></span>
<span id="cb11-15"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ii"</span></span>
<span id="cb11-16"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aa"</span></span>
<span id="cb11-17"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ee"</span></span>
<span id="cb11-18"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span></span>
<span id="cb11-19"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m"</span></span>
<span id="cb11-20"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I"</span></span>
<span id="cb11-21"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span></span>
<span id="cb11-22"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u"</span></span>
<span id="cb11-23"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N"</span></span>
<span id="cb11-24"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l"</span></span>
<span id="cb11-25"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"g"</span></span>
<span id="cb11-26"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span></span>
<span id="cb11-27"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span></span>
<span id="cb11-28"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span></span>
<span id="cb11-29"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span></span>
<span id="cb11-30"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"i"</span></span>
<span id="cb11-31"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"O"</span></span>
<span id="cb11-32"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U"</span></span>
<span id="cb11-33"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span></span>
<span id="cb11-34"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span></span>
<span id="cb11-35"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R"</span></span>
<span id="cb11-36"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E"</span></span>
<span id="cb11-37"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"v"</span></span>
<span id="cb11-38"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p"</span></span>
<span id="cb11-39"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L"</span></span>
<span id="cb11-40"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"q"</span></span>
<span id="cb11-41"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span></span>
<span id="cb11-42"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s"</span></span>
<span id="cb11-43"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span></span>
<span id="cb11-44"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z"</span></span>
<span id="cb11-45"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span></span>
<span id="cb11-46"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>)</span></code></pre></div>
</div>
<p>Our regex string will end up looking like:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb12-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;&gt;</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">keys</span> cvt/romanized-தமிழ்-phoneme-map)</span>
<span id="cb12-2">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sort-by</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">count</span>)</span>
<span id="cb12-3">     <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reverse</span></span>
<span id="cb12-4">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">interpose</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\|</span>)</span>
<span id="cb12-5">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">apply</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb13-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nth|n-|nd|nr|au|nj|th|ng|ai|mb|oo|ch|zh|uu|ii|aa|ee|o|m|I|A|u|N|l|g|y|r|b|k|i|O|U|t|a|R|E|v|p|L|q|e|s|w|z|n|d"</span></span></code></pre></div>
</div>
<p>Our regex would be formed by feeding it to <code>re-pattern</code>:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb14-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> regex </span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">re-pattern</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;&gt;</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">keys</span> cvt/romanized-தமிழ்-phoneme-map)</span>
<span id="cb14-2">                            (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sort-by</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">count</span>)</span>
<span id="cb14-3">                            <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reverse</span></span>
<span id="cb14-4">                            (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">interpose</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\|</span>)</span>
<span id="cb14-5">                            (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">apply</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span>))))</span></code></pre></div>
</div>
<p>We can do segmentation on the input string based on the transliteration/transformation substring match keys:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb15-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">re-seq</span> regex s)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb16-1">(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"v"</span></span>
<span id="cb16-2"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span></span>
<span id="cb16-3"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N"</span></span>
<span id="cb16-4"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span></span>
<span id="cb16-5"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span></span>
<span id="cb16-6"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span></span>
<span id="cb16-7"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span></span>
<span id="cb16-8"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m"</span></span>
<span id="cb16-9"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p"</span></span>
<span id="cb16-10"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span></span>
<span id="cb16-11"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span></span>
<span id="cb16-12"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"i"</span></span>
<span id="cb16-13"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p"</span></span>
<span id="cb16-14"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p"</span></span>
<span id="cb16-15"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span></span>
<span id="cb16-16"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"v"</span></span>
<span id="cb16-17"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span></span>
<span id="cb16-18"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span></span>
<span id="cb16-19"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span></span>
<span id="cb16-20"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span></span>
<span id="cb16-21"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"L"</span></span>
<span id="cb16-22"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u"</span></span>
<span id="cb16-23"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span></span>
<span id="cb16-24"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span></span>
<span id="cb16-25"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u"</span></span>
<span id="cb16-26"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n-"</span></span>
<span id="cb16-27"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span></span>
<span id="cb16-28"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span></span>
<span id="cb16-29"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R"</span></span>
<span id="cb16-30"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"i"</span>)</span></code></pre></div>
</div>
<p>We can’t naively just transform the strings that match, however. Ex: you would lose the whitespace and punctuation in this example.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb17-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;&gt;</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">re-seq</span> regex s)</span>
<span id="cb17-2">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> cvt/romanized-தமிழ்-phoneme-map)</span>
<span id="cb17-3">     fmt/phonemes-&gt;str)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb18-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"வணக்கம்படிப்பவர்களுக்குநன்றி"</span></span></code></pre></div>
</div>
<p>So we need to adjust our regex to be smart enough to have a “default branch” that matches the next character if nothing else matches. We do this by appending the match all shortcut <code>.</code> to the end of the giant pattern alternation:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb19-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> regex </span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">re-pattern</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;&gt;</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">keys</span> cvt/romanized-தமிழ்-phoneme-map)</span>
<span id="cb19-2">                                 (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sort-by</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">count</span>)</span>
<span id="cb19-3">                                 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reverse</span></span>
<span id="cb19-4">                                 (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">interpose</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\|</span>)</span>
<span id="cb19-5">                                 (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">apply</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span>))</span>
<span id="cb19-6">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"|."</span>)))</span></code></pre></div>
</div>
<p>Now, we get non-matching characters in the output</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb20-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;&gt;</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">re-seq</span> regex s)</span>
<span id="cb20-2">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> #(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> (cvt/romanized-தமிழ்-phoneme-map <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%</span>) <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%</span>))</span>
<span id="cb20-3">     fmt/phonemes-&gt;str)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb21-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"வணக்கம். படிப்பவர்களுக்கு நன்றி."</span></span></code></pre></div>
</div>
<p>And for that matter, since the <code>.</code> regex alternation pattern matches a single character anyways, and you’re always doing a lookup on what is returned by the regex, we can remove any 1-character length strings from the regex pattern without change in functionality:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb22-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> regex </span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">re-pattern</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;&gt;</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">keys</span> cvt/romanized-தமிழ்-phoneme-map)</span>
<span id="cb22-2">                                 (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sort-by</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">count</span>)</span>
<span id="cb22-3">                                 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reverse</span></span>
<span id="cb22-4">                                 (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">remove</span> #(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">count</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%</span>)))</span>
<span id="cb22-5">                                 (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">interpose</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\|</span>)</span>
<span id="cb22-6">                                 (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">apply</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span>))</span>
<span id="cb22-7">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"|."</span>)))</span></code></pre></div>
</div>
<p>Check that the output is the same:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb23-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;&gt;</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">re-seq</span> regex s)</span>
<span id="cb23-2">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> #(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> (cvt/romanized-தமிழ்-phoneme-map <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%</span>) <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%</span>))</span>
<span id="cb23-3">     fmt/phonemes-&gt;str)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb24-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"வணக்கம். படிப்பவர்களுக்கு நன்றி."</span></span></code></pre></div>
</div>
<p>Let’s see that the new regex is faster than the slightly older regex, and that they are indeed faster than the unoptimized pure Clojure prefix tree implementation.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb25-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> regex1 </span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">re-pattern</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;&gt;</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">keys</span> cvt/romanized-தமிழ்-phoneme-map)</span>
<span id="cb25-2">                                 (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sort-by</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">count</span>)</span>
<span id="cb25-3">                                 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reverse</span></span>
<span id="cb25-4">                                 (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">interpose</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\|</span>)</span>
<span id="cb25-5">                                 (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">apply</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span>))</span>
<span id="cb25-6">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"|."</span>)))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb26-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> regex2 </span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">re-pattern</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;&gt;</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">keys</span> cvt/romanized-தமிழ்-phoneme-map)</span>
<span id="cb26-2">                                 (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sort-by</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">count</span>)</span>
<span id="cb26-3">                                 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reverse</span></span>
<span id="cb26-4">                                 (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">remove</span> #(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">count</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%</span>)))</span>
<span id="cb26-5">                                 (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">interpose</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\|</span>)</span>
<span id="cb26-6">                                 (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">apply</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span>))</span>
<span id="cb26-7">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"|."</span>)))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb27-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> NUM-REPS </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb28-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">time</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">dotimes</span> [_ NUM-REPS]</span>
<span id="cb28-2">        (cvt/romanized-&gt;தமிழ் s)))</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>"Elapsed time: 295.317435 msecs"
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb30-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb31-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">time</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">dotimes</span> [_ NUM-REPS]</span>
<span id="cb31-2">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;&gt;</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">re-seq</span> regex1 s)</span>
<span id="cb31-3">             (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> #(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> (cvt/romanized-தமிழ்-phoneme-map <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%</span>) <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%</span>))</span>
<span id="cb31-4">             fmt/phonemes-&gt;str)))</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>"Elapsed time: 149.366642 msecs"
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb33-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb34-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">time</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">dotimes</span> [_ NUM-REPS]</span>
<span id="cb34-2">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;&gt;</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">re-seq</span> regex2 s)</span>
<span id="cb34-3">             (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> #(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> (cvt/romanized-தமிழ்-phoneme-map <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%</span>) <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%</span>))</span>
<span id="cb34-4">             fmt/phonemes-&gt;str)))</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>"Elapsed time: 117.383101 msecs"
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb36-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span></span></code></pre></div>
</div>
<p>Well, this is surprising. I assumed that the regex implementation would be significantly faster. Let’s try to investigate.</p>
<p>Maybe the difference is less than we thought because <code>fmt/phonemes-&gt;str</code> is suspiciously inefficient (and also based on the prefix tree code). So what if we strike that out from the above expressions that were timed?</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb37-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">time</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">dotimes</span> [_ NUM-REPS]</span>
<span id="cb37-2">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;&gt;</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">re-seq</span> regex2 s)</span>
<span id="cb37-3">             (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> #(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> (cvt/romanized-தமிழ்-phoneme-map <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%</span>) <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%</span>))</span>
<span id="cb37-4">             str/join)))</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>"Elapsed time: 1.92652 msecs"
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb39-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span></span></code></pre></div>
</div>
<p>So <code>fmt/phonemes-&gt;str</code> is the culprit. And the implementation of it uses prefix tree code, which is ripe for optimization, perhaps similar to what we just proved here?</p>
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/src/internationalization/transliteration2.clj">src/internationalization/transliteration2.clj</a></small></small></pre></div>



 ]]></description>
  <guid>https://clojurecivitas.github.io/internationalization/transliteration2.html</guid>
  <pubDate>Sun, 22 Jun 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Five Pirates Treasure Splitting</title>
  <dc:creator>Timothy Pratley</dc:creator>
  <link>https://clojurecivitas.github.io/math/stats/quantquestions/what_are_the_odds/five_pirates_treasure.html</link>
  <description><![CDATA[ 





<style></style>
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="five_pirates_treasure_files/md-default0.js" type="text/javascript"></script>
<script src="five_pirates_treasure_files/md-default1.js" type="text/javascript"></script>
<p>Welcome back code champs, number ninjas, and data divers to the second episode of “What are the Odds?” where we answer life’s important questions.</p>
<iframe allowfullscreen="allowfullscreen" src="https://www.youtube.com/embed/lceazLPcSZg" width="100%"></iframe>
<p>I was out treasure hunting with four friends the other day, and we found 100 gold coins. To split the booty, I came up with a genius plan. We take turns proposing how to divide the gold, and if half the crew agrees, we go with it. But if not I get nothing and the next person makes a proposal and so on. To my surprise, the others loved the idea! “A democracy of pirates!” said one. “A fair and logical system!” said another. Even our parrot nodded in approval. Can you guess how many coins I walked away with?</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb1-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> pirates</span></span>
<span id="cb1-2">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Green Boots"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Red Rackham"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Blue Thunder"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Black Beard"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tim"</span>])</span></code></pre></div>
</div>
<p>With only one pirate, they get all the booty</p>
<ul>
<li>Green Boots: 100</li>
</ul>
<p>With 2 pirates, whoever proposes the split gets all the booty</p>
<ul>
<li>Red Rackham 100</li>
<li>Green Boots 0</li>
</ul>
<p>With 3 pirates, the pirate who would miss out in the next round is incentivised by 1 coin</p>
<ul>
<li>Blue Thunder 99</li>
<li>Red Rackham 0</li>
<li>Green Boots 1</li>
</ul>
<p>With 4 pirates, 1 vote needed, the pirate who would miss out is incentivised by 1 coin</p>
<ul>
<li>Black Beard 99</li>
<li>Blue Thunder 0</li>
<li>Red Rackham 1</li>
<li>Green Boots 0</li>
</ul>
<p>With 5 pirates, 2 votes needed, the 2 pirates who would miss out in the next round get a coin each</p>
<ul>
<li>Tim 98</li>
<li>Black Beard 0</li>
<li>Blue Thunder 1</li>
<li>Red Rackham 0</li>
<li>Green Boots 1</li>
</ul>
<p>Probably you can spot a pattern emerging here…</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb2-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> split </span>[coins pirates]</span>
<span id="cb2-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [n (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">count</span> pirates)]</span>
<span id="cb2-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">mapv</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vector</span></span>
<span id="cb2-4">              (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reverse</span> pirates)</span>
<span id="cb2-5">              (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">cycle</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">odd?</span> n) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])))</span>
<span id="cb2-6">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assoc-in</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span> coins (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">/</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">odd?</span> n) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">dec</span> n) n) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb3-1">(split <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> pirates)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb4-1">[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tim"</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">98</span>]</span>
<span id="cb4-2"> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Black Beard"</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-3"> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Blue Thunder"</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb4-4"> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Red Rackham"</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-5"> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Green Boots"</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb5-1">^<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:kind/table</span></span>
<span id="cb5-2">(split <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> pirates)</span></code></pre></div>
</div>
<div class="clay-table">
<div class="table-responsive">
<table class="table table-hover clay-table caption-top" data-quarto-postprocess="true">
<tbody>
<tr class="odd">
<td>Tim</td>
<td>98</td>
</tr>
<tr class="even">
<td>Black Beard</td>
<td>0</td>
</tr>
<tr class="odd">
<td>Blue Thunder</td>
<td>1</td>
</tr>
<tr class="even">
<td>Red Rackham</td>
<td>0</td>
</tr>
<tr class="odd">
<td>Green Boots</td>
<td>1</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://clojurecivitas.github.io/math/stats/quantquestions/what_are_the_odds/five_pirates_treasure.jpg" class="img-fluid figure-img"></p>
<figcaption>Scallywag Pirate</figcaption>
</figure>
</div>
<p>Well, it got me thinking, what if sharing your ideas was as easy as tricking treasure hunters? No sword fights. No mutiny. Just a fork, some code, a few comments, and a pull request. Let’s try it out. First I fork ClojureCivitas, Open the project, add a namespace, write some code, add some comments. Commit. Push. Pull request. Once it is merged, it is automatically published to the website. Doesn’t that look nice? I can even track how many people are reading my idea in these <a href="https://clojurecivitas.goatcounter.com/">public analytics</a>. If I want a quick preview, I use Clay to render the code and results to HTML. I hope you have an idea to share with me, Why not start a namespace and publish it this way?</p>
<p>Until next time, may your treasure split be fair and your adventures interesting.</p>
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/src/math/stats/quantquestions/what_are_the_odds/five_pirates_treasure.clj">src/math/stats/quantquestions/what_are_the_odds/five_pirates_treasure.clj</a></small></small></pre></div>



 ]]></description>
  <guid>https://clojurecivitas.github.io/math/stats/quantquestions/what_are_the_odds/five_pirates_treasure.html</guid>
  <pubDate>Wed, 18 Jun 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>About Transliteration</title>
  <dc:creator>Elango Cheran</dc:creator>
  <link>https://clojurecivitas.github.io/internationalization/transliteration.html</link>
  <description><![CDATA[ 





<style></style>
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="transliteration_files/md-default0.js" type="text/javascript"></script>
<script src="transliteration_files/md-default1.js" type="text/javascript"></script>
<p>Transliteration is about systematically converting the way in which text encodes language (or information) from one writing system (or convention or format) to another.</p>
<p>We most commonly think of this for human languages, when converting the sounds spoken in a language from one writing system to another (ex: Chinese language sounds written as ideographs into English language sounds written in the Latin script).</p>
<p>The idea of transliteration can be thought of more generically for computers that need to transform text or even file formats.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb1-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> translit-map</span></span>
<span id="cb1-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This map defines a transliteration scheme for transforming text, in this case,</span></span>
<span id="cb1-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  from Latin script character sequences (of English words) into emojis.</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  We define our transformation mappings in a map. In this way, it looks a lot like an</span></span>
<span id="cb1-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  input to the Clojure `replace` function. This map will be used as an input for the prefix tree</span></span>
<span id="cb1-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  (a.k.a. trie) data struture used to convert."</span></span>
<span id="cb1-8">  {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"happy"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🙂"</span></span>
<span id="cb1-9">   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"happier"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"😀"</span></span>
<span id="cb1-10">   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"happiest"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"😄"</span>})</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb2-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> translit-trie</span></span>
<span id="cb2-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Create the prefix tree (a.k.a. trie) data structure based on our transliteration mappings</span></span>
<span id="cb2-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  map that defines our transliteration."</span></span>
<span id="cb2-4">  (fmt/make-trie translit-map))</span></code></pre></div>
</div>
<p>A prefix tree is also called a trie. A prefix tree is a way to store a collection of sequences (ex: strings) efficiently when there is a lot of overlapping prefixes among the strings.</p>
<p>A dictionary for an alphabetic language is a good example of when a prefix tree is efficient in space. Imagine all of the words in a single page of the dictionary. It could look like “cat”, “catamaran”, “catamount”, “category”, “caternary”, etc. It could instead be stored as:</p>
<pre><code>c - a - t *
           a - m
                  a - r - a - n *
                  o - u - n - t *
           e
              g - o - r - y *
              r - n - a - r - y *</code></pre>
<p>Why would we use a prefix tree? Even if the source text patterns in the replacement rules are overlapping, we could perform replacement without a tree if we order the replacement rules by the source text pattern, such that a pattern that contains another pattern is applied earlier. However, to perform this ordering in a globally scalable way would effectively require constructing a prefix tree. Furthermore, a map of rules better models the notion of rules being independent data that are not complected with other rules. Also, as the number of rules increases, there may be performance benefits in terms of lookup in a prefix tree versus attempting to apply all rules in the ruleset sequentially.</p>
<p>Let’s introspect into our prefix tree. Let’s see which input strings have a</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb4-1">(fmt/in-trie? translit-trie <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hap"</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb5-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb6-1">(fmt/in-trie? translit-trie <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"happy"</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb7-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb8-1">(fmt/in-trie? translit-trie <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"happier"</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb9-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb10-1">(fmt/in-trie? translit-trie <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"happiest"</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb11-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb12-1">(fmt/in-trie? translit-trie <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"happiest!"</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb13-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb14-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> s </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, world! Happiness is not being happiest or happier than the rest, but instead just being happy."</span>)</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb15-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> convert</span></span>
<span id="cb15-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Use our translit-trie to convert the input string into the output string"</span></span>
<span id="cb15-3">  [s]</span>
<span id="cb15-4">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;&gt;</span> (fmt/str-&gt;elems translit-trie s)</span>
<span id="cb15-5">       (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">apply</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span>)))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb16-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> converted</span></span>
<span id="cb16-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Create the converted string according to our transliteration rules."</span></span>
<span id="cb16-3">  (convert s))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb17-1">converted</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb18-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, world! Happiness is not being 😄 or 😀 than the rest, but instead just being 🙂."</span></span></code></pre></div>
</div>
<p>It’s worth noting that a prefix tree, when used to do transliteration conversions, is effectively the finite state machine (FSM) needed to parse and transform.</p>
<p>For next time: What if we implicitly did that same conversion by constructing a regular expression (regex) that can match on the input patterns. Could that be equally fast, or faster than our naive Clojure implementation? A regex might work like so:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode js code-with-copy"><code class="sourceCode javascript"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"this is a test"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> replacementMap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> { <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'th'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'t'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y'</span> }<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replace</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/th</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">t/g</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> (match) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=&gt;</span> {</span>
<span id="cb19-5">                                               <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> replacementMap[match]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-6">                                               })<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-7"></span>
<span id="cb19-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(result)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/src/internationalization/transliteration.clj">src/internationalization/transliteration.clj</a></small></small></pre></div>



 ]]></description>
  <guid>https://clojurecivitas.github.io/internationalization/transliteration.html</guid>
  <pubDate>Sun, 08 Jun 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>The Hidden Geometry of Dice</title>
  <dc:creator>Timothy Pratley</dc:creator>
  <link>https://clojurecivitas.github.io/math/stats/quantquestions/what_are_the_odds/the_hidden_geometry_of_dice.html</link>
  <description><![CDATA[ 





<style></style>
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="the_hidden_geometry_of_dice_files/md-default0.js" type="text/javascript"></script>
<script src="the_hidden_geometry_of_dice_files/md-default1.js" type="text/javascript"></script>
<p>Welcome to What Are the Odds? The show where we answer life’s important questions, like can I outsmart a six-sided die? Today we’re starting small. Two rolls of the dice and one burning question. No magic formulas, just curiosity, some patient counting, and a faint hope that math is on our side. Let’s roll.</p>
<blockquote class="blockquote">
<p><em>Pop quiz:</em> You roll a fair 6-sided die twice. Calculate the probability that the value of the first roll is strictly less than the value of the second roll.</p>
</blockquote>
<p>As I always like to say to my niece, “the secret to answering any probability question is to enumerate the outcomes and count the ones we care about.”</p>
<p><img src="https://latex.codecogs.com/png.latex?P(Interesting)%20=%20InterestingOutcomes%20/%20TotalOutcomes"></p>
<p>Rolling 1 die once has 6 outcomes: 1 2 3 4 5 6.</p>
<p>Rolling 1 die twice gives us a combination of outcomes, let’s write out a few.</p>
<pre><code>[1 1] [1 2] '... [1 6]
[2 1] [2 2] '...</code></pre>
<p>Following this pattern would produce 6 rows of 6 columns, so there must be <code>36</code> outcomes. We write down just enough of the pattern to figure out the best way to count it. Now we count how many of those meet the criteria.</p>
<pre><code>[1 1 :no] [1 2 :yes] '...
[2 1 :no] [2 2 :no] [2 3 :yes] '...</code></pre>
<p>Logically we should see 5 yeses on the first row, then 4, 3, 2, 1, and 0, which we can ignore. Add them all up and we get <code>15</code>.</p>
<p>So the answer to the question is <code>15/36</code> which reduces to <code>5/12</code>, dividing top and bottom by the greatest common divisor 3.</p>
<p>You might be thinking that it’s not practical to enumerate everything all the time, I should use the formulas of probability. That’s true, those are marvelous. However, in my experience it is also easy to go wrong reasoning from formulas. It’s harder to go wrong starting with a counting problem, then improving your method of counting. You end up in the same place, but more confident in the answer.</p>
<p>The full enumeration of our simple 2 roll question as a counting problem is just big enough to be too tedious to use only counting.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb3-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [roll [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]]</span>
<span id="cb3-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> [i roll]</span>
<span id="cb3-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> [j roll]</span>
<span id="cb3-4">      [i j])))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb4-1">(([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>])</span>
<span id="cb4-2"> ([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>])</span>
<span id="cb4-3"> ([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>])</span>
<span id="cb4-4"> ([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>])</span>
<span id="cb4-5"> ([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>])</span>
<span id="cb4-6"> ([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]))</span></code></pre></div>
</div>
<p>Identifying the pattern is enough to realize the answer</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb5-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb6-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span></code></pre></div>
</div>
<p>What a marvelous pattern it is! Predictable, but not flat. Smooth, but not boring. Recursive, and not obvious.</p>
<div class="printedClojure">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb7-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">36</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">66</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">91</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">136</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">153</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">171</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">190</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">210</span>]</span></code></pre></div>
</div>
<p>There’s something special about this sequence. Aren’t those numbers just… pleasing in some way?</p>
<p>This sequence is called the triangular numbers.</p>
<pre><code>            .
           . .
          . . .
         . . . .</code></pre>
<p>You can find the first 10 or so numbers in your head, and with some paper many more quite quickly.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://clojurecivitas.github.io/math/stats/quantquestions/what_are_the_odds/the_hidden_geometry_of_dice.jpg" class="img-fluid figure-img"></p>
<figcaption>So many dots</figcaption>
</figure>
</div>
<p>There is a formula for calculating the nth triangular number: <img src="https://latex.codecogs.com/png.latex?T_n%20=%201%20+%202%20+%203%20+%20%5Cdots%20+%20n%20=%20%5Cfrac%7Bn(n%20+%201)%7D%7B2%7D"></p>
<p>The 20th triangular number is <code>(20x21)/2 = (400+20)/2 = 210</code>. Isn’t it wonderful how there’s so many different ways to find the same answer in math?</p>
<p>There is something curious about the formula; it divides by 2 but only produces integers. How can we be certain we will only ever get an integer? So mysterious. <code>n(n+1)</code> is always even! Let’s think about that a bit more, if n is odd, then n+1 is even. If n is even, then n+1 is odd. One of the multiples is always even, meaning that 2 is a factor, so the multiple must always have a factor 2, and be even.</p>
<p>It’s easy now to imagine if we had a 1000 sided dice what the answer would be. But be careful! For a 1000 side die, we want the 999nth triangular number: <img src="https://latex.codecogs.com/png.latex?(999%20%5Ctimes%201000)/2%20=%20(1000000-1000)/2%20=%20500000-500%20=%20499500"> and the total outcomes would be <code>1000x1000</code>, so the answer would be <code>0.4995</code>. It’s comforting to see that for a large range, we land closer to 50%.</p>
<p>The point is that once we know what we are counting, it feels more obvious that we used the right formula to count it.</p>
<p>Triangular numbers show up in many situations, my favorite is that they can be used to lay out hexagons. The <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/src/civitas/explorer/geometry.clj">code that draws Clojure Civitas hexagons</a> is based on the triangular number formula.</p>
<svg viewbox="-640 -640 1280 1280" width="100%" xmlns="http://www.w3.org/2000/svg"><g transform="translate(0.0,0.0)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-120.0,69.28203230275508)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(0.0,138.56406460551017)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(120.0,69.28203230275508)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(120.0,-69.28203230275508)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(0.0,-138.56406460551017)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-120.0,-69.28203230275508)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-120.0,69.28203230275508)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-240.0,138.56406460551017)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-120.0,207.84609690826528)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(0.0,277.12812921102034)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(120.0,207.84609690826528)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(240.0,138.56406460551017)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(240.0,0.0)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(240.0,-138.56406460551017)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(120.0,-207.84609690826528)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(0.0,-277.12812921102034)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-120.0,-207.84609690826528)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-240.0,-138.56406460551017)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-240.0,0.0)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-240.0,138.56406460551017)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-360.0,207.84609690826528)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-240.0,277.1281292110204)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-120.0,346.4101615137755)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(0.0,415.69219381653056)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(120.0,346.4101615137754)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(240.0,277.12812921102034)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(360.0,207.84609690826528)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(360.0,69.28203230275511)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(360.0,-69.28203230275507)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(360.0,-207.84609690826528)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(240.0,-277.1281292110204)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(120.0,-346.4101615137755)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(0.0,-415.69219381653056)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-120.0,-346.4101615137754)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-240.0,-277.12812921102034)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-360.0,-207.84609690826528)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-360.0,-69.28203230275511)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-360.0,69.28203230275507)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g><g transform="translate(-360.0,207.84609690826528)"><polygon fill="lightblue" points="72.0,0.0 36.0,62.35382907247958 -36.0,62.35382907247958 -72.0,0.0 -36.0,-62.35382907247958 36.0,-62.35382907247958"></polygon></g></svg>
<p>Triangular numbers also show up in the number of pairs, handshakes, edges in a complete graph, diagonals sum to triangular numbers, square numbers as sums of consecutive odd numbers, differences of triangulars, acceleration frames, smooth transitions, spacing. Such a beautiful pattern that can be found in so many situations!</p>
<p>Until next time, may your dice be fair and your outcomes interesting.</p>
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/src/math/stats/quantquestions/what_are_the_odds/the_hidden_geometry_of_dice.clj">src/math/stats/quantquestions/what_are_the_odds/the_hidden_geometry_of_dice.clj</a></small></small></pre></div>



 ]]></description>
  <guid>https://clojurecivitas.github.io/math/stats/quantquestions/what_are_the_odds/the_hidden_geometry_of_dice.html</guid>
  <pubDate>Thu, 05 Jun 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>What if… we were taught transducers first?</title>
  <dc:creator>Sean Corfield</dc:creator>
  <link>https://clojurecivitas.github.io/clojure/transducers/what_if.html</link>
  <description><![CDATA[ 





<style></style>
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="what_if_files/md-default0.js" type="text/javascript"></script>
<script src="what_if_files/md-default1.js" type="text/javascript"></script>
<p>Most Clojure tutorials start out with sequence functions like <code>map</code>, <code>filter</code> etc, and then explain how to avoid some of the problems that lazy sequences can cause. Transducers tend to be introduced later as a more advanced topic, but I’d argue that they could (and should) be taught earlier, and instead treat lazy sequences as an advanced topic.</p>
<p>What if… we were taught transducers first?</p>
<p>We’re typically taught to use <code>map</code> or <code>filter</code> on a sequence or collection to produce a new sequence – and there’s often a comment that <code>map</code> applied to a vector does not produce a vector. With transducers, one of the key concepts is that the transformation is separated from the input and also from the output.</p>
<p>Let’s start out with the <code>sequence</code> function, just to show how we can go straight to a sequence of results:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb1-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sequence</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb2-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</div>
<p><code>sequence</code> works with multiple collections, like <code>map</code>:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb3-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sequence</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">*</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb4-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb5-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sequence</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vector</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb6-1">([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span></code></pre></div>
</div>
<p>How about chaining several transformations together? We can use <code>eduction</code> (but see the caveats below about <code>eduction</code>):</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb7-1">(eduction (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">filter</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">even?</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb8-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
</div>
<p>Let’s look at producing different types of output, using <code>into</code>:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb9-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> [] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb10-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb11-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> #{} (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb12-1">#{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>}</span></code></pre></div>
</div>
<p>Under the hood, <code>into</code> uses <code>conj</code> so if you use a list, the order is reversed (because <code>conj</code> onto a list prepends items, whereas <code>conj</code> onto a vector appends items):</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb13-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> () (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb14-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>For the next level of control, we can use <code>transduce</code> to specify how to combine the results, as well as what we start with initially:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb15-1">(transduce (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">conj</span> [] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb16-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb17-1">(transduce (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">conj</span> #{} (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb18-1">#{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>}</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb19-1">(transduce (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">conj</span> () (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb20-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>We might be tempted to use <code>cons</code> here, but its argument order is different from <code>conj</code> so this will fail:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb21-1">(transduce (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">cons</span> () (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
IllegalArgumentException
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>
#error {
 :class   java.lang.IllegalArgumentException
 :message "Don't know how to create ISeq from: java.lang.Long"
 :trace
 [[RT.seqFrom                                        "RT.java" 577]
  [RT.seq                                            "RT.java" 557]
  [RT.cons                                           "RT.java" 707]
  [clojure.core/cons                                 "core.clj" 29]
  [clojure.core/map/fn/fn                            "core.clj" 2759]
  [LongRange.reduce                                  "LongRange.java" 170]
  [clojure.core/transduce                            "core.clj" 7025]
  [clojure.transducers.what-if/eval]
  [Compiler.eval                                     "Compiler.java" 7739]
  [Compiler.eval                                     "Compiler.java" 7694]
  [clojure.core/eval                                 "core.clj" 3232]
  [scicloj.clay.v2.notebook/read-eval-capture/fn/fn  "notebook.clj" 61]
  [scicloj.clay.v2.notebook/read-eval-capture/fn     "notebook.clj" 59]
  [scicloj.clay.v2.notebook/read-eval-capture        "notebook.clj" 58]
  [scicloj.clay.v2.notebook/complete                 "notebook.clj" 91]
  [scicloj.clay.v2.notebook/complete-notes/fn        "notebook.clj" 291]
  [ArrayChunk.reduce                                 "ArrayChunk.java" 65]
  [clojure.core.protocols/fn                         "protocols.clj" 135]
  [clojure.core.protocols/fn/G                       "protocols.clj" 19]
  [clojure.core.protocols/seq-reduce                 "protocols.clj" 31]
  [clojure.core.protocols/fn                         "protocols.clj" 74]
  [clojure.core.protocols/fn/G                       "protocols.clj" 13]
  [clojure.core/reduce                               "core.clj" 6965]
  [scicloj.clay.v2.notebook/complete-notes           "notebook.clj" 286]
  [scicloj.clay.v2.notebook/items-and-test-forms/fn  "notebook.clj" 397]
  [clojure.core/with-redefs-fn                       "core.clj" 7706]
  [scicloj.clay.v2.notebook/items-and-test-forms     "notebook.clj" 398]
  [scicloj.clay.v2.make/handle-single-source-spec!   "make.clj" 336]
  [clojure.core/mapv/fn                              "core.clj" 7059]
  [ArrayChunk.reduce                                 "ArrayChunk.java" 60]
  [clojure.core.protocols/fn                         "protocols.clj" 135]
  [clojure.core.protocols/fn/G                       "protocols.clj" 19]
  [clojure.core.protocols/seq-reduce                 "protocols.clj" 31]
  [clojure.core.protocols/fn                         "protocols.clj" 74]
  [clojure.core.protocols/fn/G                       "protocols.clj" 13]
  [clojure.core/reduce                               "core.clj" 6965]
  [clojure.core/mapv                                 "core.clj" 7050]
  [scicloj.clay.v2.make/make!                        "make.clj" 432]
  [scicloj.clay.v2.api/make!                         "api.clj" 35]
  [scicloj.clay.v2.main/-main                        "main.clj" 52]
  [Var.applyTo                                       "Var.java" 707]
  [clojure.core/apply                                "core.clj" 667]
  [clojure.main/main-opt                             "main.clj" 515]
  [clojure.main/main                                 "main.clj" 665]
  [Var.applyTo                                       "Var.java" 707]
  [main.main                                         "main.java" 40]]}</code></pre>
</div>
</div>
</div>
<p>Okay, well, let’s use an anonymous function to reverse the order of the arguments:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb23-1">(transduce (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) #(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">cons</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%2</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%1</span>) () (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
ArityException
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>
#error {
 :class   clojure.lang.ArityException
 :message "Wrong number of args (1) passed to: clojure.transducers.what-if/eval36820/fn--36821"
 :trace
 [[clojure.core/map/fn/fn                            "core.clj" 2757]
  [clojure.core/transduce                            "core.clj" 7027]
  [clojure.transducers.what-if/eval]
  [Compiler.eval                                     "Compiler.java" 7739]
  [Compiler.eval                                     "Compiler.java" 7694]
  [clojure.core/eval                                 "core.clj" 3232]
  [scicloj.clay.v2.notebook/read-eval-capture/fn/fn  "notebook.clj" 61]
  [scicloj.clay.v2.notebook/read-eval-capture/fn     "notebook.clj" 59]
  [scicloj.clay.v2.notebook/read-eval-capture        "notebook.clj" 58]
  [scicloj.clay.v2.notebook/complete                 "notebook.clj" 91]
  [scicloj.clay.v2.notebook/complete-notes/fn        "notebook.clj" 291]
  [ArrayChunk.reduce                                 "ArrayChunk.java" 65]
  [clojure.core.protocols/fn                         "protocols.clj" 135]
  [clojure.core.protocols/fn/G                       "protocols.clj" 19]
  [clojure.core.protocols/seq-reduce                 "protocols.clj" 31]
  [clojure.core.protocols/fn                         "protocols.clj" 74]
  [clojure.core.protocols/fn/G                       "protocols.clj" 13]
  [clojure.core/reduce                               "core.clj" 6965]
  [scicloj.clay.v2.notebook/complete-notes           "notebook.clj" 286]
  [scicloj.clay.v2.notebook/items-and-test-forms/fn  "notebook.clj" 397]
  [clojure.core/with-redefs-fn                       "core.clj" 7706]
  [scicloj.clay.v2.notebook/items-and-test-forms     "notebook.clj" 398]
  [scicloj.clay.v2.make/handle-single-source-spec!   "make.clj" 336]
  [clojure.core/mapv/fn                              "core.clj" 7059]
  [ArrayChunk.reduce                                 "ArrayChunk.java" 60]
  [clojure.core.protocols/fn                         "protocols.clj" 135]
  [clojure.core.protocols/fn/G                       "protocols.clj" 19]
  [clojure.core.protocols/seq-reduce                 "protocols.clj" 31]
  [clojure.core.protocols/fn                         "protocols.clj" 74]
  [clojure.core.protocols/fn/G                       "protocols.clj" 13]
  [clojure.core/reduce                               "core.clj" 6965]
  [clojure.core/mapv                                 "core.clj" 7050]
  [scicloj.clay.v2.make/make!                        "make.clj" 432]
  [scicloj.clay.v2.api/make!                         "api.clj" 35]
  [scicloj.clay.v2.main/-main                        "main.clj" 52]
  [Var.applyTo                                       "Var.java" 707]
  [clojure.core/apply                                "core.clj" 667]
  [clojure.main/main-opt                             "main.clj" 515]
  [clojure.main/main                                 "main.clj" 665]
  [Var.applyTo                                       "Var.java" 707]
  [main.main                                         "main.java" 40]]}</code></pre>
</div>
</div>
</div>
<p>Why is it trying to call our <code>cons</code> wrapper with a single argument? In addition to separating the transformation from the output, <code>transduce</code> also has a “completion” step, which is performed on the final result. A convenience function called <code>completing</code> can be used to wrap the function here to provide a “no-op” completion:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb25-1">(transduce (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) (completing #(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">cons</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%2</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%1</span>)) () (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb26-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p><code>completing</code> lets us provide a “completion” function (instead of the default which is <code>identity</code>) so we could reverse the result:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb27-1">(transduce (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) (completing #(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">cons</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%2</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%1</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reverse</span>) () (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb28-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</div>
<p>Instead of producing a collection result, we can also use <code>transduce</code> to compute results in other ways:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb29-1">(transduce (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb30-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb31-1">(transduce (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb32-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span></span></code></pre></div>
</div>
<p>The way <code>(transduce xf f init coll)</code> works is pretty much like this:</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb33-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [rf (xf f)]</span>
<span id="cb33-2">  (rf (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reduce</span> rf init coll)))</span></code></pre></div>
<p>Note how <code>xf</code> and <code>f</code> are combined to create a single “reducing function” (which is a 2-arity function that takes an accumulator and a value), for the <code>reduce</code> and then also applied to the result as a 1-arity function, which is what <code>completing</code> does for us in the above example.</p>
<p>Now let’s circle back to chaining transformations, while also controlling the output type. We can use <code>comp</code> for this. As a recap, here’s our <code>eduction</code> from earlier:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb34-1">(eduction (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">filter</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">even?</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb35-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
</div>
<p>We can compose multiple transducers:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb36-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">comp</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">filter</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">even?</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb37-1">#object[clojure.core$comp$fn__5897 <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x496d179</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clojure.core$comp$fn__5897@496d179"</span>]</span></code></pre></div>
</div>
<p>Let’s give this a name:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb38-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> evens+1 </span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">comp</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">filter</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">even?</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>)))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb39-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> [] evens+<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb40-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb41-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> #{} evens+<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb42-1">#{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>}</span></code></pre></div>
</div>
<p>We glossed over the result of <code>eduction</code> earlier – it produced a sequence because we printed it out, but it is a “reducible” that has captured both its input and the series of transformations to apply, so we could pass it directly to <code>into</code> or <code>transduce</code> as if it were a collection:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb43-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> [] (eduction (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">filter</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">even?</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb44-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb45-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> [] (eduction evens+<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb46-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>]</span></code></pre></div>
</div>
<p>Because it is a “reducible”, it only does work when it is consumed, so it is “lazy” in that sense, but it is not a lazy sequence. We can get a lazy sequence from a transducer using <code>sequence</code>, if we want, or we can rely on <code>into</code> and <code>transduce</code> etc being eager. In addition, <code>eduction</code> performs the transformations each time it is consumed:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb47-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [s (eduction (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> #(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">doto</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">println</span>))) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))]</span>
<span id="cb47-2">  [(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> [] s)</span>
<span id="cb47-3">   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> [] s)])</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>0
1
2
3
4
0
1
2
3
4
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb49-1">[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]]</span></code></pre></div>
</div>
<p>That will print 0 1 2 3 4 twice, because the <code>eduction</code> is consumed twice. Compare that behavior to <code>sequence</code>, which produces a lazy sequence and caches its results:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb50-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [s (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sequence</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">map</span> #(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">doto</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">%</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">println</span>))) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))]</span>
<span id="cb50-2">  [(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> [] s)</span>
<span id="cb50-3">   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">into</span> [] s)])</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>0
1
2
3
4
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb52-1">[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>] [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]]</span></code></pre></div>
</div>
<p>This will only print 0 1 2 3 4 once.</p>
<p>In conclusion, by separating the transformation from the input and the output, we gain expressive power, flexibility, and reuse: we can compose transducers, we can apply them to any input that produces values, and consume the results in any way we like.</p>
<p>For example, transducers can be used in several different ways with <code>core.async</code> channels:</p>
<ul>
<li><a href="https://clojure.github.io/core.async/clojure.core.async.html#var-chan">on a <code>chan</code>nel</a></li>
<li><a href="https://clojure.github.io/core.async/clojure.core.async.html#var-pipeline">in a <code>pipeline</code></a></li>
<li><a href="https://clojure.github.io/core.async/clojure.core.async.html#var-transduce">or consumed with <code>transduce</code></a></li>
</ul>
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/src/clojure/transducers/what_if.clj">src/clojure/transducers/what_if.clj</a></small></small></pre></div>



 ]]></description>
  <guid>https://clojurecivitas.github.io/clojure/transducers/what_if.html</guid>
  <pubDate>Sat, 31 May 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>The Hallway Track: SciNoj Light #1 Data Analysis Stories</title>
  <dc:creator>Timothy Pratley</dc:creator>
  <link>https://clojurecivitas.github.io/conferences/scinoj_light_1/notes/hallway_track.html</link>
  <description><![CDATA[ 





<p>The <a href="https://scicloj.github.io/scinoj-light-1">SciNoj Light #1</a> Conference brought together Clojure enthusiasts, data scientists, and researchers for an engaging exploration of data analysis stories. The event fostered a collaborative, informal atmosphere where participants exchanged ideas across disciplines from cognitive psychology to urban planning.</p>
<p>If you missed it, you can view the talks on the <a href="https://www.youtube.com/playlist?list=PLb_VRZPxjMAAaoAPnk8ClWET3baRV1Whv">conference sessions playlist</a>. The <a href="https://scicloj.github.io/scinoj-light-1/speakers.html">conference website</a> has detailed information about the talks and speakers. Links to the notebook code presented are on the <a href="https://scicloj.github.io/scinoj-light-1/sessions">sessions page</a>, and available as data in the <a href="https://github.com/scicloj/scinoj-light-1/blob/main/info.edn">info.edn file</a>.</p>
<p>The <a href="https://youtu.be/3HZ5rngHzWM">concluding talk on lane reductions</a> stood out as my favorite because it blended data-driven insights with relatable, human-interest storytelling. As a cyclist, I immediately connected with how lane reductions and protected bike lanes are impactful to my safety. The talk’s compelling visuals, grounded in real case studies, made the story very tangible. Heather’s personal perspective as a car-free parent added emotional weight. She illustrated how community advocacy and smart urban design saves lives, and makes more livable spaces. The mix of passion, rigor, and optimism left me inspired; data analysis can drive tangible, life-improving change.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://clojurecivitas.github.io/conferences/scinoj_light_1/notes/crashes.png" class="img-fluid figure-img"></p>
<figcaption>Bike lane improvements reduce crashes</figcaption>
</figure>
</div>
<p>A major focus of the conference was the development of Clojure’s data science <a href="https://github.com/scicloj/noj">Noj</a> toolkit. This suite of libraries demonstrated how Clojure combines functional programming elegance with practical performance. Speakers highlighted Noj’s interoperability with Python and Java ecosystems while emphasizing its advantages for reproducible and maintainable workflows. The community’s collaborative energy was evident throughout.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://clojurecivitas.github.io/conferences/scinoj_light_1/notes/noj_components.png" class="img-fluid figure-img"></p>
<figcaption>Noj core components</figcaption>
</figure>
</div>
<p>Artificial intelligence emerged as a recurring theme, with several talks exploring hybrid approaches to enhance reliability. One discussion centered on Retrieval-Augmented Generation (RAG) systems, where combining large language models with Clojure’s logic programming capabilities could improve accuracy in structured domains like government Q&amp;A. Another session delved into probabilistic programming with Inferme, illustrating Bayesian methods for modeling uncertainty. These technical deep dives were balanced by ethical considerations and reflections on technology’s societal implications.</p>
<p>Scientific applications showcased Clojure’s versatility. One talk explored simulating fluid dynamics. Another focused on forecasting tropical cyclone paths using physics-informed machine learning. Cognitive science experiments were also featured, using collaborative games and puzzles to study human planning behavior, and brain wave monitors. The conference also highlighted social impact work, such as data-driven advocacy for safer street designs, proving that technical tools can drive urban change.</p>
<p>What stood out to me was how effectively the SciCloj community uses Clojure notebooks for collaborative work. Presenters shared their research through executable notebooks that cleanly combined code, visualizations and explanations. It’s a practical pattern broadly applicable for sharing ideas and knowledge.</p>
<p>Throughout the event, a sense of optimism prevailed about Clojure’s untapped potential. While acknowledging gaps in ML tooling compared to Python, speakers demonstrated that Clojure’s functional rigor and JVM scalability make it a good fit for data science. Attendee discussions envisioned collaborating further on logic-guided AI and semantic web ontologies. There was a recurring theme of bridging the gap between academic theory and real-world engineering. SciNoj Light ultimately painted a picture of Clojure not just as a language, but as a catalyst for interdisciplinary innovation.</p>
<blockquote class="blockquote">
<p>You can have the cake of Clojure’s immutable persistent data structures and eat it too;<br>
Get your answers fast and make your customers happy.<br>
— Harold</p>
</blockquote>
<p>A big thank you to the organizers! The event was an overwhelming success with high quality presentations and valuable discussions. I’m looking forward to the next SciNoj, it’s a rare and valuable blend of science, technology, community and code.</p>
<p>Below are my notes about the sessions and conversations from the conference.</p>
<section id="pre-conference-interview" class="level3">
<h3 class="anchored" data-anchor-id="pre-conference-interview">Pre-conference interview</h3>
<p>Engaging to have a taste of what’s to come, got me really enthusiastic about the coming event. Game as a Research Tool: “Tik Tik” is a controlled environment for studying human cognition and collaboration. Combines cognitive psychology, game design, and data analysis.</p>
</section>
<section id="hello" class="level3">
<h3 class="anchored" data-anchor-id="hello">1.1: Hello</h3>
<p>Community-driven event. Informal, interactive, and welcoming. Focus on Clojure for data workflows. Tools and libraries have matured, and the conference shares these advancements. <a href="https://www.clojurians-zulip.org/">Zulip</a> is the main forum, attendees are encouraged to engage via structured topic threads. The macroexpand session invites ideas for expanding Clojure adoption in various fields. Hosts encourage questions, jokes, and relaxed participation. Sets the tone for an inclusive, engaging, and slightly nerdy gathering of Clojure enthusiasts.</p>
</section>
<section id="an-intro-to-the-noj-toolkit" class="level3">
<h3 class="anchored" data-anchor-id="an-intro-to-the-noj-toolkit">1.2: An intro to the Noj toolkit</h3>
<p>Noj is a Clojure-based data science toolkit integrating libraries for data analysis, visualization, and machine learning. Designed for functional, efficient data processing with compatibility across libraries (e.g., Tablecloth, FastMath, Metamorph). Inspired by tools like R’s dplyr/ggplot and Python’s pandas/Plotly, but with a Clojure-centric approach. Tablecloth for tabular data manipulation (similar to pandas/dplyr). TablePlot grammar-of-graphics-inspired visualization (like ggplot). FastMath stats and statistical modeling (logistic regression and more). Metamorph for machine learning workflows. Worked example of predicting success in Kickstarter projects. Data loading/cleaning, exploratory analysis (grouping, aggregation, bar plots), predictive modeling, evaluation (train/test split, accuracy checks). Functional &amp; Immutable, Noj leverages Clojure’s strengths. Efficient columnar storage with zero-copy operations.</p>
</section>
<section id="probability-and-statistics---daniel-slutsky" class="level3">
<h3 class="anchored" data-anchor-id="probability-and-statistics---daniel-slutsky">1.3: Probability and statistics - Daniel Slutsky</h3>
<p>Generating pseudo-random numbers using seeds for reproducibility in research. Simulating dice rolls to explore distributions. Used histograms and scatter plots to visualize distributions. Computed mean, standard deviation and z-scores for comparison. Bayesian inference for probabilistic models with parameters. Conditioned models on observed data to infer posterior distributions. Highlighted constraints and efficient sampling algorithms. Avoid lazy sequences for large simulations; consider dtype-next or transducers. Visualization matters, histograms and scatter plots reveal patterns. Probabilistic programming models uncertainty and updates beliefs with data. Balanced foundational stats with advanced topics, emphasizing Clojure’s tools for data science.</p>
</section>
<section id="customer-churn-analysis-llms-logic-programming---siavash-mohammady" class="level3">
<h3 class="anchored" data-anchor-id="customer-churn-analysis-llms-logic-programming---siavash-mohammady">1.4: Customer churn analysis, LLMs &amp; logic programming - Siavash Mohammady</h3>
<p>Customers leaving significantly impacts revenue. Exploring factors like course format, teacher experience, and registration patterns. High churn in early months, newer teachers correlated with higher churn. User prompt → NLP entity recognition → LLM generates high-level DSL → Clara rule engine translates to low-level DSL → Execution. Mentorship for new teachers can reduce churn. Pairing LLMs abstract reasoning with logic engines concrete execution optimizes complex data tasks. A forward-looking talk blending data science, AI, and Clojure, emphasizing doing less.</p>
</section>
<section id="linear-foundations-nonlinear-frontiers---jelena-losic" class="level3">
<h3 class="anchored" data-anchor-id="linear-foundations-nonlinear-frontiers---jelena-losic">1.5: Linear Foundations &amp; Nonlinear Frontiers - Jelena Losic</h3>
<p>Linear systems rely on superposition, the whole is the sum of parts. Vector spaces, linear regression, Fourier analysis. Real-world systems are often nonlinear. Linear methods fail when data lies on curved manifolds or exhibits complex interactions. Techniques like t-SNE, UMAP, and autoencoders handle nonlinearity by preserving structures or learning manifold geometry. Nonlinear systems can be deterministic yet unpredictable. Nonlinear methods unlock richer patterns but sacrifice interpretability and require more data. Dimensionality reduction illustrates the trade-off between simplicity and accuracy. Embeddings leverage linear algebra but rely on nonlinear transformations for deeper semantics.</p>
</section>
<section id="raggedy-anns-big-adventure---paula-gearon" class="level3">
<h3 class="anchored" data-anchor-id="raggedy-anns-big-adventure---paula-gearon">1.6: RAGgedy Ann’s Big Adventure - Paula Gearon</h3>
<p>Vectors represent concepts in multidimensional space. Embeddings convert text into vectors, capturing meaning. Similarity between vectors is measurable. Neural networks process inputs through weighted connections and activation functions. Transformers contextualize words in sentences. Combining LLMs with vector databases to reduce hallucinations. Augmenting queries with retrieved context. LLMs are built from modular math operations. Vector databases enable semantic search. RAG improves accuracy by grounding LLM outputs in verified data.</p>
</section>
<section id="parliamentary-questions---rag-evaluation---eoin-carney" class="level3">
<h3 class="anchored" data-anchor-id="parliamentary-questions---rag-evaluation---eoin-carney">1.7: Parliamentary Questions - RAG Evaluation - Eoin Carney</h3>
<p>Can RAG effectively answer parliamentary style questions using Irish government data? 10k publicly available Irish parliamentary questions and answers. Compared sentence-based chunking with full document retrieval. Tested multiple LLMs for generation and evaluation. Retrieval Matters More Than Prompting. Smaller, precise chunks of 3–5 sentences improved precision over full document retrieval. Direct answer retrieval outperformed matching questions to answers. Deterministic metrics like word overlap failed to capture nuance. LLM as judge worked better for correctness. Clay notebook visualization helped explore vector embeddings interactively. Government answers should be plain and factual. LLMs are oddly well-suited for that.</p>
</section>
<section id="discussion-rags-and-structured-knowledge" class="level3">
<h3 class="anchored" data-anchor-id="discussion-rags-and-structured-knowledge">1.8 - Discussion: RAGs and Structured Knowledge</h3>
<p>Shared experiences using Clojure for AI projects. Exploring logic programming as a superset of reasoning techniques and unifying them with embeddings and vector logic. Foundational ontologies and their role in structuring knowledge for AI, particularly in medical domains. The conversation fluidly shifted from technical to philosophical and practical.</p>
</section>
<section id="noj-deep-dive---harold-daniel-slutsky" class="level3">
<h3 class="anchored" data-anchor-id="noj-deep-dive---harold-daniel-slutsky">1.9: Noj Deep Dive - Harold &amp; Daniel Slutsky</h3>
<p>Using Clojure for functional data science, contrasting it with Python tools like Pandas. The focus is on immutability, performance, and leveraging Clojure’s strengths for data processing. Tech.ml.dataset for tabular data processing. Columnar storage for efficiency and integrates with other libraries in the ecosystem. Layered Architecture. Hamfisted high-performance, immutable collections optimized for JVM memory/CPU. Dtype-next array random access and lazy, non-caching transformations. Tablecloth high-level tabular data tools built atop these foundations. Challenges and solutions for integrating with Python via libpython-clj and stdlang. Hamfisted and Dtype-next enable Clojure to match Java/Python performance while retaining functional idioms. 20x speedup in lazy sequences. Columnar storage in TMD reduces memory overhead. Libraries like FastMath, MetamorphML, and Tableplot extend the stack. Real-world applications in consulting and open-source collaboration. Frequent shoutouts to contributors and emphasis on community input via Zulip. If you think data science needs software engineering, you’re right. A blend of technical rigor, community spirit, and practical focus on building scalable, functional data tools.</p>
</section>
<section id="brain-data-in-clojure---lorelai-lyons" class="level3">
<h3 class="anchored" data-anchor-id="brain-data-in-clojure---lorelai-lyons">1.10: Brain data in Clojure - Lorelai Lyons</h3>
<p>Ethical and Historical Context of Brain-Computer Interfaces. Morally questionable history of neuroscience. Need for ethical considerations in modern BCIs. The goal is to bridge the gap between continuous human thought and discrete computing. Neurons generate electrical signals that can be recorded and digitized. EEG measures brainwave frequencies via electrodes placed on the scalp. EEG data from a motor imagery study. Applied filters to isolate frequency bands. Developing a low-cost binary file system for efficient EEG data storage. Exploring brain-controlled interfaces for creative applications. Consumer EEG devices make brain data collection feasible for programmers. BCIs require collaboration across neuroscience, hardware, and software. Mixed technical depth with ethical reflection.</p>
</section>
<section id="d-viscous-fluid-flow-data-analysis-burgers-equation---siyoung-byun" class="level3">
<h3 class="anchored" data-anchor-id="d-viscous-fluid-flow-data-analysis-burgers-equation---siyoung-byun">2.1: 1D Viscous Fluid Flow Data Analysis, Burgers’ Equation - Siyoung Byun</h3>
<p>Fluid dynamics is complex, involving variables like friction, pressure, and momentum. CFD uses computational methods to simulate fluid behavior, crucial for fields like aerospace, healthcare, and astrophysics. Astrophysics simulations of binary star collisions use CFD. Burgers’ Equation combines nonlinear convection (steepening fluid motion) and viscosity (smoothing/diffusion). Demonstrated via simulations of a shock in a 1D fluid, visualized over time. Used mutable Java arrays for performance. Extending to 2D/3D simulations and incorporate the Navier-Stokes equations for full fluid dynamics. Visualization Matters. Plotting data is critical for interpreting simulations. Siyoung emphasizes the learning process and invites collaboration. Technical but accessible, viscosity effects are explained with analogies. Passion for both astrophysics, fluid dynamics and Clojure shines through. Simulations of white dwarf collisions brought home the realization that star interactions are fluid. Korean ondol floor heating as an analogy for convection.</p>
</section>
<section id="uk-electricity-demand-time-series-forecasting---anton-lobach" class="level3">
<h3 class="anchored" data-anchor-id="uk-electricity-demand-time-series-forecasting---anton-lobach">2.2: UK Electricity Demand Time Series Forecasting - Anton Lobach</h3>
<p>The Taylor dataset contains electricity demand in Wales/England. Extract day of week, minute of day, weekend flag. Ridge regression regularized linear regression to prevent overfitting. Use rolling origin cross-validation. Root Mean Squared Error to measure forecast accuracy. Clojure has expressive, modular workflows with strong data processing capabilities. Seasonality matters. Minute-of-day was the most predictive feature. Ridge regression achieved reasonable accuracy. Split data into train/test sets before exploratory analysis to avoid bias. Use rolling windows for temporal data. The tutorial is available as an interactive notebook.</p>
</section>
<section id="tropical-cyclone-trajectory-modelling---k-ram-narayan-naimish-mani-b" class="level3">
<h3 class="anchored" data-anchor-id="tropical-cyclone-trajectory-modelling---k-ram-narayan-naimish-mani-b">2.3: Tropical cyclone trajectory modelling - K Ram Narayan, Naimish Mani B</h3>
<p>Accurate trajectory forecasting is crucial for disaster preparedness, evacuation planning, and minimizing loss of life and property. Forecasting relies on a mix of satellite data, computer simulations, and aircraft reconnaissance. Using SINDy (Sparse Identification of Nonlinear Dynamics), to extract governing equations from cyclone trajectory data to predict future paths. Global cyclone track dataset. Satellite imagery used to compute wind velocity and shear via optical flow. Incorporates cyclone dynamics to refine SINDy’s candidate equations. Cyclone movement is driven by steering winds, Coriolis force, beta drift, and interactions with pressure systems. Collect trajectory and satellite data. Construct a candidate library of possible dynamical terms. Use Lasso regression to sparsely select the most relevant terms. Derive interpretable differential equations for forecasting. SINDy achieved a 43.71 km mean absolute error, acceptable in cyclone forecasting. Outperformed by gradient boosting, and random forest in single-step prediction but excels in full trajectory forecasting. Bay of Bengal cyclones curve unpredictably due to land effects. Bridges meteorology, physics, and machine learning for cyclone prediction.</p>
</section>
<section id="studying-planning-with-a-novel-video-game---cvetomir-dimov" class="level3">
<h3 class="anchored" data-anchor-id="studying-planning-with-a-novel-video-game---cvetomir-dimov">2.4: Studying planning with a novel video game - Cvetomir Dimov</h3>
<p>Planning is a fundamental cognitive ability used in everyday tasks. “Tik Tik” game is designed to study planning. Players control a fireball and an ice cube that must collaborate to navigate obstacles and reach targets. A custom program was developed to generate and solve game levels, identifying optimal paths and measuring problem difficulty. Goal is to understand what incentivizes planning. Difficulty influenced by the number of barriers and their intersections. Problem difficulty predictors were the minimum moves needed and the number of possible paths up to the optimal length. Study 1 high dropout rates, large individual differences in planning ability. Study 2 time limits and stricter move limits reduced dropouts and reinforced planning incentives. Tight constraints encourage planning. Problem difficulty can be systematically manipulated for cognitive research. Demonstrations of the game and solver make abstract concepts tangible. Credits multiple software tools, emphasizing a community-driven approach to research.</p>
</section>
<section id="building-a-data-science-ecosystem-in-clojure---kira-howe" class="level3">
<h3 class="anchored" data-anchor-id="building-a-data-science-ecosystem-in-clojure---kira-howe">2.5: Building a Data Science Ecosystem in Clojure - Kira Howe</h3>
<p>Inspiration from the Tidyverse (R). A cohesive ecosystem with shared design principles on data and composable tools. Standardized data structures and streamline workflows. Fragmented tools create glue code overhead. Immutable data and pure functions enable reproducibility. JVM handles large-scale data efficiently. Engineering culture emphasis on stability and interoperability. Explosive data growth demands scalable, deterministic tools. Noj as a Clojure based ecosystem inspired by Tidyverse but optimized for scalability and engineering. Simplify onboarding through Jupyter support and Clojure in a box. Need for Shiny-like tools for rapid prototyping. Emphasized grassroots community building and learning together. Data quality should be a philosophy, not an afterthought.</p>
</section>
<section id="macroexpand-1" class="level3">
<h3 class="anchored" data-anchor-id="macroexpand-1">2.6: Macroexpand-1</h3>
<p>Ways to broaden Clojure’s impact beyond its traditional domains by fostering interdisciplinary collaboration. Need to make Clojure more accessible and visible in fields like data science, education, and specialized industries. Improve tooling, documentation, and community outreach. Developer intuitive libraries, enhancing interoperability with other languages. Lowering barriers for newcomers. Importance of geospatial analysis and modern programming practices. Sustainable community efforts and cross-disciplinary knowledge sharing.</p>
</section>
<section id="the-impact-of-lane-reductions---heather-moore-farley" class="level3">
<h3 class="anchored" data-anchor-id="the-impact-of-lane-reductions---heather-moore-farley">2.7: The Impact of Lane Reductions - Heather Moore-Farley</h3>
<p>Reducing car lanes, protected bike lanes, and pedestrian crossings decrease traffic injuries and fatalities. California’s crash data used to visualize collision hotspots to push for safer street redesigns. High injury corridors 6% of streets cause 60% of severe/fatal crashes. Correlated lane reductions, protected bike lanes, and raised bus stops led to fewer crashes over time. Local groups use data to advocate for safer streets. Police reported crash data has missing ages, locations and underreporting driver fault. Heather shares her lived experience as a car-free parent in Oakland, tying data to safety. Design solutions and community action work. Advocating for upcoming redesigns. A compelling mix of data science, urbanism, and grassroots advocacy. Number crunching can drive tangible change.</p>


</section>

 ]]></description>
  <guid>https://clojurecivitas.github.io/conferences/scinoj_light_1/notes/hallway_track.html</guid>
  <pubDate>Wed, 28 May 2025 00:00:00 GMT</pubDate>
  <media:content url="https://clojurecivitas.github.io/conferences/scinoj_light_1/notes/noj_components.png" medium="image" type="image/png" height="75" width="144"/>
</item>
<item>
  <title>Factorization of Eratosthenes</title>
  <dc:creator>Tim Schafer</dc:creator>
  <link>https://clojurecivitas.github.io/math/primes/factorization/sieve_augmented.html</link>
  <description><![CDATA[ 





<style></style>
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="sieve_augmented_files/md-default0.js" type="text/javascript"></script>
<script src="sieve_augmented_files/md-default1.js" type="text/javascript"></script>
<p>Adapts the <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes">Sieve of Eratosthenes</a> to prime factorize numbers through <code>n</code>.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb1-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> prime-factors </span>[n]</span>
<span id="cb1-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reduce</span></span>
<span id="cb1-3">   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [factors prime]</span>
<span id="cb1-4">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">count</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">nth</span> factors prime)))</span>
<span id="cb1-5">       (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reduce</span></span>
<span id="cb1-6">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [factors multiple]</span>
<span id="cb1-7">          (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [[composite-divisor <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:as</span> divisors] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">nth</span> factors multiple)]</span>
<span id="cb1-8">            (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&lt;</span> prime composite-divisor)</span>
<span id="cb1-9">              (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [remaining-divisor (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">/</span> composite-divisor prime)</span>
<span id="cb1-10">                    remaining-divisors (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">nth</span> factors remaining-divisor)</span>
<span id="cb1-11">                    prime-divisors (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">cons</span> prime (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rest</span> divisors))]</span>
<span id="cb1-12">                (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assoc</span></span>
<span id="cb1-13">                 factors multiple</span>
<span id="cb1-14">                 (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">count</span> remaining-divisors))</span>
<span id="cb1-15">                   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">concat</span> remaining-divisors prime-divisors)</span>
<span id="cb1-16">                   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">cons</span> remaining-divisor prime-divisors))))</span>
<span id="cb1-17">              factors)))</span>
<span id="cb1-18">        factors</span>
<span id="cb1-19">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">*</span> prime prime) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span> n) prime))</span>
<span id="cb1-20">       factors))</span>
<span id="cb1-21">   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">mapv</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">list</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span> n)))</span>
<span id="cb1-22">   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">inc</span> (m/sqrt n)))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb2-1">(prime-factors <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb3-1">[(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-2"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-3"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-4"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb3-5"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-6"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb3-7"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-8"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb3-9"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-10"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb3-11"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-12"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)</span>
<span id="cb3-13"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-14"> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)]</span></code></pre></div>
</div>
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/src/math/primes/factorization/sieve_augmented.clj">src/math/primes/factorization/sieve_augmented.clj</a></small></small></pre></div>



 ]]></description>
  <guid>https://clojurecivitas.github.io/math/primes/factorization/sieve_augmented.html</guid>
  <pubDate>Wed, 28 May 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Clean object printing by removing extraneous</title>
  <dc:creator>Timothy Pratley</dc:creator>
  <link>https://clojurecivitas.github.io/clojure/print_object/remove_extraneous.html</link>
  <description><![CDATA[ 





<style></style>
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="remove_extraneous_files/md-default0.js" type="text/javascript"></script>
<script src="remove_extraneous_files/md-default1.js" type="text/javascript"></script>
<p>The Clojure default for printing objects is noisy. Clojure’s <code>print-method</code> for <code>Object</code> delegates to <code>clojure.core/print-object</code></p>
<div class="sourceClojure">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb1-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defmethod</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> print-method </span>Object [x ^java.io.Writer w]</span>
<span id="cb1-2">  (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">#'clojure.core/print-object</span> x w))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb2-1">#object[clojure.lang.MultiFn <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x39490f9a</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clojure.lang.MultiFn@39490f9a"</span>]</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb3-1">(Object.)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb4-1">#object[java.lang.Object <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x7de32aa1</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"java.lang.Object@7de32aa1"</span>]</span></code></pre></div>
</div>
<p>The syntax is <code>#object[CLASS-NAME HASH toString())]</code> and as you can see, the toString of an Object is <code>CLASS-NAME@HASH</code>. For most objects this becomes quite a long string.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb5-1">(async/chan)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb6-1">#object[clojure.core.async.impl.channels.ManyToManyChannel <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x3d125304</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clojure.core.async.impl.channels.ManyToManyChannel@3d125304"</span>]</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://clojurecivitas.github.io/clojure/print_object/objection.jpg" class="img-fluid figure-img"></p>
<figcaption>Objection!</figcaption>
</figure>
</div>
<p>Functions are printed as objects</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb7-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [x] x)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb8-1">#object[clojure.print_object.remove_extraneous$eval45350$fn__45351 <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x1bc67fe1</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clojure.print_object.remove_extraneous$eval45350$fn__45351@1bc67fe1"</span>]</span></code></pre></div>
</div>
<p>It’s quite easy to miss the fact that it is a function as we are looking for a tiny little <code>fn</code> in a sea of text. If, like me, you are fond of the <a href="../../code_interview/beating/with_stupid_stuff/z_combinator_gambit.html">odd lambda calculus excursion</a>, things get even more hectic.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb9-1">((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [x] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [v] ((x x) v))) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [y] y))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb10-1">#object[clojure.print_object.remove_extraneous$eval45354$fn__45355$fn__45356 <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x62835bf4</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clojure.print_object.remove_extraneous$eval45354$fn__45355$fn__45356@62835bf4"</span>]</span></code></pre></div>
</div>
<p>Yikes! what an eyesore. This is not an academic issue specific to lambda calculus. Any function created from inside a function is helpfully identifiable through the <code>fn$fn</code> nesting. We create these quite regularly, and they are often printed in stack traces. I’m sure you have seen them when you map an inline function across a seq, and there is a bug in the anonymous function.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb11-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> caesar-cipher </span>[s]</span>
<span id="cb11-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">mapv</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> add2 [x] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> x)) s))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb12-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span> (caesar-cipher <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello world"</span>)</span>
<span id="cb12-2">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">catch</span> Exception ex</span>
<span id="cb12-3">       (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vec</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">take</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> (.getStackTrace ex)))))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb13-1">[[clojure.lang.Numbers add <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Numbers.java"</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">155</span>]</span>
<span id="cb13-2"> [clojure.lang.Numbers add <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Numbers.java"</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3747</span>]</span>
<span id="cb13-3"> [clojure.print_object.remove_extraneous$caesar_cipher$add2__45362 invoke <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NO_SOURCE_FILE"</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb13-4"> [clojure.core$mapv$fn__8569 invoke <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"core.clj"</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7059</span>]]</span></code></pre></div>
</div>
<p>See that part <code>caesar_cipher$add2</code>? That is <strong>very</strong> useful information. It tells us that the exception was inside <code>add2</code>, which is inside <code>caesar-cipher</code>. The stack trace doesn’t print functions as objects, but it illustrates that the thing that we care about is that they are a function, what their name is, and whether they were created from inside another function.</p>
<p>Let’s return to printing a function as an object. An easy improvement is to demunge from Java names to Clojure names. Demunging converts <code>_</code> to <code>-</code> and <code>$</code> to <code>/</code>, and munged characters like <code>+</code> which is <code>PLUS</code> in Java.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb14-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> class-name</span></span>
<span id="cb14-2">  [x]</span>
<span id="cb14-3">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> .getName Compiler/demunge))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb15-1">(class-name ((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [y] y))))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb16-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clojure.print-object.remove-extraneous/eval45368/fn--45369/fn--45370"</span></span></code></pre></div>
</div>
<p>Next, we don’t need the eval identities.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb17-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> remove-extraneous</span></span>
<span id="cb17-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Clojure compiles with unique names that include things like `/eval32352/` and `--4321`.</span></span>
<span id="cb17-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  These are rarely useful when printing a function.</span></span>
<span id="cb17-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  They can still be accessed via (class x) or similar."</span></span>
<span id="cb17-5">  [s]</span>
<span id="cb17-6">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;</span> s</span>
<span id="cb17-7">      (str/replace <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">#"/eval\d+/"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb17-8">      (str/replace <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">#"--\d+(/|$)"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$1"</span>)))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb18-1">(remove-extraneous (class-name ((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [y] y)))))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb19-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"clojure.print-object.remove-extraneous/fn/fn"</span></span></code></pre></div>
</div>
<p>Much nicer. I can actually read that! I’m not particularly fond of the long namespace shown as the name is either defined in this namespace, referred, or part of <code>clojure.core</code>. The multiple slashes form invalid symbols which annoy me; I prefer using <code>/</code> only for <code>namespace/name</code> separation and <code>$</code> as the name level delimiter: <code>my.namespace/my$nested$name</code>.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb20-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> format-class-name </span>^String [s]</span>
<span id="cb20-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [[ns-str &amp; names] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;</span> (remove-extraneous s)</span>
<span id="cb20-3">                             (str/split <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">#"/"</span>))]</span>
<span id="cb20-4">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> ns-str names)</span>
<span id="cb20-5">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span> (str/join <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$"</span> names))</span>
<span id="cb20-6">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;</span> s (str/split <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">#"\."</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">last</span>)))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb21-1">(format-class-name (remove-extraneous (class-name ((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [y] y))))))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb22-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fn$fn"</span></span></code></pre></div>
</div>
<p>So short, so sweet. If it’s a function, why call it an object?</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb23-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> object-str </span>^String [x]</span>
<span id="cb23-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">str</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn?</span> x) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fn"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#object"</span>)</span>
<span id="cb23-3">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" ["</span> (format-class-name (class-name x)) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"]"</span>))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb24-1">(object-str ((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [y] y))))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb25-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#fn [fn$fn]"</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb26-1">(object-str (async/chan))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb27-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#object [ManyToManyChannel]"</span></span></code></pre></div>
</div>
<p>This is really all I care to know about when printing objects and functions, and it matters inside notebooks, where we want to print things, eval things that return objects and functions, and datafy complex objects that contain other objects. To print things without knowing if they are objects, functions, or data, we can extend Clojure’s <code>print-method</code>.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb28-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defmethod</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> print-method </span>Object [x ^Writer w]</span>
<span id="cb28-2">  (.write w (object-str x)))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb29-1">#object [MultiFn]</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb30-1">((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [] (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [y] y)))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb31-1">#fn [fn$fn]</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb32-1">(async/chan)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb33-1">#object [ManyToManyChannel]</span></code></pre></div>
</div>
<p>You can require this namespace from other notebooks to turn on this nice, concise mode of object printing.</p>
<p>Happy notebooking!</p>
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/src/clojure/print_object/remove_extraneous.clj">src/clojure/print_object/remove_extraneous.clj</a></small></small></pre></div>



 ]]></description>
  <guid>https://clojurecivitas.github.io/clojure/print_object/remove_extraneous.html</guid>
  <pubDate>Mon, 26 May 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>The Z-Combinator Gambit</title>
  <dc:creator>Chris Houser</dc:creator>
  <dc:creator>Timothy Pratley</dc:creator>
  <link>https://clojurecivitas.github.io/code_interview/beating/with_stupid_stuff/z_combinator_gambit.html</link>
  <description><![CDATA[ 





<style></style>
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="z_combinator_gambit_files/md-default0.js" type="text/javascript"></script>
<script src="z_combinator_gambit_files/md-default1.js" type="text/javascript"></script>
<p>Welcome back code champs, number ninjas, and data divers to our first episode of Beating Code Interviews with Stupid Stuff. People often send me emails asking, “How can I use lambda calculus to impress people?” Today, we find out.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://clojurecivitas.github.io/code_interview/beating/with_stupid_stuff/z-combinator.jpg" class="img-fluid figure-img"></p>
<figcaption>Programmer staring at Z-combinator</figcaption>
</figure>
</div>
<p>I have an interview with ZCorp lined up in 5 minutes, and our challenge is to only use anonymous functions. No defn, no loops, and definitely no self-reference. I’ll allow myself the occasional def for brevity, but beyond that, we’ll be running on pure lambda calculus.</p>
<p><strong>20 minutes later</strong></p>
<blockquote class="blockquote">
<p>Hey, sorry to keep you waiting. I just got out of a more important meeting. I’m kind of a big deal here at ZCorp. Why don’t you tell me a <em>little</em> bit about yourself?</p>
</blockquote>
<p>Born of binary, raised on algorithms, I walk the path of lambda…</p>
<blockquote class="blockquote">
<p>Riiiight… Let’s just start with the warm-up problem. Show me how you would reverse a list.</p>
</blockquote>
<p>Ah, the timeless list reversal. Deceptively simple, perilously deep. We must first define our purpose.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb1-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF LIST])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb2-1">#object [<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span>]</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>We’re just writing a function, and it only needs to take a list…</p>
</blockquote>
<p>Not just any function, my friend, but one that knows itself. To know yourself is to find your fixed point.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb3-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> REV</span></span>
<span id="cb3-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF LIST]</span>
<span id="cb3-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">empty?</span> LIST)</span>
<span id="cb3-4">      []</span>
<span id="cb3-5">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">conj</span> (SELF SELF (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rest</span> LIST))</span>
<span id="cb3-6">            (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">first</span> LIST)))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb4-1">(REV REV [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb5-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<p><code>SELF</code> is an input to itself, the logic of reversal.</p>
<blockquote class="blockquote">
<p>Ok let’s just move on to the next problem, creating a Fibonacci sequence.</p>
</blockquote>
<p>Oh no, our definition of reverse is intertwined with recursion. Let’s factor that out:</p>
<p>We need to lift our <code>SELF</code></p>
<div class="sourceClojure">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb6-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> REV'</span></span>
<span id="cb6-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF]</span>
<span id="cb6-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LIST]</span>
<span id="cb6-4">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">empty?</span> LIST)</span>
<span id="cb6-5">        []</span>
<span id="cb6-6">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">conj</span> (SELF (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rest</span> LIST))</span>
<span id="cb6-7">              (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">first</span> LIST))))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb7-1">((REV' REV') [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
ClassCastException
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>
#error {
 :class   java.lang.ClassCastException
 :message "class code_interview.beating.with_stupid_stuff.z_combinator_gambit$REV_SINGLEQUOTE_$fn__70892 cannot be cast to class clojure.lang.IPersistentCollection (code_interview.beating.with_stupid_stuff.z_combinator_gambit$REV_SINGLEQUOTE_$fn__70892 is in unnamed module of loader clojure.lang.DynamicClassLoader @588ba190; clojure.lang.IPersistentCollection is in unnamed module of loader 'app')"
 :trace
 [[clojure.core/conj                                                     "core.clj" 84]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REV'/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/eval]
  [Compiler.eval                                                         "Compiler.java" 7739]
  [Compiler.eval                                                         "Compiler.java" 7694]
  [clojure.core/eval                                                     "core.clj" 3232]
  [scicloj.clay.v2.notebook/read-eval-capture/fn/fn                      "notebook.clj" 61]
  [scicloj.clay.v2.notebook/read-eval-capture/fn                         "notebook.clj" 59]
  [scicloj.clay.v2.notebook/read-eval-capture                            "notebook.clj" 58]
  [scicloj.clay.v2.notebook/complete                                     "notebook.clj" 91]
  [scicloj.clay.v2.notebook/complete-notes/fn                            "notebook.clj" 291]
  [ArrayChunk.reduce                                                     "ArrayChunk.java" 65]
  [clojure.core.protocols/fn                                             "protocols.clj" 135]
  [clojure.core.protocols/fn/G                                           "protocols.clj" 19]
  [clojure.core.protocols/seq-reduce                                     "protocols.clj" 31]
  [clojure.core.protocols/fn                                             "protocols.clj" 74]
  [clojure.core.protocols/fn/G                                           "protocols.clj" 13]
  [clojure.core/reduce                                                   "core.clj" 6965]
  [scicloj.clay.v2.notebook/complete-notes                               "notebook.clj" 286]
  [scicloj.clay.v2.notebook/items-and-test-forms/fn                      "notebook.clj" 397]
  [clojure.core/with-redefs-fn                                           "core.clj" 7706]
  [scicloj.clay.v2.notebook/items-and-test-forms                         "notebook.clj" 398]
  [scicloj.clay.v2.make/handle-single-source-spec!                       "make.clj" 336]
  [clojure.core/mapv/fn                                                  "core.clj" 7059]
  [ArrayChunk.reduce                                                     "ArrayChunk.java" 60]
  [clojure.core.protocols/fn                                             "protocols.clj" 135]
  [clojure.core.protocols/fn/G                                           "protocols.clj" 19]
  [clojure.core.protocols/seq-reduce                                     "protocols.clj" 31]
  [clojure.core.protocols/fn                                             "protocols.clj" 74]
  [clojure.core.protocols/fn/G                                           "protocols.clj" 13]
  [clojure.core/reduce                                                   "core.clj" 6965]
  [clojure.core/mapv                                                     "core.clj" 7050]
  [scicloj.clay.v2.make/make!                                            "make.clj" 432]
  [scicloj.clay.v2.api/make!                                             "api.clj" 35]
  [scicloj.clay.v2.main/-main                                            "main.clj" 52]
  [Var.applyTo                                                           "Var.java" 707]
  [clojure.core/apply                                                    "core.clj" 667]
  [clojure.main/main-opt                                                 "main.clj" 515]
  [clojure.main/main                                                     "main.clj" 665]
  [Var.applyTo                                                           "Var.java" 707]
  [main.main                                                             "main.java" 40]]}</code></pre>
</div>
</div>
</div>
<p>Oh, no… <code>SELF</code> doesn’t take <code>LIST</code>, it’s a function that returns a function that operates on <code>LIST</code>, and the argument to <code>SELF</code> is… <code>SELF</code>. Therefore, we need to give it <code>(SELF SELF)</code>.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb9-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> REV''</span></span>
<span id="cb9-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF]</span>
<span id="cb9-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LIST]</span>
<span id="cb9-4">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">empty?</span> LIST)</span>
<span id="cb9-5">        []</span>
<span id="cb9-6">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">conj</span> ((SELF SELF) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rest</span> LIST))</span>
<span id="cb9-7">              (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">first</span> LIST))))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb10-1">((REV<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">''</span> REV<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">''</span>) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb11-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>That’s a confusing way to write it</p>
</blockquote>
<p>Quite right, because it’s not obvious what <code>(SELF SELF)</code> is. We need to extract it out. What we want is:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb12-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> REV-LOGIC</span></span>
<span id="cb12-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF]</span>
<span id="cb12-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LIST]</span>
<span id="cb12-4">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">empty?</span> LIST)</span>
<span id="cb12-5">        []</span>
<span id="cb12-6">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">conj</span> (SELF (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rest</span> LIST))</span>
<span id="cb12-7">              (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">first</span> LIST))))))</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>Believe me when I say that is not what I meant…</p>
</blockquote>
<p>Oh, right. Now <code>SELF = (SELF SELF)</code>.</p>
<blockquote class="blockquote">
<p>Not what I meant, and also that sounds impossible.</p>
</blockquote>
<p>But identity is the identity of itself:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb13-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb14-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb15-1">((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb16-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>O.K. sure, but that’s a special case.</p>
</blockquote>
<div class="sourceClojure">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb17-1">(((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span>) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span>)) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb18-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>This is an identity crisis.</p>
</blockquote>
<p>We just need to find the right conditions for <code>(SELF SELF) = SELF</code>.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb19-1">(REV-LOGIC REV-LOGIC)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb20-1">#object [REV-LOGIC$fn]</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>Well, it’s a function! That much is clear…</p>
</blockquote>
<div class="sourceClojure">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb21-1">((REV-LOGIC REV-LOGIC) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
ClassCastException
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>
#error {
 :class   java.lang.ClassCastException
 :message "class code_interview.beating.with_stupid_stuff.z_combinator_gambit$REV_LOGIC$fn__70902 cannot be cast to class clojure.lang.IPersistentCollection (code_interview.beating.with_stupid_stuff.z_combinator_gambit$REV_LOGIC$fn__70902 is in unnamed module of loader clojure.lang.DynamicClassLoader @37311471; clojure.lang.IPersistentCollection is in unnamed module of loader 'app')"
 :trace
 [[clojure.core/conj                                                          "core.clj" 84]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REV-LOGIC/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/eval]
  [Compiler.eval                                                              "Compiler.java" 7739]
  [Compiler.eval                                                              "Compiler.java" 7694]
  [clojure.core/eval                                                          "core.clj" 3232]
  [scicloj.clay.v2.notebook/read-eval-capture/fn/fn                           "notebook.clj" 61]
  [scicloj.clay.v2.notebook/read-eval-capture/fn                              "notebook.clj" 59]
  [scicloj.clay.v2.notebook/read-eval-capture                                 "notebook.clj" 58]
  [scicloj.clay.v2.notebook/complete                                          "notebook.clj" 91]
  [scicloj.clay.v2.notebook/complete-notes/fn                                 "notebook.clj" 291]
  [ArrayChunk.reduce                                                          "ArrayChunk.java" 65]
  [clojure.core.protocols/fn                                                  "protocols.clj" 135]
  [clojure.core.protocols/fn/G                                                "protocols.clj" 19]
  [clojure.core.protocols/seq-reduce                                          "protocols.clj" 31]
  [clojure.core.protocols/fn                                                  "protocols.clj" 74]
  [clojure.core.protocols/fn/G                                                "protocols.clj" 13]
  [clojure.core/reduce                                                        "core.clj" 6965]
  [scicloj.clay.v2.notebook/complete-notes                                    "notebook.clj" 286]
  [scicloj.clay.v2.notebook/items-and-test-forms/fn                           "notebook.clj" 397]
  [clojure.core/with-redefs-fn                                                "core.clj" 7706]
  [scicloj.clay.v2.notebook/items-and-test-forms                              "notebook.clj" 398]
  [scicloj.clay.v2.make/handle-single-source-spec!                            "make.clj" 336]
  [clojure.core/mapv/fn                                                       "core.clj" 7059]
  [ArrayChunk.reduce                                                          "ArrayChunk.java" 60]
  [clojure.core.protocols/fn                                                  "protocols.clj" 135]
  [clojure.core.protocols/fn/G                                                "protocols.clj" 19]
  [clojure.core.protocols/seq-reduce                                          "protocols.clj" 31]
  [clojure.core.protocols/fn                                                  "protocols.clj" 74]
  [clojure.core.protocols/fn/G                                                "protocols.clj" 13]
  [clojure.core/reduce                                                        "core.clj" 6965]
  [clojure.core/mapv                                                          "core.clj" 7050]
  [scicloj.clay.v2.make/make!                                                 "make.clj" 432]
  [scicloj.clay.v2.api/make!                                                  "api.clj" 35]
  [scicloj.clay.v2.main/-main                                                 "main.clj" 52]
  [Var.applyTo                                                                "Var.java" 707]
  [clojure.core/apply                                                         "core.clj" 667]
  [clojure.main/main-opt                                                      "main.clj" 515]
  [clojure.main/main                                                          "main.clj" 665]
  [Var.applyTo                                                                "Var.java" 707]
  [main.main                                                                  "main.java" 40]]}</code></pre>
</div>
</div>
</div>
<p>But it doesn’t work, because <code>(REV-LOGIC REV-LOGIC) =/= REV-LOGIC.</code> Let’s try something easier:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb23-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> FIX</span></span>
<span id="cb23-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LOGIC]</span>
<span id="cb23-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; return something like identity where self application does not change it</span></span>
<span id="cb23-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#_</span>FIXED))</span></code></pre></div>
</div>
<p><code>FIX</code> takes the logic function, and makes a function such that <code>(FIXED (FIX LOGIC)) = FIXED</code></p>
<p><code>(FIXED FIXED) =&gt; FIXED</code> which means that <code>((FIX LOGIC) (FIX LOGIC)) = (FIX LOGIC)</code></p>
<blockquote class="blockquote">
<p>Right, that sounds way easier… <strong>shaking head in disbelief</strong></p>
</blockquote>
<p>Exactly! Because we just reverse it: <code>(FIX F) = ((FIX F) (FIX F))</code></p>
<blockquote class="blockquote">
<p>Why did you call it <code>FIX</code>?</p>
</blockquote>
<p>Well, it was broken before right?</p>
<blockquote class="blockquote">
<p>I’m starting to think that you are the broken one.</p>
</blockquote>
<div class="sourceClojure">
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb24-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> FIX</span></span>
<span id="cb24-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LOGIC]</span>
<span id="cb24-3">    ((FIX LOGIC) (FIX LOGIC))))</span></code></pre></div>
</div>
<p>But <code>FIX</code> can still see itself. We need to parameterize the use of <code>FIXED</code></p>
<div class="sourceClojure">
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb25-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> FIX</span></span>
<span id="cb25-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LOGIC]</span>
<span id="cb25-3">    ((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [FIXED]</span>
<span id="cb25-4">       (LOGIC (FIXED FIXED)))</span>
<span id="cb25-5">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [FIXED]</span>
<span id="cb25-6">       (LOGIC (FIXED FIXED))))))</span></code></pre></div>
</div>
<p>There, I fixed it.</p>
<blockquote class="blockquote">
<p>What is fixed?</p>
</blockquote>
<p><code>FIXED</code> is <code>(FIXED FIXED)</code>, obviously.</p>
<blockquote class="blockquote">
<p>Obviously. <strong>raises hands in dispair</strong></p>
</blockquote>
<p>Because <code>(FIX F) = ((FIX F) (FIX F))</code>, it was your idea to refactor remember?</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb26-1">(FIX REV-LOGIC)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
StackOverflowError
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>
#error {
 :class   java.lang.StackOverflowError
 :trace
 [[code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]]}</code></pre>
</div>
</div>
</div>
<blockquote class="blockquote">
<p>Everything looks to be inside out now.</p>
</blockquote>
<p>Oh, you are right, we can’t pass <code>(FIXED FIXED)</code> as an argument because it will be evaluated first. Thanks for the tip.</p>
<blockquote class="blockquote">
<p>Can we fix it? <strong>slaps self</strong></p>
</blockquote>
<p>Instead of calling <code>(FIXED FIXED)</code> we need a function that will create <code>(FIXED FIXED)</code> when it’s needed, after <code>LOGIC</code> gets called. <code>LOGIC</code> needs to take itself as it’s argument, so the function we pass to <code>LOGIC</code> should look very much like <code>LOGIC</code>, but of course without any actual logic in it.</p>
<blockquote class="blockquote">
<p>That actually sounds logical.</p>
</blockquote>
<p><code>LOGIC</code> is a function of itself, returning a function that acts on a value:</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb28-1">(LOGIC (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> SELF [VALUE]</span>
<span id="cb28-2">         ((FIXED FIXED) VALUE)))</span></code></pre></div>
<blockquote class="blockquote">
<p>didn’t you say that <code>(FIXED FIXED) = FIXED</code>?</p>
</blockquote>
<p>Yes but only after we <code>FIX</code> it. Fixing it requires us to go from <code>FIXED</code> to <code>(FIXED FIXED)</code> remember?</p>
<blockquote class="blockquote">
<p>Ah sure…</p>
</blockquote>
<p>So while we are fixing logic, let’s replace <code>(LOGIC (FIXED FIXED))</code> with our deferring function.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb29-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> FIX</span></span>
<span id="cb29-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LOGIC]</span>
<span id="cb29-3">    ((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [FIXED]</span>
<span id="cb29-4">       (LOGIC (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> SELF [VALUE]</span>
<span id="cb29-5">                ((FIXED FIXED) VALUE))))</span>
<span id="cb29-6">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [FIXED]</span>
<span id="cb29-7">       (LOGIC (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> SELF [VALUE]</span>
<span id="cb29-8">                ((FIXED FIXED) VALUE)))))))</span></code></pre></div>
</div>
<p>Did you know this is called continuation passing style?</p>
<blockquote class="blockquote">
<p>CSP?</p>
</blockquote>
<p>No, that’s communicating subprocesses.</p>
<blockquote class="blockquote">
<p>That’s confusing.</p>
</blockquote>
<p>Isn’t it!? Fortunately, we are about to be unconfused.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb30-1">(FIX REV-LOGIC)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb31-1">#object [REV-LOGIC$fn]</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>At least it didn’t blow up this time…</p>
</blockquote>
<div class="sourceClojure">
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb32-1">((FIX REV-LOGIC) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb33-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>Nice, that’s the right answer.</p>
</blockquote>
<p>Even nicer is that our fixed logic behaves like identity now:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb34-1">((REV-LOGIC (FIX REV-LOGIC)) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb35-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb36-1">((REV-LOGIC (REV-LOGIC (FIX REV-LOGIC))) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb37-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>I can’t believe something so ridiculous actually works.</p>
</blockquote>
<p>Yes it is ridiculous to have all those silly names. Let’s fix that:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb38-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> Z</span></span>
<span id="cb38-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [F]</span>
<span id="cb38-3">    ((<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [X]</span>
<span id="cb38-4">       (F (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [V] ((X X) V))))</span>
<span id="cb38-5">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [X]</span>
<span id="cb38-6">       (F (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [V] ((X X) V)))))))</span></code></pre></div>
</div>
<p>You are not your variables. Rename them, rebind them. Your essence is invariant.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb39-1">((Z REV-LOGIC) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb40-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>Wait, we are meant to be doing Fibonacci, remember?</p>
</blockquote>
<p>We are factoring out our <code>LOGIC</code>.</p>
<blockquote class="blockquote">
<p>It looks to me like you doubled the code, that’s not great refactoring. Using single letters make it totally unreadable.</p>
</blockquote>
<p>Hmmm, there does seem to be a lot of doubling. We can factor out a function for <code>f =&gt; (f f)</code>.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb41-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> REPLICATE </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Omega, the self-devouring serpent"</span></span>
<span id="cb41-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [F]</span>
<span id="cb41-3">    (F F)))</span></code></pre></div>
</div>
<p>The replication of identity is itself.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb42-1">((REPLICATE <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">identity</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb43-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<p>But test not the serpent lightly</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb44-1">(REPLICATE REPLICATE)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
StackOverflowError
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>
#error {
 :class   java.lang.StackOverflowError
 :trace
 [[code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]
  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]]}</code></pre>
</div>
</div>
</div>
<p>The replication of replication is eternal. Now we can clean up that duplication.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb46-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> Z</span></span>
<span id="cb46-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LOGIC]</span>
<span id="cb46-3">    (REPLICATE (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [X]</span>
<span id="cb46-4">                 (LOGIC (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [V] ((X X) V)))))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb47-1">((Z REV-LOGIC) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb48-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>That’s not really any clearer…</p>
</blockquote>
<p>Very well, we can keep extracting.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb49-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> DEFER </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eta, the patient one"</span></span>
<span id="cb49-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LOGIC]</span>
<span id="cb49-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [VALUE]</span>
<span id="cb49-4">      ((REPLICATE LOGIC) VALUE))))</span></code></pre></div>
</div>
<p>If the infinite is deferred, is it infinite?</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb50-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> FOLD </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zeta, weaver of logic, bringer of finitude"</span></span>
<span id="cb50-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [LOGIC]</span>
<span id="cb50-3">    (REPLICATE (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF]</span>
<span id="cb50-4">                 (LOGIC (DEFER SELF))))))</span></code></pre></div>
</div>
<p>OMEGA diverges, ZETA folds, LOGIC writes QED.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb51-1">((FOLD REV-LOGIC) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb52-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<p>That’s much nicer, I’m so glad you suggested using longer names.</p>
<blockquote class="blockquote">
<p>Can we write Fibonacci, <em>please</em>?</p>
</blockquote>
<p>Oh, that’s easy now!</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb53-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> FIB-LOGIC</span></span>
<span id="cb53-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF]</span>
<span id="cb53-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [[B A <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:as</span> FIBS]]</span>
<span id="cb53-4">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&gt;</span> B <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb53-5">        FIBS</span>
<span id="cb53-6">        (SELF (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">concat</span> [(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">+</span> A B) B] FIBS))))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb54-1">((FOLD FIB-LOGIC) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb55-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>That’s all backward!!</p>
</blockquote>
<p>Oh, my mistake</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb56-1">((FOLD REV-LOGIC) ((FOLD FIB-LOGIC) [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb57-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>]</span></code></pre></div>
</div>
<blockquote class="blockquote">
<p>You can’t be serious… This is ridiculous. We’ll be here forever if you keep this up.</p>
</blockquote>
<p>I love that idea! An infinite sequence is exactly what we need…</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb58-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> FIB-LOGIC-FOREVER</span></span>
<span id="cb58-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [SELF]</span>
<span id="cb58-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [A]</span>
<span id="cb58-4">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [B]</span>
<span id="cb58-5">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lazy-seq</span></span>
<span id="cb58-6">          (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">cons</span> A ((SELF B) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">+</span> A B))))))))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb59-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">take</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> (((FOLD FIB-LOGIC-FOREVER) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb60-1">(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">89</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">144</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">233</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">377</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">610</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">987</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1597</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2584</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4181</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6765</span>)</span></code></pre></div>
</div>
<p>That’s so nice.</p>
<blockquote class="blockquote">
<p>Oh look at the time! I have a more important meeting to go to! <strong>disconnects</strong></p>
</blockquote>
<p>Ouch, Rough. ZCorp never got back to me, so let’s update the scoreboard as a loss.</p>
<div class="clay-table">
<div class="table-responsive">
<table class="table table-hover clay-table caption-top" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">Interviews</th>
<th data-quarto-table-cell-role="th">Wins</th>
<th data-quarto-table-cell-role="th">GGs</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>That’s all for today. Until next time, keep on coding.</p>
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/src/code_interview/beating/with_stupid_stuff/z_combinator_gambit.clj">src/code_interview/beating/with_stupid_stuff/z_combinator_gambit.clj</a></small></small></pre></div>



 ]]></description>
  <guid>https://clojurecivitas.github.io/code_interview/beating/with_stupid_stuff/z_combinator_gambit.html</guid>
  <pubDate>Sun, 25 May 2025 00:00:00 GMT</pubDate>
  <media:content url="https://clojurecivitas.github.io/code_interview/beating/with_stupid_stuff/z-combinator.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Noj Reload Executable</title>
  <dc:creator>Timothy Pratley</dc:creator>
  <link>https://clojurecivitas.github.io/scicloj/noj/intro/getting-started-noj.html</link>
  <description><![CDATA[ 





<p>Transcript of <a href="https://youtu.be/tDz1x2d65C0">Noj Reload Executable</a></p>
<p>Hello code champs, number ninjas and data divers!</p>
<p>Imagine being able to experiment with Clojure without needing to install tooling, set up editors, or even know about deps.edn Sounds like a dream, right? Well, dream no more—meet <a href="https://scicloj.github.io/noj/">Noj’s</a> new Code Reload Executable!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://clojurecivitas.github.io/scicloj/noj/intro/Noj-icon.svg" class="img-fluid figure-img"></p>
<figcaption>Noj</figcaption>
</figure>
</div>
<p>We can skip the Clojure tooling and editor setup, but we do need to install the recommended Adoptive Java. Now we download the latest Noj jar from the Scicloj Noj GitHub releases page. Let’s check the jar is in the Downloads directory, and that we have java installed by executing <code>java -version</code>.</p>
<p>Launch Noj using <code>java -jar</code> and the path to the jar file. Pro tip, if you press tab while typing a path, it will autocomplete. Noj is running, it created a directory called notebooks, and it recommends we create a Clojure file there.</p>
<p>I’ll create my file with Notepad, being careful to create a .clj file rather than a text file. When I saved that file, a browser window opened. Let’s put them side by side. Every time I save the file, the notebook updates.</p>
<p>If I’m interested in one particular top-level form, I can narrow the output by adding ,, anywhere in the form. And removing it renders the full notebook. And check this out—comments are rendered as Markdown. How cool is that? What an easy way to get coding!</p>
<p>Noj isn’t just a notebook—it’s a fully featured data science environment. It includes interesting datasets that can be queried and the results shown as tables or even better as charts.</p>
<p>Noj makes experimenting with Clojure easier than ever. No setup headaches, no complicated tooling—just pure coding joy.</p>
<p>Until next time, Keep on coding</p>



 ]]></description>
  <guid>https://clojurecivitas.github.io/scicloj/noj/intro/getting-started-noj.html</guid>
  <pubDate>Tue, 06 May 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>What He Saw Before His Wings Melted</title>
  <dc:creator>Daniel Slutsky</dc:creator>
  <dc:creator>Timothy Pratley</dc:creator>
  <link>https://clojurecivitas.github.io/core/async/flow/example/before_his_wings_melted.html</link>
  <description><![CDATA[ 





<style></style>
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="before_his_wings_melted_files/md-default0.js" type="text/javascript"></script>
<script src="before_his_wings_melted_files/md-default1.js" type="text/javascript"></script>
<p>Long before he flew too high, before the wax gave way and the world remembered only his fall, Icarus flew <em>low</em>. They often leave out this part of his misadventures, when curiosity, not hubris, guided his wings. He flew not to ascend to Olympus, but rather to get a good view of the lesser known Asynctopolis.</p>
<p>A city pulsing with signals, stitched together by invisible threads. From above, its patterns unfolded like a diagram. Flows of information, agents in silent collaboration, each unaware of the others, yet perfectly aligned.</p>
<p>This is what he saw.</p>
<section id="asynctopolis-from-the-clouds" class="level2">
<h2 class="anchored" data-anchor-id="asynctopolis-from-the-clouds">Asynctopolis from the Clouds</h2>
<div class="sourceClojure">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb1-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> asynctopolis </span>(flow/create-flow asynctopolis/config))</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb2-1">(show/flow-svg asynctopolis <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:show-chans</span>   <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb2-2">                                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:with-content</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>})</span></code></pre></div>
</div>
<svg viewbox="0 0 244.0 114.0" width="100%"><defs><marker id="edgeShapeMarker" markerheight="10" markerunits="strokeWidth" markerwidth="10" orient="auto" refx="6" refy="3"><path d="M0,0 L0,6 L6,3 z" fill="black"></path></marker></defs><g id="G"><rect fill="none" height="114.0" stroke="black" width="244.0"></rect><g id="Tallystrix" transform="translate(92.0, 22.0)"><rect fill="none" height="30.0" stroke="black" width="60.0"></rect><foreignobject height="30.0" style="overflow:visible;" width="60.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">Tallystrix</div></foreignobject></g><g id="Chronon" transform="translate(12.0, 17.0)"><rect fill="none" height="30.0" stroke="black" width="60.0"></rect><foreignobject height="30.0" style="overflow:visible;" width="60.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">Chronon</div></foreignobject></g><g id="Claxxus" transform="translate(172.0, 22.0)"><rect fill="none" height="30.0" stroke="black" width="60.0"></rect><foreignobject height="30.0" style="overflow:visible;" width="60.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">Claxxus</div></foreignobject></g><g id="Randomius" transform="translate(12.0, 72.0)"><rect fill="none" height="30.0" stroke="black" width="60.0"></rect><foreignobject height="30.0" style="overflow:visible;" width="60.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">Randomius</div></foreignobject></g><g id="Randomius_Tallystrix"><path d="M72.0,87.0L82.0,87.0 82.0,42.0 92.0,42.0" fill="none" marker-end="url(#edgeShapeMarker)" stroke="black"></path></g><g id="Chronon_Tallystrix"><path d="M72.0,32.0L92.0,32.0" fill="none" marker-end="url(#edgeShapeMarker)" stroke="black"></path></g><g id="Tallystrix_Claxxus"><path d="M152.0,37.0L172.0,37.0" fill="none" marker-end="url(#edgeShapeMarker)" stroke="black"></path></g></g></svg>
<p>He circled the skyline. He watched the channels breathe. And slowly, he spiraled down, drawn not by ambition, but fascination— closer to each process, each transformation, each role in the great asynchronous allegiance.</p>
<p>As he flew lower he saw that processes are connected via channels.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb3-1">(show/flow-svg asynctopolis <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:chans-as-ports</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb3-2">                                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:with-content</span>   <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>})</span></code></pre></div>
</div>
<svg viewbox="0 0 368.0 114.0" width="100%"><defs><marker id="edgeShapeMarker" markerheight="10" markerunits="strokeWidth" markerwidth="10" orient="auto" refx="6" refy="3"><path d="M0,0 L0,6 L6,3 z" fill="black"></path></marker></defs><g id="G"><rect fill="none" height="114.0" stroke="black" width="368.0"></rect><g id="Tallystrix" transform="translate(154.0, 24.0)"><rect fill="none" height="30.0" stroke="black" width="60.0"></rect><foreignobject height="30.0" style="overflow:visible;" width="60.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">Tallystrix</div></foreignobject><g id="Tallystrix_stat" transform="translate(-30.0, 16.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">stat</div></foreignobject></g><g id="Tallystrix_poke" transform="translate(-30.0, 2.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">poke</div></foreignobject></g><g id="Tallystrix_alert" transform="translate(60.0, 9.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">alert</div></foreignobject></g></g><g id="Chronon" transform="translate(12.0, 17.0)"><rect fill="none" height="30.0" stroke="black" width="60.0"></rect><foreignobject height="30.0" style="overflow:visible;" width="60.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">Chronon</div></foreignobject><g id="Chronon_out" transform="translate(60.0, 9.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">out</div></foreignobject></g></g><g id="Claxxus" transform="translate(296.0, 24.0)"><rect fill="none" height="30.0" stroke="black" width="60.0"></rect><foreignobject height="30.0" style="overflow:visible;" width="60.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">Claxxus</div></foreignobject><g id="Claxxus_in" transform="translate(-30.0, 9.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">in</div></foreignobject></g></g><g id="Randomius" transform="translate(12.0, 72.0)"><rect fill="none" height="30.0" stroke="black" width="60.0"></rect><foreignobject height="30.0" style="overflow:visible;" width="60.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">Randomius</div></foreignobject><g id="Randomius_out" transform="translate(60.0, 9.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">out</div></foreignobject></g></g><g id="Randomius_out_Tallystrix_stat"><path d="M102.0,87.0L113.0,87.0 113.0,46.0 124.0,46.0" fill="none" marker-end="url(#edgeShapeMarker)" stroke="black"></path></g><g id="Chronon_out_Tallystrix_poke"><path d="M102.0,32.0L124.0,32.0" fill="none" marker-end="url(#edgeShapeMarker)" stroke="black"></path></g><g id="Tallystrix_alert_Claxxus_in"><path d="M244.0,39.0L266.0,39.0" fill="none" marker-end="url(#edgeShapeMarker)" stroke="black"></path></g></g></svg>
<p>Are channels attached to a process, or are they part of it? You can choose to visualize them as distinct connectors, or as embedded roles within each process. Both perspectives reveal useful insights.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb4-1">(show/flow-svg asynctopolis <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:chans-as-ports</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb4-2">                                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:with-content</span>   <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>})</span></code></pre></div>
</div>
<svg viewbox="0 0 246.0 129.0" width="100%"><defs><marker id="edgeShapeMarker" markerheight="10" markerunits="strokeWidth" markerwidth="10" orient="auto" refx="6" refy="3"><path d="M0,0 L0,6 L6,3 z" fill="black"></path></marker></defs><g id="G"><rect fill="none" height="129.0" stroke="black" width="246.0"></rect><g id="Tallystrix" transform="translate(96.0, 17.0)"><rect fill="none" height="100.0" stroke="black" width="54.0"></rect><foreignobject style="overflow:visible;" y="-12.5"><div style="font-size:8px;height:100%;width:100%;" xmlns="http://www.w3.org/1999/xhtml">Tallystrix</div></foreignobject><g id="Tallystrix_stat" transform="translate(12.0, 44.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">stat</div></foreignobject></g><g id="Tallystrix_poke" transform="translate(12.0, 12.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">poke</div></foreignobject></g><g id="Tallystrix_alert" transform="translate(12.0, 76.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">alert</div></foreignobject></g></g><g id="Chronon" transform="translate(12.0, 17.0)"><rect fill="none" height="36.0" stroke="black" width="54.0"></rect><foreignobject style="overflow:visible;" y="-12.5"><div style="font-size:8px;height:100%;width:100%;" xmlns="http://www.w3.org/1999/xhtml">Chronon</div></foreignobject><g id="Chronon_out" transform="translate(12.0, 12.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">out</div></foreignobject></g></g><g id="Claxxus" transform="translate(180.0, 81.0)"><rect fill="none" height="36.0" stroke="black" width="54.0"></rect><foreignobject style="overflow:visible;" y="-12.5"><div style="font-size:8px;height:100%;width:100%;" xmlns="http://www.w3.org/1999/xhtml">Claxxus</div></foreignobject><g id="Claxxus_in" transform="translate(12.0, 12.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">in</div></foreignobject></g></g><g id="Randomius" transform="translate(12.0, 78.0)"><rect fill="none" height="36.0" stroke="black" width="54.0"></rect><foreignobject style="overflow:visible;" y="-12.5"><div style="font-size:8px;height:100%;width:100%;" xmlns="http://www.w3.org/1999/xhtml">Randomius</div></foreignobject><g id="Randomius_out" transform="translate(12.0, 12.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">out</div></foreignobject></g></g><g id="Randomius_out_Tallystrix_stat"><path d="M54.0,96.0L81.0,96.0 81.0,67.0 108.0,67.0" fill="none" marker-end="url(#edgeShapeMarker)" stroke="black"></path></g><g id="Chronon_out_Tallystrix_poke"><path d="M54.0,35.0L108.0,35.0" fill="none" marker-end="url(#edgeShapeMarker)" stroke="black"></path></g><g id="Tallystrix_alert_Claxxus_in"><path d="M138.0,99.0L192.0,99.0" fill="none" marker-end="url(#edgeShapeMarker)" stroke="black"></path></g></g></svg>
<p>Wanting to see more, Icarus swooped even lower to survey the processes.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb5-1">(show/proc-table asynctopolis)</span></code></pre></div>
</div>
<div class="clay-table">
<div class="table-responsive">
<table class="table table-hover clay-table caption-top" data-quarto-postprocess="true">
<colgroup>
<col style="width: 25%">
<col style="width: 25%">
<col style="width: 25%">
<col style="width: 25%">
</colgroup>
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">process</th>
<th data-quarto-table-cell-role="th">start params</th>
<th data-quarto-table-cell-role="th">in chans</th>
<th data-quarto-table-cell-role="th">out chans</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Tallystrix</td>
<td><div>
<div>
<div>
<strong>min</strong>: 1
</div>
<div>
Min value, alert if lower
</div>
</div>
<div>
<div>
<strong>max</strong>: 10
</div>
<div>
Max value, alert if higher
</div>
</div>
</div></td>
<td><div>
<div>
<strong>stat</strong>: Channel to receive stat values
</div>
<div>
<strong>poke</strong>: Channel to poke when it is time to report a window of data to the log
</div>
</div></td>
<td><div>
<div>
<strong>alert</strong>: Notify of value out of range {:val value, :error :high|:low
</div>
</div></td>
</tr>
<tr class="even">
<td>Chronon</td>
<td><div>
<div>
<div>
<strong>wait</strong>: 3000
</div>
<div>
Time to wait between pokes
</div>
</div>
</div></td>
<td><div>

</div></td>
<td><div>
<div>
<strong>out</strong>: Poke channel, will send true when the alarm goes off
</div>
</div></td>
</tr>
<tr class="odd">
<td>Claxxus</td>
<td><div>
<div>
<div>
<strong>prefix</strong>: Alert:
</div>
<div>
Log message prefix
</div>
</div>
</div></td>
<td><div>
<div>
<strong>in</strong>: Channel to receive messages
</div>
</div></td>
<td><div>

</div></td>
</tr>
<tr class="even">
<td>Randomius</td>
<td><div>
<div>
<div>
<strong>min</strong>: 0
</div>
<div>
Min value to generate
</div>
</div>
<div>
<div>
<strong>max</strong>: 12
</div>
<div>
Max value to generate
</div>
</div>
<div>
<div>
<strong>wait</strong>: 500
</div>
<div>
Time in ms to wait between generating
</div>
</div>
</div></td>
<td><div>

</div></td>
<td><div>
<div>
<strong>out</strong>: Output channel for stats
</div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<p>With a clearer understanding of the processes, he pondered how these processes are connected.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb6-1">(show/conn-table asynctopolis)</span></code></pre></div>
</div>
<div class="clay-table">
<div class="table-responsive">
<table class="table table-hover clay-table caption-top" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">source</th>
<th data-quarto-table-cell-role="th">target</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Randomius_out</td>
<td>Tallystrix_stat</td>
</tr>
<tr class="even">
<td>Chronon_out</td>
<td>Tallystrix_poke</td>
</tr>
<tr class="odd">
<td>Tallystrix_alert</td>
<td>Claxxus_in</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>In doing so he realized there are also 2 global channels, <code>report</code> and <code>error</code>:</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb7-1">(show/flow-svg asynctopolis <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:chans-as-ports</span>    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb7-2">                                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:with-content</span>      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb7-3">                                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:show-global-chans</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span>})</span></code></pre></div>
</div>
<svg viewbox="0 0 356.0 185.4" width="100%"><defs><marker id="edgeShapeMarker" markerheight="10" markerunits="strokeWidth" markerwidth="10" orient="auto" refx="6" refy="3"><path d="M0,0 L0,6 L6,3 z" fill="black"></path></marker></defs><g id="G"><rect fill="none" height="185.4" stroke="black" width="356.0"></rect><g id="Tallystrix" transform="translate(106.0, 28.0)"><rect fill="none" height="100.0" stroke="black" width="54.0"></rect><foreignobject style="overflow:visible;" y="-12.5"><div style="font-size:8px;height:100%;width:100%;" xmlns="http://www.w3.org/1999/xhtml">Tallystrix</div></foreignobject><g id="Tallystrix_stat" transform="translate(12.0, 12.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">stat</div></foreignobject></g><g id="Tallystrix_poke" transform="translate(12.0, 76.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">poke</div></foreignobject></g><g id="Tallystrix_alert" transform="translate(12.0, 44.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">alert</div></foreignobject></g></g><g id="Chronon" transform="translate(12.0, 110.0)"><rect fill="none" height="50.0" stroke="black" width="54.0"></rect><foreignobject style="overflow:visible;" y="-12.5"><div style="font-size:8px;height:100%;width:100%;" xmlns="http://www.w3.org/1999/xhtml">Chronon</div></foreignobject><g id="Chronon_out" transform="translate(12.0, 12.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">out</div></foreignobject></g></g><g id="Claxxus" transform="translate(190.0, 60.0)"><rect fill="none" height="36.0" stroke="black" width="54.0"></rect><foreignobject style="overflow:visible;" y="-12.5"><div style="font-size:8px;height:100%;width:100%;" xmlns="http://www.w3.org/1999/xhtml">Claxxus</div></foreignobject><g id="Claxxus_in" transform="translate(12.0, 12.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">in</div></foreignobject></g></g><g id="Randomius" transform="translate(12.0, 24.0)"><rect fill="none" height="44.0" stroke="black" width="54.0"></rect><foreignobject style="overflow:visible;" y="-12.5"><div style="font-size:8px;height:100%;width:100%;" xmlns="http://www.w3.org/1999/xhtml">Randomius</div></foreignobject><g id="Randomius_out" transform="translate(12.0, 16.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">out</div></foreignobject></g></g><g id="report" transform="translate(314.0, 128.4)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">report</div></foreignobject></g><g id="error" transform="translate(314.0, 161.4)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">error</div></foreignobject></g><g id="Randomius_out_Tallystrix_stat"><path d="M54.0,46.0L118.0,46.0" fill="none" marker-end="url(#edgeShapeMarker)" stroke="black"></path></g><g id="Chronon_out_Tallystrix_poke"><path d="M54.0,128.0L81.0,128.0 81.0,110.0 118.0,110.0" fill="none" marker-end="url(#edgeShapeMarker)" stroke="black"></path></g><g id="Tallystrix_alert_Claxxus_in"><path d="M148.0,78.0L202.0,78.0" fill="none" marker-end="url(#edgeShapeMarker)" stroke="black"></path></g><g id="Randomius_report"><path d="M66.0,36.0L81.0,36.0 81.0,12.0 304.0,12.0 304.0,130.8 314.0,130.8" fill="none" marker-end="url(#edgeShapeMarker)" stroke="black"></path></g><g id="Randomius_error"><path d="M66.0,56.0L91.0,56.0 91.0,160.0 254.0,160.0 254.0,168.6 314.0,168.6" fill="none" marker-end="url(#edgeShapeMarker)" stroke="black"></path></g><g id="Tallystrix_report"><path d="M160.0,58.0L175.0,58.0 175.0,44.0 294.0,44.0 294.0,133.20000000000002 314.0,133.20000000000002" fill="none" marker-end="url(#edgeShapeMarker)" stroke="black"></path></g><g id="Tallystrix_error"><path d="M160.0,88.0L175.0,88.0 175.0,149.0 264.0,149.0 264.0,166.20000000000002 314.0,166.20000000000002" fill="none" marker-end="url(#edgeShapeMarker)" stroke="black"></path></g><g id="Chronon_report"><path d="M66.0,138.0L314.0,138.0" fill="none" marker-end="url(#edgeShapeMarker)" stroke="black"></path></g><g id="Chronon_error"><path d="M66.0,148.0L81.0,148.0 81.0,171.0 314.0,171.0" fill="none" marker-end="url(#edgeShapeMarker)" stroke="black"></path></g><g id="Claxxus_report"><path d="M244.0,72.0L284.0,72.0 284.0,135.60000000000002 314.0,135.60000000000002" fill="none" marker-end="url(#edgeShapeMarker)" stroke="black"></path></g><g id="Claxxus_error"><path d="M244.0,82.0L274.0,82.0 274.0,163.8 314.0,163.8" fill="none" marker-end="url(#edgeShapeMarker)" stroke="black"></path></g></g></svg>
<p>Any process can put messages on <code>report</code> and <code>error</code>.</p>
</section>
<section id="street-level" class="level2">
<h2 class="anchored" data-anchor-id="street-level">Street Level</h2>
<p>Reaching street level, he called out <code>start</code>! The flow responded, handing him report and error channels in a map.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb8-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> chs </span>(flow/start asynctopolis))</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>Randomius initialing
Tallystrix initializing
Chronon initializing
Claxxus initializing
</code></pre>
</div>
</div>
<p>But still, nothing stirred. So he yelled <code>resume</code>!</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb10-1">(flow/resume asynctopolis)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
THREAD OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>Randomius transitioning :clojure.core.async.flow/resume
Talon, set flight!
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb12-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb13-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> report-chan </span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:report-chan</span> chs))</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
THREAD OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>Claxxus transitioning :clojure.core.async.flow/resume
Tallystrix transitioning :clojure.core.async.flow/resume
Chronon transitioning :clojure.core.async.flow/resume
Chronon running
SQUARK: 0
Randomius transform 0 from :stat to :out
</code></pre>
</div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb15-1">(async/poll! report-chan)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
THREAD OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>Tallystrix transforming :stat 0
Claxxus transforming :in {:val 0, :error :low}
Alert:  {:val 0, :error :low}
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb17-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb18-1">(flow/inject asynctopolis [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Tallystrix</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:poke</span>] [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span>])</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
THREAD OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>Chronon transforms :alarm true to :out
Tallystrix transforming :poke true
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb20-1">#object [FutureTask]</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb21-1">(flow/inject asynctopolis [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Tallystrix</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span>] [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abc1000"</span>])</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
THREAD OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>Tallystrix transforming :poke true
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb23-1">#object [FutureTask]</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb24-1">(show/flow-svg asynctopolis chs {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:chans-as-ports</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb24-2">                                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:with-content</span>   <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>})</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
THREAD OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>Tallystrix transforming :stat abc1000
</code></pre>
</div>
</div>
<svg viewbox="0 0 246.0 129.0" width="100%"><defs><marker id="edgeShapeMarker" markerheight="10" markerunits="strokeWidth" markerwidth="10" orient="auto" refx="6" refy="3"><path d="M0,0 L0,6 L6,3 z" fill="black"></path></marker></defs><g id="G"><rect fill="red" height="129.0" stroke="black" width="246.0"></rect><g id="Tallystrix" transform="translate(96.0, 17.0)"><rect fill="none" height="100.0" stroke="black" width="54.0"></rect><foreignobject style="overflow:visible;" y="-12.5"><div style="font-size:8px;height:100%;width:100%;" xmlns="http://www.w3.org/1999/xhtml">Tallystrix</div></foreignobject><g id="Tallystrix_stat" transform="translate(12.0, 44.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">stat</div></foreignobject></g><g id="Tallystrix_poke" transform="translate(12.0, 12.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">poke</div></foreignobject></g><g id="Tallystrix_alert" transform="translate(12.0, 76.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">alert</div></foreignobject></g></g><g id="Chronon" transform="translate(12.0, 17.0)"><rect fill="none" height="36.0" stroke="black" width="54.0"></rect><foreignobject style="overflow:visible;" y="-12.5"><div style="font-size:8px;height:100%;width:100%;" xmlns="http://www.w3.org/1999/xhtml">Chronon</div></foreignobject><g id="Chronon_out" transform="translate(12.0, 12.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">out</div></foreignobject></g></g><g id="Claxxus" transform="translate(180.0, 81.0)"><rect fill="none" height="36.0" stroke="black" width="54.0"></rect><foreignobject style="overflow:visible;" y="-12.5"><div style="font-size:8px;height:100%;width:100%;" xmlns="http://www.w3.org/1999/xhtml">Claxxus</div></foreignobject><g id="Claxxus_in" transform="translate(12.0, 12.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">in</div></foreignobject></g></g><g id="Randomius" transform="translate(12.0, 78.0)"><rect fill="none" height="36.0" stroke="black" width="54.0"></rect><foreignobject style="overflow:visible;" y="-12.5"><div style="font-size:8px;height:100%;width:100%;" xmlns="http://www.w3.org/1999/xhtml">Randomius</div></foreignobject><g id="Randomius_out" transform="translate(12.0, 12.0)"><rect fill="none" height="12.0" stroke="black" width="30.0"></rect><foreignobject height="12.0" style="overflow:visible;" width="30.0"><div style="align-items:center;display:flex;font-size:8px;height:100%;justify-content:center;width:100%;" xmlns="http://www.w3.org/1999/xhtml">out</div></foreignobject></g></g><g id="Randomius_out_Tallystrix_stat"><path d="M54.0,96.0L81.0,96.0 81.0,67.0 108.0,67.0" fill="none" marker-end="url(#edgeShapeMarker)" stroke="black"></path></g><g id="Chronon_out_Tallystrix_poke"><path d="M54.0,35.0L108.0,35.0" fill="none" marker-end="url(#edgeShapeMarker)" stroke="black"></path></g><g id="Tallystrix_alert_Claxxus_in"><path d="M138.0,99.0L192.0,99.0" fill="none" marker-end="url(#edgeShapeMarker)" stroke="black"></path></g></g></svg>
<p>Tallystrix takes only numbers, <code>"abc1000"</code> was not acceptable.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<div class="sourceClojure">
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb26-1">(flow/stop asynctopolis)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb27-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb28-1">(Thread/sleep <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
THREAD OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>Tallystrix transitioning :clojure.core.async.flow/stop
Randomius transitioning :clojure.core.async.flow/stop
Chronon transitioning :clojure.core.async.flow/stop
Talon, rest!
Chronon rests.
Claxxus transitioning :clojure.core.async.flow/stop
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb30-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span></span></code></pre></div>
</div>
<p>Icarus realized that Flow is a library for building concurrent, event-driven systems out of simple, communication-free functions. Processes connect through channels. You define the structure as a directed graph. Flow takes care of orchestration. Flows are data-driven, easy to inspect, reason about and visualize. Then he wondered just how high could he fly?</p>
<p>Happy flowing, and keep your feathers waxed!</p>
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/src/core/async/flow/example/before_his_wings_melted.clj">src/core/async/flow/example/before_his_wings_melted.clj</a></small></small></pre></div>


</section>

 ]]></description>
  <guid>https://clojurecivitas.github.io/core/async/flow/example/before_his_wings_melted.html</guid>
  <pubDate>Thu, 01 May 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Stats and Signals in the Flow of Asynctopolis</title>
  <dc:creator>Alex Miller</dc:creator>
  <dc:creator>Timothy Pratley</dc:creator>
  <link>https://clojurecivitas.github.io/core/async/flow/example/asynctopolis.html</link>
  <description><![CDATA[ 





<style></style>
<style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="asynctopolis_files/md-default0.js" type="text/javascript"></script>
<script src="asynctopolis_files/md-default1.js" type="text/javascript"></script>
<script src="asynctopolis_files/plotly2.js" type="text/javascript"></script>
<p>Welcome to Asynctopolis, a city where agents act on signals, not orders. Here, unseen agents pass messages, track patterns, and sound alarms when the moment calls. No one oversees the whole city, yet everything flows.</p>
<p>Beneath it all hums the Core Async Flow, a network of processes working together without ever meeting. Today, you’ll observe the agents of this asynchronous allegiance.</p>
<p>This code is adapted from <a href="https://github.com/puredanger/flow-example">Alex’s stats flow example</a>, used for his video walkthrough.</p>
<iframe allowfullscreen="allowfullscreen" src="https://www.youtube.com/embed/lXFwf3O4BVY" width="100%"></iframe>
<p>In Asynctopolis, there are often races to print messages, which for the sake of clarity we shall serialize.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb1-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> println* </span>[&amp; args]</span>
<span id="cb1-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">locking</span> println*</span>
<span id="cb1-3">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">apply</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">println</span> args)))</span></code></pre></div>
</div>
<p>Above us in the sky flies Talon the Stat Hawk. Sleek, silent, and tireless. With a glint in his eye and wings tipped in probability, he soars into the realm of the unknowable every half second, returning with a fresh stat clutched in his talons. He doesn’t question, he doesn’t falter. He circles over the range from min to max, plucks a random integer, and drops it onto a channel without ceremony.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb2-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> Talon</span></span>
<span id="cb2-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Generates a random value between min (inclusive) and max (exclusive)</span></span>
<span id="cb2-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  and writes it to out chan, waiting wait ms between until running becomes false."</span></span>
<span id="cb2-4">  [out <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">min</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">max</span> wait flying]</span>
<span id="cb2-5">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@flying</span></span>
<span id="cb2-6">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">val</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">+</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">min</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">rand-int</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">max</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">min</span>)))]</span>
<span id="cb2-7">      (println* <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SQUARK:"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">val</span>)</span>
<span id="cb2-8">      (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (a/&gt;!! out <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">val</span>)</span>
<span id="cb2-9">        (Thread/sleep ^<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">long</span> wait)</span>
<span id="cb2-10">        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reset!</span> flying <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>)))))</span></code></pre></div>
</div>
<p>Born of wind and randomness, Talon is no ordinary bird. He executes his mission with the rhythm and the grace of chance incarnate. Talon embodies an ongoing loop. An autonomous creature of purpose, relentless and unthinking. To be a process is to endure. Ever watchful, speaking in channels.</p>
<p>Fly Talon! Collect samples. Let’s see what distribution you bring.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb3-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [c (a/chan)</span>
<span id="cb3-2">      flying (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">atom</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span>)</span>
<span id="cb3-3">      n <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>]</span>
<span id="cb3-4">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">future</span> (Talon c <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> flying))</span>
<span id="cb3-5">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [samples (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vec</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeatedly</span> n (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [] (a/&lt;!! c))))]</span>
<span id="cb3-6">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reset!</span> flying <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>)</span>
<span id="cb3-7">    (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;</span> (tc/dataset {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:index</span>  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">range</span> n)</span>
<span id="cb3-8">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:sample</span> samples})</span>
<span id="cb3-9">        (plotly/base {:=x     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:index</span></span>
<span id="cb3-10">                      :=y     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:sample</span></span>
<span id="cb3-11">                      :=title <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The prey of Talon"</span>})</span>
<span id="cb3-12">        (plotly/layer-point))))</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>SQUARK: 4
SQUARK: 3
SQUARK: 10
SQUARK: 2
SQUARK: 2
SQUARK: 1
SQUARK: 11
SQUARK: 10
SQUARK: 3
SQUARK: 7
SQUARK: 10
SQUARK: 2
SQUARK: 3
SQUARK: 1
SQUARK: 2
SQUARK: 6
SQUARK: 10
SQUARK: 3
SQUARK: 6
SQUARK: 10
SQUARK: 7
</code></pre>
</div>
</div>
<div style="height:auto;width:100%;"><script>Plotly.newPlot(document.currentScript.parentElement,
               [{"y":[4,3,10,2,2,1,11,10,3,7,10,2,3,1,2,6,10,3,6,10],"r":null,"name":"","fill":null,"mode":"markers","width":null,"type":"scatter","theta":null,"z":null,"lon":null,"lat":null,"x":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"text":null}], {"width":500,"height":400,"margin":{"t":25},"automargin":false,"plot_bgcolor":"rgb(235,235,235)","xaxis":{"gridcolor":"rgb(255,255,255)","title":"index","showgrid":true},"yaxis":{"gridcolor":"rgb(255,255,255)","title":"sample","showgrid":true},"title":"The prey of Talon"}, {});</script></div>
<p>You have sampled fairly, Talon.</p>
<p>Talon operates at the behest of the city’s Generator.</p>
<section id="meet-randomius-maximus-the-generator" class="level2">
<h2 class="anchored" data-anchor-id="meet-randomius-maximus-the-generator">Meet Randomius Maximus, the Generator</h2>
<p>In a stone tower at the edge of the async city lives Randomius Maximus. Robed in numbers, crowned with entropy, keeper of the unceasing stream. He does not wander. He does not speak. He gestures, and Talon flies.</p>
<p>With a sweep of his hand, he dispatches his hawk to gather truths from the swirling chaos. Min and Max are his decree. Wait is his tempo. As long as his flow runs, the stats will come.</p>
<p>To be a true citizen of Asynctopolis is to be known as a process. To follow the sacred cycle of Vita Processus: Describe your duties. Initialize your station. Transition with order. Transform with purpose.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb5-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> Randomius</span></span>
<span id="cb5-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source proc for random stats"</span></span>
<span id="cb5-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; describe</span></span>
<span id="cb5-4">  ([]</span>
<span id="cb5-5">   (println* <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I am Randomius, I take numbers from Talon and send them out."</span>)</span>
<span id="cb5-6">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:params</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span>  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Min value to generate"</span></span>
<span id="cb5-7">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span>  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Max value to generate"</span></span>
<span id="cb5-8">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time in ms to wait between generating"</span>}</span>
<span id="cb5-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:outs</span>   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Output channel for stats"</span>}})</span>
<span id="cb5-10"></span>
<span id="cb5-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; init</span></span>
<span id="cb5-12">  ([args]</span>
<span id="cb5-13">   (println* <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Randomius initialing"</span>)</span>
<span id="cb5-14">   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assoc</span> args</span>
<span id="cb5-15">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/in-ports</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span> (a/chan <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)}</span>
<span id="cb5-16">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:flying</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">atom</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>)))</span>
<span id="cb5-17"></span>
<span id="cb5-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; transition</span></span>
<span id="cb5-19">  ([{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:keys</span> [<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">min</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">max</span> wait flying clojure.core.async.flow/in-ports] <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:as</span> state} transition]</span>
<span id="cb5-20">   (println* <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Randomius transitioning"</span> transition)</span>
<span id="cb5-21">   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> transition</span>
<span id="cb5-22">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/resume</span></span>
<span id="cb5-23">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb5-24">       (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">when</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@flying</span>)</span>
<span id="cb5-25">         (println* <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Talon, set flight!"</span>)</span>
<span id="cb5-26">         (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reset!</span> flying <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span>)</span>
<span id="cb5-27">         (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">future</span> (Talon (<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span> in-ports) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">min</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">max</span> wait flying)))</span>
<span id="cb5-28">       state)</span>
<span id="cb5-29"></span>
<span id="cb5-30">     (<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/pause</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/stop</span>)</span>
<span id="cb5-31">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb5-32">       (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">when</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@flying</span></span>
<span id="cb5-33">         (println* <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Talon, rest!"</span>)</span>
<span id="cb5-34">         (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reset!</span> flying <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>))</span>
<span id="cb5-35">       state)))</span>
<span id="cb5-36"></span>
<span id="cb5-37">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; transform</span></span>
<span id="cb5-38">  ([state input-id msg]</span>
<span id="cb5-39">   (println* <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Randomius transform"</span> msg <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"from"</span> input-id <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span>)</span>
<span id="cb5-40">   [state {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span> [msg]}]))</span></code></pre></div>
</div>
<p>Randomius, describe your duties!</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb6-1">(Randomius)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>I am Randomius, I take numbers from Talon and send them out.
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb8-1">{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:params</span></span>
<span id="cb8-2"> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Min value to generate"</span>,</span>
<span id="cb8-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Max value to generate"</span>,</span>
<span id="cb8-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time in ms to wait between generating"</span>},</span>
<span id="cb8-5"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:outs</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Output channel for stats"</span>}}</span></code></pre></div>
</div>
<p>Initialize your station!</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb9-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> state</span></span>
<span id="cb9-2">  (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">atom</span> (Randomius {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb9-3">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span>  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb9-4">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>})))</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>Randomius initialing
</code></pre>
</div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb11-1">^<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:kind/println</span></span>
<span id="cb11-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@state</span></span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb12-1">{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/in-ports</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span> #object [ManyToManyChannel]}, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:flying</span> #object[clojure.lang.Atom <span class="bn" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x1ecff631</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:status</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:ready</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:val</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>}]}</span></code></pre></div>
</div>
<p>Transition with order.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb13-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">swap!</span> state Randomius <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/resume</span>)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>Randomius transitioning :clojure.core.async.flow/resume
Talon, set flight!
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb15-1">{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb15-2"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,</span>
<span id="cb15-3"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb15-4"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/in-ports</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span> #object [ManyToManyChannel]},</span>
<span id="cb15-5"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:flying</span> #&lt;Atom<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@1ecff631:</span> true&gt;}</span></code></pre></div>
</div>
<p>Talon is flying.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb16-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-&gt;</span> (<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/in-ports</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@state</span>)</span>
<span id="cb16-2">    (<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span>)</span>
<span id="cb16-3">    (a/&lt;!!))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb17-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span></span></code></pre></div>
</div>
<p>Transform with purpose.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb18-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">swap!</span> state</span>
<span id="cb18-2">       (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fn</span> [state]</span>
<span id="cb18-3">         (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [[state step] (Randomius state <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I transform, therefore I am"</span>)]</span>
<span id="cb18-4">           (println* step)</span>
<span id="cb18-5">           state)))</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>Randomius transform I transform, therefore I am from :stat to :out
{:out [I transform, therefore I am]}
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb20-1">{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb20-2"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,</span>
<span id="cb20-3"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb20-4"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/in-ports</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span> #object [ManyToManyChannel]},</span>
<span id="cb20-5"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:flying</span> #&lt;Atom<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@1ecff631:</span> true&gt;}</span></code></pre></div>
</div>
<p>I see you wish to send a missive to <code>out</code>. Be wary in the future, send only numbers to those who seek stats.</p>
<p>Well done, Randomius. You are a true citizen. Now rest.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb21-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">swap!</span> state Randomius <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/stop</span>)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>Randomius transitioning :clojure.core.async.flow/stop
Talon, rest!
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb23-1">{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb23-2"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,</span>
<span id="cb23-3"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb23-4"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/in-ports</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span> #object [ManyToManyChannel]},</span>
<span id="cb23-5"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:flying</span> #&lt;Atom<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@1ecff631:</span> false&gt;}</span></code></pre></div>
</div>
</section>
<section id="meet-tallystrix-the-whispering-aggregator" class="level2">
<h2 class="anchored" data-anchor-id="meet-tallystrix-the-whispering-aggregator">Meet Tallystrix, the Whispering Aggregator</h2>
<p>In the marble shadows of the Hall of Measures, Tallystrix gathers numbers in her obsidian basin. She listens not to the sky, but to the <code>stat</code> channel, where strange numbers arrive without explanation. She lets them settle, silent and still.</p>
<p>She says nothing—until the bell rings. Then, with a tilt of the bowl and a whisper of reckoning, she releases the average to those who asked.</p>
<p>If a number is too high or too low, she sends a warning, a flare in the async night.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb24-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> Tallystrix</span></span>
<span id="cb24-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; describe</span></span>
<span id="cb24-3">  ([]</span>
<span id="cb24-4">   (println* <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I am Tallystrix, I take from stats or poke, and put to alert and notify"</span>)</span>
<span id="cb24-5">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:params</span>   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Min value, alert if lower"</span></span>
<span id="cb24-6">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Max value, alert if higher"</span>}</span>
<span id="cb24-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:ins</span>      {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Channel to receive stat values"</span></span>
<span id="cb24-8">               <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:poke</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Channel to poke when it is time to report a window of data to the log"</span>}</span>
<span id="cb24-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:outs</span>     {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alert</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Notify of value out of range {:val value, :error :high|:low"</span>}</span>
<span id="cb24-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:workload</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:compute</span>})</span>
<span id="cb24-11"></span>
<span id="cb24-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; init</span></span>
<span id="cb24-13">  ([args]</span>
<span id="cb24-14">   (println* <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tallystrix initializing"</span>)</span>
<span id="cb24-15">   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assoc</span> args <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:vals</span> []))</span>
<span id="cb24-16"></span>
<span id="cb24-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; transition</span></span>
<span id="cb24-18">  ([state transition]</span>
<span id="cb24-19">   (println* <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tallystrix transitioning"</span> transition)</span>
<span id="cb24-20">   state)</span>
<span id="cb24-21"></span>
<span id="cb24-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; transform</span></span>
<span id="cb24-23">  ([{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:keys</span> [<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">min</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">max</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vals</span>] <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:as</span> state} input-id msg]</span>
<span id="cb24-24">   (println* <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tallystrix transforming"</span> input-id msg)</span>
<span id="cb24-25">   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> input-id</span>
<span id="cb24-26">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [state' (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assoc</span> state <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:vals</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">conj</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vals</span> msg))</span>
<span id="cb24-27">                 msgs (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">cond</span></span>
<span id="cb24-28">                        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&lt;</span> msg <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">min</span>) {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alert</span> [{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:val</span> msg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:error</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:low</span>}]}</span>
<span id="cb24-29">                        (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&lt;</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">max</span> msg) {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alert</span> [{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:val</span> msg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:error</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:high</span>}]}</span>
<span id="cb24-30">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span>)]</span>
<span id="cb24-31">             [state' msgs])</span>
<span id="cb24-32">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:poke</span> [(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assoc</span> state <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:vals</span> [])</span>
<span id="cb24-33">            {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/report</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">empty?</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vals</span>)</span>
<span id="cb24-34">                                               [{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>}]</span>
<span id="cb24-35">                                               [{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:avg</span>   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">/</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">double</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reduce</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">+</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vals</span>)) (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">count</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vals</span>))</span>
<span id="cb24-36">                                                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">count</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">vals</span>)}])}])))</span></code></pre></div>
</div>
<p>Tallystrix, what messages have you?</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb25-1">(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">let</span> [state {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:vals</span> []}</span>
<span id="cb25-2">      [state' msgs'] (Tallystrix state <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)]</span>
<span id="cb25-3">  msgs')</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>Tallystrix transforming :stat 7
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb27-1">{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alert</span> [{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:val</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:error</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:high</span>}]}</span></code></pre></div>
</div>
<p>Well alerted. Your transform is sound.</p>
</section>
<section id="meet-chronon-the-scheduler-of-bells" class="level2">
<h2 class="anchored" data-anchor-id="meet-chronon-the-scheduler-of-bells">Meet Chronon, the Scheduler of Bells</h2>
<p>In a chamber just outside the Hall of Measures, Chronon stands beside a great brass bell. Every few thousand milliseconds, he raises his staff and strikes it. A chime ripples through the channels and stirs the Aggregator within.</p>
<p>He does not wait for thanks. He does not miss a beat. His duty is rhythm. His gift is regularity. And with every ring, the silence grows wiser.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb28-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> Chronon</span></span>
<span id="cb28-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; describe</span></span>
<span id="cb28-3">  ([]</span>
<span id="cb28-4">   (println* <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I am Chronon, I poke out periodically"</span>)</span>
<span id="cb28-5">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:params</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time to wait between pokes"</span>}</span>
<span id="cb28-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:outs</span>   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Poke channel, will send true when the alarm goes off"</span>}})</span>
<span id="cb28-7"></span>
<span id="cb28-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; init</span></span>
<span id="cb28-9">  ([args]</span>
<span id="cb28-10">   (println* <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chronon initializing"</span>)</span>
<span id="cb28-11">   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assoc</span> args</span>
<span id="cb28-12">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/in-ports</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alarm</span> (a/chan <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)}</span>
<span id="cb28-13">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:running</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">atom</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>)))</span>
<span id="cb28-14"></span>
<span id="cb28-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; transition</span></span>
<span id="cb28-16">  ([{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:keys</span> [wait running clojure.core.async.flow/in-ports] <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:as</span> state} transition]</span>
<span id="cb28-17">   (println* <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chronon transitioning"</span> transition)</span>
<span id="cb28-18">   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> transition</span>
<span id="cb28-19">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/resume</span></span>
<span id="cb28-20">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb28-21">       (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">when</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@running</span>)</span>
<span id="cb28-22">         (println* <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chronon running"</span>)</span>
<span id="cb28-23">         (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reset!</span> running <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span>)</span>
<span id="cb28-24">         (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">future</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@running</span></span>
<span id="cb28-25">                   (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (a/&gt;!! (<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alarm</span> in-ports) <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span>)</span>
<span id="cb28-26">                     (Thread/sleep ^<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">long</span> wait)</span>
<span id="cb28-27">                     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reset!</span> running <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>)))))</span>
<span id="cb28-28">       state)</span>
<span id="cb28-29"></span>
<span id="cb28-30">     (<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/pause</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:clojure.core.async.flow/stop</span>)</span>
<span id="cb28-31">     (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb28-32">       (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">when</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@running</span></span>
<span id="cb28-33">         (println* <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chronon rests."</span>)</span>
<span id="cb28-34">         (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reset!</span> running <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>))</span>
<span id="cb28-35">       state)))</span>
<span id="cb28-36"></span>
<span id="cb28-37">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; transform</span></span>
<span id="cb28-38">  ([state input-id msg]</span>
<span id="cb28-39">   (println* <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chronon transforms"</span> input-id msg <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span>)</span>
<span id="cb28-40">   [state {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span> [msg]}]))</span></code></pre></div>
</div>
<p>Chronon has no familiar to do his work, and listens only to himself.</p>
</section>
<section id="meet-claxxus-the-notifier-the-herald" class="level2">
<h2 class="anchored" data-anchor-id="meet-claxxus-the-notifier-the-herald">Meet Claxxus, the Notifier, the Herald</h2>
<p>At the city’s edge stands Claxxus, cloaked in red and brass, eyes ever on the flame that signals alarm. He does not gather, he does not measure, he only declares.</p>
<p>When Tallystrix sends a flare, Claxxus steps forward to speak. He raises his voice for all to hear: “Out of range!”</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb29-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">defn</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> Claxxus</span></span>
<span id="cb29-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; describe</span></span>
<span id="cb29-3">  ([]</span>
<span id="cb29-4">   (println* <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I am Claxxus, I shout what I hear from in"</span>)</span>
<span id="cb29-5">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:params</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:prefix</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Log message prefix"</span>}</span>
<span id="cb29-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:ins</span>    {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:in</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Channel to receive messages"</span>}})</span>
<span id="cb29-7"></span>
<span id="cb29-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; init</span></span>
<span id="cb29-9">  ([state]</span>
<span id="cb29-10">   (println* <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Claxxus initializing"</span>)</span>
<span id="cb29-11">   state)</span>
<span id="cb29-12"></span>
<span id="cb29-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; transition</span></span>
<span id="cb29-14">  ([state transition]</span>
<span id="cb29-15">   (println* <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Claxxus transitioning"</span> transition)</span>
<span id="cb29-16">   state)</span>
<span id="cb29-17"></span>
<span id="cb29-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;; transform</span></span>
<span id="cb29-19">  ([{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:keys</span> [prefix] <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:as</span> state} input-id msg]</span>
<span id="cb29-20">   (println* <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Claxxus transforming"</span> input-id msg)</span>
<span id="cb29-21">   (println* prefix msg)</span>
<span id="cb29-22">   [state <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span>]))</span></code></pre></div>
</div>
<p>Cursed to know only how to shout.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb30-1">(Claxxus {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:prefix</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ERROR:"</span>} <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:in</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Out of range!"</span>)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>Claxxus transforming :in Out of range!
ERROR: Out of range!
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb32-1">[{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:prefix</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ERROR:"</span>} <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span>]</span></code></pre></div>
</div>
</section>
<section id="the-asynchronous-allegiance" class="level2">
<h2 class="anchored" data-anchor-id="the-asynchronous-allegiance">The Asynchronous Allegiance</h2>
<p>All these roles are bound together in a flow, a living graph of asynchronous collaboration.</p>
<p>Randomius Maximus generates. Chronon keeps the beat. Tallystrix listens and computes. Claxxus alerts.</p>
<p>They never meet. They never speak. Yet they move as one.</p>
<p>This is an allegiance, asynchronous and unseen. Held together by channels, purpose, and trust.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb33-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> config</span></span>
<span id="cb33-2">  {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:procs</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Randomius</span>  {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:args</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>}</span>
<span id="cb33-3">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:proc</span> (flow/process <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">#'Randomius</span>)}</span>
<span id="cb33-4">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Tallystrix</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:args</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>}</span>
<span id="cb33-5">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:proc</span> (flow/process <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">#'Tallystrix</span>)}</span>
<span id="cb33-6">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Chronon</span>    {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:args</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3000</span>}</span>
<span id="cb33-7">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:proc</span> (flow/process <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">#'Chronon</span>)}</span>
<span id="cb33-8">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Claxxus</span>    {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:args</span>      {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:prefix</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alert: "</span>}</span>
<span id="cb33-9">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:proc</span>      (flow/process <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">#'Claxxus</span>)</span>
<span id="cb33-10">                        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:chan-opts</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:in</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buf-or-n</span> (a/sliding-buffer <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)}}}}</span>
<span id="cb33-11">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:conns</span> [[[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Randomius</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span>] [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Tallystrix</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span>]]</span>
<span id="cb33-12">           [[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Chronon</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span>] [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Tallystrix</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:poke</span>]]</span>
<span id="cb33-13">           [[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Tallystrix</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alert</span>] [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Claxxus</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:in</span>]]]})</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>I am Randomius, I take numbers from Talon and send them out.
I am Tallystrix, I take from stats or poke, and put to alert and notify
I am Chronon, I poke out periodically
I am Claxxus, I shout what I hear from in
</code></pre>
</div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb35-1">^<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:kind/hiccup</span></span>
<span id="cb35-2">[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:iframe</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:width</span>  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"100%"</span></span>
<span id="cb35-3">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:height</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"600px"</span></span>
<span id="cb35-4">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:srcdoc</span> (flow-static/template config <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span>)}]</span></code></pre></div>
</div>
<iframe height="600px" srcdoc="<html><head><title>Flow Chart</title><script>/*! LeaderLine v1.0.3 (c) anseki https://anseki.github.io/leader-line/ */
var LeaderLine=function(){&quot;use strict&quot;;var e,t,n,a,i,o,l,r,s,u,h,p,c,d=&quot;leader-line&quot;,f=1,y=2,m=3,S=4,g={top:f,right:y,bottom:m,left:S},_=1,v=2,E=3,x=4,b=5,k={straight:_,arc:v,fluid:E,magnet:x,grid:b},w=&quot;behind&quot;,O=d+&quot;-defs&quot;,M='<svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot; id=&quot;leader-line-defs&quot;><style><![CDATA[.leader-line{position:absolute;overflow:visible!important;pointer-events:none!important;font-size:16px}#leader-line-defs{width:0;height:0;position:absolute;left:0;top:0}.leader-line-line-path{fill:none}.leader-line-mask-bg-rect{fill:#fff}.leader-line-caps-mask-anchor,.leader-line-caps-mask-marker-shape{fill:#000}.leader-line-caps-mask-anchor{stroke:#000}.leader-line-caps-mask-line,.leader-line-plugs-face{stroke:transparent}.leader-line-line-mask-shape{stroke:#fff}.leader-line-line-outline-mask-shape{stroke:#000}.leader-line-plug-mask-shape{fill:#fff;stroke:#000}.leader-line-plug-outline-mask-shape{fill:#000;stroke:#fff}.leader-line-areaAnchor{position:absolute;overflow:visible!important}]]></style><defs><circle id=&quot;leader-line-disc&quot; cx=&quot;0&quot; cy=&quot;0&quot; r=&quot;5&quot;/><rect id=&quot;leader-line-square&quot; x=&quot;-5&quot; y=&quot;-5&quot; width=&quot;10&quot; height=&quot;10&quot;/><polygon id=&quot;leader-line-arrow1&quot; points=&quot;-8,-8 8,0 -8,8 -5,0&quot;/><polygon id=&quot;leader-line-arrow2&quot; points=&quot;-4,-8 4,0 -4,8 -7,5 -2,0 -7,-5&quot;/><polygon id=&quot;leader-line-arrow3&quot; points=&quot;-4,-5 8,0 -4,5&quot;/><g id=&quot;leader-line-hand&quot;><path style=&quot;fill: #fcfcfc&quot; d=&quot;M9.19 11.14h4.75c1.38 0 2.49-1.11 2.49-2.49 0-.51-.15-.98-.41-1.37h1.3c1.38 0 2.49-1.11 2.49-2.49s-1.11-2.53-2.49-2.53h1.02c1.38 0 2.49-1.11 2.49-2.49s-1.11-2.49-2.49-2.49h14.96c1.37 0 2.49-1.11 2.49-2.49s-1.11-2.49-2.49-2.49H16.58C16-9.86 14.28-11.14 9.7-11.14c-4.79 0-6.55 3.42-7.87 4.73H-2.14v13.23h3.68C3.29 9.97 5.47 11.14 9.19 11.14L9.19 11.14Z&quot;/><path style=&quot;fill: black&quot; d=&quot;M13.95 12c1.85 0 3.35-1.5 3.35-3.35 0-.17-.02-.34-.04-.51h.07c1.85 0 3.35-1.5 3.35-3.35 0-.79-.27-1.51-.72-2.08 1.03-.57 1.74-1.67 1.74-2.93 0-.59-.16-1.15-.43-1.63h12.04c1.85 0 3.35-1.5 3.35-3.35 0-1.85-1.5-3.35-3.35-3.35H17.2C16.26-10.93 13.91-12 9.7-12 5.36-12 3.22-9.4 1.94-7.84c0 0-.29.33-.5.57-.63 0-3.58 0-3.58 0C-2.61-7.27-3-6.88-3-6.41v13.23c0 .47.39.86.86.86 0 0 2.48 0 3.2 0C2.9 10.73 5.29 12 9.19 12L13.95 12ZM9.19 10.28c-3.46 0-5.33-1.05-6.9-3.87-.15-.27-.44-.44-.75-.44 0 0-1.81 0-2.82 0V-5.55c1.06 0 3.11 0 3.11 0 .25 0 .44-.06.61-.25l.83-.95c1.23-1.49 2.91-3.53 6.43-3.53 3.45 0 4.9.74 5.57 1.72h-4.3c-.48 0-.86.38-.86.86s.39.86.86.86h22.34c.9 0 1.63.73 1.63 1.63 0 .9-.73 1.63-1.63 1.63H15.83c-.48 0-.86.38-.86.86 0 .47.39.86.86.86h2.52c.9 0 1.63.73 1.63 1.63s-.73 1.63-1.63 1.63h-3.12c-.48 0-.86.38-.86.86 0 .47.39.86.86.86h2.11c.88 0 1.63.76 1.63 1.67 0 .9-.73 1.63-1.63 1.63h-3.2c-.48 0-.86.39-.86.86 0 .47.39.86.86.86h1.36c.05.16.09.34.09.51 0 .9-.73 1.63-1.63 1.63C13.95 10.28 9.19 10.28 9.19 10.28Z&quot;/></g><g id=&quot;leader-line-crosshair&quot;><path d=&quot;M0-78.97c-43.54 0-78.97 35.43-78.97 78.97 0 43.54 35.43 78.97 78.97 78.97s78.97-35.43 78.97-78.97C78.97-43.54 43.55-78.97 0-78.97ZM76.51-1.21h-9.91v-9.11h-2.43v9.11h-11.45c-.64-28.12-23.38-50.86-51.5-51.5V-64.17h9.11V-66.6h-9.11v-9.91C42.46-75.86 75.86-42.45 76.51-1.21ZM-1.21-30.76h-9.11v2.43h9.11V-4.2c-1.44.42-2.57 1.54-2.98 2.98H-28.33v-9.11h-2.43v9.11H-50.29C-49.65-28-27.99-49.65-1.21-50.29V-30.76ZM-30.76 1.21v9.11h2.43v-9.11H-4.2c.42 1.44 1.54 2.57 2.98 2.98v24.13h-9.11v2.43h9.11v19.53C-27.99 49.65-49.65 28-50.29 1.21H-30.76ZM1.22 30.75h9.11v-2.43h-9.11V4.2c1.44-.42 2.56-1.54 2.98-2.98h24.13v9.11h2.43v-9.11h19.53C49.65 28 28 49.65 1.22 50.29V30.75ZM30.76-1.21v-9.11h-2.43v9.11H4.2c-.42-1.44-1.54-2.56-2.98-2.98V-28.33h9.11v-2.43h-9.11V-50.29C28-49.65 49.65-28 50.29-1.21H30.76ZM-1.21-76.51v9.91h-9.11v2.43h9.11v11.45c-28.12.64-50.86 23.38-51.5 51.5H-64.17v-9.11H-66.6v9.11h-9.91C-75.86-42.45-42.45-75.86-1.21-76.51ZM-76.51 1.21h9.91v9.11h2.43v-9.11h11.45c.64 28.12 23.38 50.86 51.5 51.5v11.45h-9.11v2.43h9.11v9.91C-42.45 75.86-75.86 42.45-76.51 1.21ZM1.22 76.51v-9.91h9.11v-2.43h-9.11v-11.45c28.12-.64 50.86-23.38 51.5-51.5h11.45v9.11h2.43v-9.11h9.91C75.86 42.45 42.45 75.86 1.22 76.51Z&quot;/><path d=&quot;M0 83.58-7.1 96 7.1 96Z&quot;/><path d=&quot;M0-83.58 7.1-96-7.1-96&quot;/><path d=&quot;M83.58 0 96 7.1 96-7.1Z&quot;/><path d=&quot;M-83.58 0-96-7.1-96 7.1Z&quot;/></g></defs></svg>',I={disc:{elmId:&quot;leader-line-disc&quot;,noRotate:!0,bBox:{left:-5,top:-5,width:10,height:10,right:5,bottom:5},widthR:2.5,heightR:2.5,bCircle:5,sideLen:5,backLen:5,overhead:0,outlineBase:1,outlineMax:4},square:{elmId:&quot;leader-line-square&quot;,noRotate:!0,bBox:{left:-5,top:-5,width:10,height:10,right:5,bottom:5},widthR:2.5,heightR:2.5,bCircle:5,sideLen:5,backLen:5,overhead:0,outlineBase:1,outlineMax:4},arrow1:{elmId:&quot;leader-line-arrow1&quot;,bBox:{left:-8,top:-8,width:16,height:16,right:8,bottom:8},widthR:4,heightR:4,bCircle:8,sideLen:8,backLen:8,overhead:8,outlineBase:2,outlineMax:1.5},arrow2:{elmId:&quot;leader-line-arrow2&quot;,bBox:{left:-7,top:-8,width:11,height:16,right:4,bottom:8},widthR:2.75,heightR:4,bCircle:8,sideLen:8,backLen:7,overhead:4,outlineBase:1,outlineMax:1.75},arrow3:{elmId:&quot;leader-line-arrow3&quot;,bBox:{left:-4,top:-5,width:12,height:10,right:8,bottom:5},widthR:3,heightR:2.5,bCircle:8,sideLen:5,backLen:4,overhead:8,outlineBase:1,outlineMax:2.5},hand:{elmId:&quot;leader-line-hand&quot;,bBox:{left:-3,top:-12,width:40,height:24,right:37,bottom:12},widthR:10,heightR:6,bCircle:37,sideLen:12,backLen:3,overhead:37},crosshair:{elmId:&quot;leader-line-crosshair&quot;,noRotate:!0,bBox:{left:-96,top:-96,width:192,height:192,right:96,bottom:96},widthR:48,heightR:48,bCircle:96,sideLen:96,backLen:96,overhead:0}},C={behind:w,disc:&quot;disc&quot;,square:&quot;square&quot;,arrow1:&quot;arrow1&quot;,arrow2:&quot;arrow2&quot;,arrow3:&quot;arrow3&quot;,hand:&quot;hand&quot;,crosshair:&quot;crosshair&quot;},L={disc:&quot;disc&quot;,square:&quot;square&quot;,arrow1:&quot;arrow1&quot;,arrow2:&quot;arrow2&quot;,arrow3:&quot;arrow3&quot;,hand:&quot;hand&quot;,crosshair:&quot;crosshair&quot;},A=[f,y,m,S],V=&quot;auto&quot;,P={x:&quot;left&quot;,y:&quot;top&quot;,width:&quot;width&quot;,height:&quot;height&quot;},N=80,T=4,W=5,B=120,R=8,F=3.75,G=10,D=30,z=.5522847,j=.25*Math.PI,H=/^\s*(\-?[\d\.]+)\s*(\%)?\s*$/,U=&quot;http://www.w3.org/2000/svg&quot;,Z=!!document.uniqueID,Y=!(!window.chrome||!window.chrome.webstore),X=&quot;MozAppearance&quot;in document.documentElement.style,q=&quot;-ms-scroll-limit&quot;in document.documentElement.style&amp;&amp;&quot;-ms-ime-align&quot;in document.documentElement.style&amp;&amp;!window.navigator.msPointerEnabled,Q=!window.chrome&amp;&amp;&quot;WebkitAppearance&quot;in document.documentElement.style,K=Z||q?.2:.1,J={path:E,lineColor:&quot;coral&quot;,lineSize:4,plugSE:[w,&quot;arrow1&quot;],plugSizeSE:[1,1],lineOutlineEnabled:!1,lineOutlineColor:&quot;indianred&quot;,lineOutlineSize:.25,plugOutlineEnabledSE:[!1,!1],plugOutlineSizeSE:[1,1]},$=(h={}.toString,p={}.hasOwnProperty.toString,c=p.call(Object),function(e){var t,n;return e&amp;&amp;&quot;[object Object]&quot;===h.call(e)&amp;&amp;(!(t=Object.getPrototypeOf(e))||(n=t.hasOwnProperty(&quot;constructor&quot;)&amp;&amp;t.constructor)&amp;&amp;&quot;function&quot;==typeof n&amp;&amp;p.call(n)===c)}),ee=Number.isFinite||function(e){return&quot;number&quot;==typeof e&amp;&amp;window.isFinite(e)},te=function(){var e,t={ease:[.25,.1,.25,1],linear:[0,0,1,1],&quot;ease-in&quot;:[.42,0,1,1],&quot;ease-out&quot;:[0,0,.58,1],&quot;ease-in-out&quot;:[.42,0,.58,1]},n=1e3/60/2,a=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame||function(e){setTimeout(e,n)},i=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame||function(e){clearTimeout(e)},o=Number.isFinite||function(e){return&quot;number&quot;==typeof e&amp;&amp;window.isFinite(e)},l=[],r=0;function s(){var t=Date.now(),o=!1;e&amp;&amp;(i.call(window,e),e=null),l.forEach(function(e){var a,i,l;if(e.framesStart){if((a=t-e.framesStart)>=e.duration&amp;&amp;e.count&amp;&amp;e.loopsLeft<=1)return l=e.frames[e.lastFrame=e.reverse?0:e.frames.length-1],e.frameCallback(l.value,!0,l.timeRatio,l.outputRatio),void(e.framesStart=null);if(a>e.duration){if(i=Math.floor(a/e.duration),e.count){if(i>=e.loopsLeft)return l=e.frames[e.lastFrame=e.reverse?0:e.frames.length-1],e.frameCallback(l.value,!0,l.timeRatio,l.outputRatio),void(e.framesStart=null);e.loopsLeft-=i}e.framesStart+=e.duration*i,a=t-e.framesStart}e.reverse&amp;&amp;(a=e.duration-a),l=e.frames[e.lastFrame=Math.round(a/n)],!1!==e.frameCallback(l.value,!1,l.timeRatio,l.outputRatio)?o=!0:e.framesStart=null}}),o&amp;&amp;(e=a.call(window,s))}function u(e,t){e.framesStart=Date.now(),null!=t&amp;&amp;(e.framesStart-=e.duration*(e.reverse?1-t:t)),e.loopsLeft=e.count,e.lastFrame=null,s()}return{add:function(e,a,i,o,s,h,p){var c,d,f,y,m,S,g,_,v,E,x,b,k,w=++r;function O(t,n){return{value:e(n),timeRatio:t,outputRatio:n}}if(&quot;string&quot;==typeof s&amp;&amp;(s=t[s]),e=e||function(){},i<n)d=[O(0,0),O(1,1)];else{if(f=n/i,d=[O(0,0)],0===s[0]&amp;&amp;0===s[1]&amp;&amp;1===s[2]&amp;&amp;1===s[3])for(m=f;m<=1;m+=f)d.push(O(m,m));else for(m=f,S=y=f/10;S<=1;S+=y)void 0,void 0,void 0,void 0,void 0,E=(v=(_=S)*_)*_,k=3*(x=1-_)*v,(g={x:(b=3*(x*x)*_)*s[0]+k*s[2]+E,y:b*s[1]+k*s[3]+E}).x>=m&amp;&amp;(d.push(O(g.x,g.y)),m+=f);d.push(O(1,1))}return c={animId:w,frameCallback:a,duration:i,count:o,frames:d,reverse:!!h},l.push(c),!1!==p&amp;&amp;u(c,p),w},remove:function(e){var t;l.some(function(n,a){return n.animId===e&amp;&amp;(t=a,n.framesStart=null,!0)})&amp;&amp;l.splice(t,1)},start:function(e,t,n){l.some(function(a){return a.animId===e&amp;&amp;(a.reverse=!!t,u(a,n),!0)})},stop:function(e,t){var n;return l.some(function(a){return a.animId===e&amp;&amp;(t?null!=a.lastFrame&amp;&amp;(n=a.frames[a.lastFrame].timeRatio):(n=(Date.now()-a.framesStart)/a.duration,a.reverse&amp;&amp;(n=1-n),n<0?n=0:n>1&amp;&amp;(n=1)),a.framesStart=null,!0)}),n},validTiming:function(e){return&quot;string&quot;==typeof e?t[e]:Array.isArray(e)&amp;&amp;[0,1,2,3].every(function(t){return o(e[t])&amp;&amp;e[t]>=0&amp;&amp;e[t]<=1})?[e[0],e[1],e[2],e[3]]:null}}}(),ne=function(e){e.SVGPathElement.prototype.getPathData&amp;&amp;e.SVGPathElement.prototype.setPathData||function(){var t={Z:&quot;Z&quot;,M:&quot;M&quot;,L:&quot;L&quot;,C:&quot;C&quot;,Q:&quot;Q&quot;,A:&quot;A&quot;,H:&quot;H&quot;,V:&quot;V&quot;,S:&quot;S&quot;,T:&quot;T&quot;,z:&quot;Z&quot;,m:&quot;m&quot;,l:&quot;l&quot;,c:&quot;c&quot;,q:&quot;q&quot;,a:&quot;a&quot;,h:&quot;h&quot;,v:&quot;v&quot;,s:&quot;s&quot;,t:&quot;t&quot;},n=function(e){this._string=e,this._currentIndex=0,this._endIndex=this._string.length,this._prevCommand=null,this._skipOptionalSpaces()},a=-1!==e.navigator.userAgent.indexOf(&quot;MSIE &quot;);n.prototype={parseSegment:function(){var e=this._string[this._currentIndex],n=t[e]?t[e]:null;if(null===n){if(null===this._prevCommand)return null;if(null===(n=(&quot;+&quot;===e||&quot;-&quot;===e||&quot;.&quot;===e||e>=&quot;0&quot;&amp;&amp;e<=&quot;9&quot;)&amp;&amp;&quot;Z&quot;!==this._prevCommand?&quot;M&quot;===this._prevCommand?&quot;L&quot;:&quot;m&quot;===this._prevCommand?&quot;l&quot;:this._prevCommand:null))return null}else this._currentIndex+=1;this._prevCommand=n;var a=null,i=n.toUpperCase();return&quot;H&quot;===i||&quot;V&quot;===i?a=[this._parseNumber()]:&quot;M&quot;===i||&quot;L&quot;===i||&quot;T&quot;===i?a=[this._parseNumber(),this._parseNumber()]:&quot;S&quot;===i||&quot;Q&quot;===i?a=[this._parseNumber(),this._parseNumber(),this._parseNumber(),this._parseNumber()]:&quot;C&quot;===i?a=[this._parseNumber(),this._parseNumber(),this._parseNumber(),this._parseNumber(),this._parseNumber(),this._parseNumber()]:&quot;A&quot;===i?a=[this._parseNumber(),this._parseNumber(),this._parseNumber(),this._parseArcFlag(),this._parseArcFlag(),this._parseNumber(),this._parseNumber()]:&quot;Z&quot;===i&amp;&amp;(this._skipOptionalSpaces(),a=[]),null===a||a.indexOf(null)>=0?null:{type:n,values:a}},hasMoreData:function(){return this._currentIndex<this._endIndex},peekSegmentType:function(){var e=this._string[this._currentIndex];return t[e]?t[e]:null},initialCommandIsMoveTo:function(){if(!this.hasMoreData())return!0;var e=this.peekSegmentType();return&quot;M&quot;===e||&quot;m&quot;===e},_isCurrentSpace:function(){var e=this._string[this._currentIndex];return e<=&quot; &quot;&amp;&amp;(&quot; &quot;===e||&quot;\n&quot;===e||&quot;\t&quot;===e||&quot;\r&quot;===e||&quot;\f&quot;===e)},_skipOptionalSpaces:function(){for(;this._currentIndex<this._endIndex&amp;&amp;this._isCurrentSpace();)this._currentIndex+=1;return this._currentIndex<this._endIndex},_skipOptionalSpacesOrDelimiter:function(){return!(this._currentIndex<this._endIndex&amp;&amp;!this._isCurrentSpace()&amp;&amp;&quot;,&quot;!==this._string[this._currentIndex])&amp;&amp;(this._skipOptionalSpaces()&amp;&amp;this._currentIndex<this._endIndex&amp;&amp;&quot;,&quot;===this._string[this._currentIndex]&amp;&amp;(this._currentIndex+=1,this._skipOptionalSpaces()),this._currentIndex<this._endIndex)},_parseNumber:function(){var e=0,t=0,n=1,a=0,i=1,o=1,l=this._currentIndex;if(this._skipOptionalSpaces(),this._currentIndex<this._endIndex&amp;&amp;&quot;+&quot;===this._string[this._currentIndex]?this._currentIndex+=1:this._currentIndex<this._endIndex&amp;&amp;&quot;-&quot;===this._string[this._currentIndex]&amp;&amp;(this._currentIndex+=1,i=-1),this._currentIndex===this._endIndex||(this._string[this._currentIndex]<&quot;0&quot;||this._string[this._currentIndex]>&quot;9&quot;)&amp;&amp;&quot;.&quot;!==this._string[this._currentIndex])return null;for(var r=this._currentIndex;this._currentIndex<this._endIndex&amp;&amp;this._string[this._currentIndex]>=&quot;0&quot;&amp;&amp;this._string[this._currentIndex]<=&quot;9&quot;;)this._currentIndex+=1;if(this._currentIndex!==r)for(var s=this._currentIndex-1,u=1;s>=r;)t+=u*(this._string[s]-&quot;0&quot;),s-=1,u*=10;if(this._currentIndex<this._endIndex&amp;&amp;&quot;.&quot;===this._string[this._currentIndex]){if(this._currentIndex+=1,this._currentIndex>=this._endIndex||this._string[this._currentIndex]<&quot;0&quot;||this._string[this._currentIndex]>&quot;9&quot;)return null;for(;this._currentIndex<this._endIndex&amp;&amp;this._string[this._currentIndex]>=&quot;0&quot;&amp;&amp;this._string[this._currentIndex]<=&quot;9&quot;;)n*=10,a+=(this._string.charAt(this._currentIndex)-&quot;0&quot;)/n,this._currentIndex+=1}if(this._currentIndex!==l&amp;&amp;this._currentIndex+1<this._endIndex&amp;&amp;(&quot;e&quot;===this._string[this._currentIndex]||&quot;E&quot;===this._string[this._currentIndex])&amp;&amp;&quot;x&quot;!==this._string[this._currentIndex+1]&amp;&amp;&quot;m&quot;!==this._string[this._currentIndex+1]){if(this._currentIndex+=1,&quot;+&quot;===this._string[this._currentIndex]?this._currentIndex+=1:&quot;-&quot;===this._string[this._currentIndex]&amp;&amp;(this._currentIndex+=1,o=-1),this._currentIndex>=this._endIndex||this._string[this._currentIndex]<&quot;0&quot;||this._string[this._currentIndex]>&quot;9&quot;)return null;for(;this._currentIndex<this._endIndex&amp;&amp;this._string[this._currentIndex]>=&quot;0&quot;&amp;&amp;this._string[this._currentIndex]<=&quot;9&quot;;)e*=10,e+=this._string[this._currentIndex]-&quot;0&quot;,this._currentIndex+=1}var h=t+a;return h*=i,e&amp;&amp;(h*=Math.pow(10,o*e)),l===this._currentIndex?null:(this._skipOptionalSpacesOrDelimiter(),h)},_parseArcFlag:function(){if(this._currentIndex>=this._endIndex)return null;var e=null,t=this._string[this._currentIndex];if(this._currentIndex+=1,&quot;0&quot;===t)e=0;else{if(&quot;1&quot;!==t)return null;e=1}return this._skipOptionalSpacesOrDelimiter(),e}};var i=function(e){if(!e||0===e.length)return[];var t=new n(e),a=[];if(t.initialCommandIsMoveTo())for(;t.hasMoreData();){var i=t.parseSegment();if(null===i)break;a.push(i)}return a},o=e.SVGPathElement.prototype.setAttribute,l=e.SVGPathElement.prototype.removeAttribute,r=e.Symbol?e.Symbol():&quot;__cachedPathData&quot;,s=e.Symbol?e.Symbol():&quot;__cachedNormalizedPathData&quot;,u=function(e,t,n,a,i,o,l,r,s,h){var p,c,d,f,y,m=function(e,t,n){return{x:e*Math.cos(n)-t*Math.sin(n),y:e*Math.sin(n)+t*Math.cos(n)}},S=(p=l,Math.PI*p/180),g=[];if(h)c=h[0],d=h[1],f=h[2],y=h[3];else{var _=m(e,t,-S);e=_.x,t=_.y;var v=m(n,a,-S),E=(e-(n=v.x))/2,x=(t-(a=v.y))/2,b=E*E/(i*i)+x*x/(o*o);b>1&amp;&amp;(i*=b=Math.sqrt(b),o*=b);var k=i*i,w=o*o,O=k*w-k*x*x-w*E*E,M=k*x*x+w*E*E,I=(r===s?-1:1)*Math.sqrt(Math.abs(O/M));f=I*i*x/o+(e+n)/2,y=I*-o*E/i+(t+a)/2,c=Math.asin(parseFloat(((t-y)/o).toFixed(9))),d=Math.asin(parseFloat(((a-y)/o).toFixed(9))),e<f&amp;&amp;(c=Math.PI-c),n<f&amp;&amp;(d=Math.PI-d),c<0&amp;&amp;(c=2*Math.PI+c),d<0&amp;&amp;(d=2*Math.PI+d),s&amp;&amp;c>d&amp;&amp;(c-=2*Math.PI),!s&amp;&amp;d>c&amp;&amp;(d-=2*Math.PI)}var C=d-c;if(Math.abs(C)>120*Math.PI/180){var L=d,A=n,V=a;d=s&amp;&amp;d>c?c+120*Math.PI/180*1:c+120*Math.PI/180*-1,n=f+i*Math.cos(d),a=y+o*Math.sin(d),g=u(n,a,A,V,i,o,l,0,s,[d,L,f,y])}C=d-c;var P=Math.cos(c),N=Math.sin(c),T=Math.cos(d),W=Math.sin(d),B=Math.tan(C/4),R=4/3*i*B,F=4/3*o*B,G=[e,t],D=[e+R*N,t-F*P],z=[n+R*W,a-F*T],j=[n,a];if(D[0]=2*G[0]-D[0],D[1]=2*G[1]-D[1],h)return[D,z,j].concat(g);g=[D,z,j].concat(g).join().split(&quot;,&quot;);var H=[],U=[];return g.forEach(function(e,t){t%2?U.push(m(g[t-1],g[t],S).y):U.push(m(g[t],g[t+1],S).x),6===U.length&amp;&amp;(H.push(U),U=[])}),H},h=function(e){return e.map(function(e){return{type:e.type,values:Array.prototype.slice.call(e.values)}})},p=function(e){var t=[],n=null,a=null,i=null,o=null,l=null,r=null,s=null;return e.forEach(function(e){if(&quot;M&quot;===e.type){var h=e.values[0],p=e.values[1];t.push({type:&quot;M&quot;,values:[h,p]}),r=h,s=p,o=h,l=p}else if(&quot;C&quot;===e.type){var c=e.values[0],d=e.values[1],f=e.values[2],y=e.values[3];h=e.values[4],p=e.values[5];t.push({type:&quot;C&quot;,values:[c,d,f,y,h,p]}),a=f,i=y,o=h,l=p}else if(&quot;L&quot;===e.type){h=e.values[0],p=e.values[1];t.push({type:&quot;L&quot;,values:[h,p]}),o=h,l=p}else if(&quot;H&quot;===e.type){h=e.values[0];t.push({type:&quot;L&quot;,values:[h,l]}),o=h}else if(&quot;V&quot;===e.type){p=e.values[0];t.push({type:&quot;L&quot;,values:[o,p]}),l=p}else if(&quot;S&quot;===e.type){f=e.values[0],y=e.values[1],h=e.values[2],p=e.values[3];&quot;C&quot;===n||&quot;S&quot;===n?(m=o+(o-a),S=l+(l-i)):(m=o,S=l),t.push({type:&quot;C&quot;,values:[m,S,f,y,h,p]}),a=f,i=y,o=h,l=p}else if(&quot;T&quot;===e.type){h=e.values[0],p=e.values[1];&quot;Q&quot;===n||&quot;T&quot;===n?(c=o+(o-a),d=l+(l-i)):(c=o,d=l);var m=o+2*(c-o)/3,S=l+2*(d-l)/3,g=h+2*(c-h)/3,_=p+2*(d-p)/3;t.push({type:&quot;C&quot;,values:[m,S,g,_,h,p]}),a=c,i=d,o=h,l=p}else if(&quot;Q&quot;===e.type){c=e.values[0],d=e.values[1],h=e.values[2],p=e.values[3],m=o+2*(c-o)/3,S=l+2*(d-l)/3,g=h+2*(c-h)/3,_=p+2*(d-p)/3;t.push({type:&quot;C&quot;,values:[m,S,g,_,h,p]}),a=c,i=d,o=h,l=p}else if(&quot;A&quot;===e.type){var v=e.values[0],E=e.values[1],x=e.values[2],b=e.values[3],k=e.values[4];h=e.values[5],p=e.values[6];if(0===v||0===E)t.push({type:&quot;C&quot;,values:[o,l,h,p,h,p]}),o=h,l=p;else if(o!==h||l!==p)u(o,l,h,p,v,E,x,b,k).forEach(function(e){t.push({type:&quot;C&quot;,values:e}),o=h,l=p})}else&quot;Z&quot;===e.type&amp;&amp;(t.push(e),o=r,l=s);n=e.type}),t};e.SVGPathElement.prototype.setAttribute=function(e,t){&quot;d&quot;===e&amp;&amp;(this[r]=null,this[s]=null),o.call(this,e,t)},e.SVGPathElement.prototype.removeAttribute=function(e,t){&quot;d&quot;===e&amp;&amp;(this[r]=null,this[s]=null),l.call(this,e)},e.SVGPathElement.prototype.getPathData=function(e){if(e&amp;&amp;e.normalize){if(this[s])return h(this[s]);this[r]?c=h(this[r]):(c=i(this.getAttribute(&quot;d&quot;)||&quot;&quot;),this[r]=h(c));var t=p((n=[],a=null,o=null,l=null,u=null,c.forEach(function(e){var t=e.type;if(&quot;M&quot;===t){var i=e.values[0],r=e.values[1];n.push({type:&quot;M&quot;,values:[i,r]}),l=i,u=r,a=i,o=r}else if(&quot;m&quot;===t)i=a+e.values[0],r=o+e.values[1],n.push({type:&quot;M&quot;,values:[i,r]}),l=i,u=r,a=i,o=r;else if(&quot;L&quot;===t)i=e.values[0],r=e.values[1],n.push({type:&quot;L&quot;,values:[i,r]}),a=i,o=r;else if(&quot;l&quot;===t)i=a+e.values[0],r=o+e.values[1],n.push({type:&quot;L&quot;,values:[i,r]}),a=i,o=r;else if(&quot;C&quot;===t){var s=e.values[0],h=e.values[1],p=e.values[2],c=e.values[3];i=e.values[4],r=e.values[5],n.push({type:&quot;C&quot;,values:[s,h,p,c,i,r]}),a=i,o=r}else&quot;c&quot;===t?(s=a+e.values[0],h=o+e.values[1],p=a+e.values[2],c=o+e.values[3],i=a+e.values[4],r=o+e.values[5],n.push({type:&quot;C&quot;,values:[s,h,p,c,i,r]}),a=i,o=r):&quot;Q&quot;===t?(s=e.values[0],h=e.values[1],i=e.values[2],r=e.values[3],n.push({type:&quot;Q&quot;,values:[s,h,i,r]}),a=i,o=r):&quot;q&quot;===t?(s=a+e.values[0],h=o+e.values[1],i=a+e.values[2],r=o+e.values[3],n.push({type:&quot;Q&quot;,values:[s,h,i,r]}),a=i,o=r):&quot;A&quot;===t?(i=e.values[5],r=e.values[6],n.push({type:&quot;A&quot;,values:[e.values[0],e.values[1],e.values[2],e.values[3],e.values[4],i,r]}),a=i,o=r):&quot;a&quot;===t?(i=a+e.values[5],r=o+e.values[6],n.push({type:&quot;A&quot;,values:[e.values[0],e.values[1],e.values[2],e.values[3],e.values[4],i,r]}),a=i,o=r):&quot;H&quot;===t?(i=e.values[0],n.push({type:&quot;H&quot;,values:[i]}),a=i):&quot;h&quot;===t?(i=a+e.values[0],n.push({type:&quot;H&quot;,values:[i]}),a=i):&quot;V&quot;===t?(r=e.values[0],n.push({type:&quot;V&quot;,values:[r]}),o=r):&quot;v&quot;===t?(r=o+e.values[0],n.push({type:&quot;V&quot;,values:[r]}),o=r):&quot;S&quot;===t?(p=e.values[0],c=e.values[1],i=e.values[2],r=e.values[3],n.push({type:&quot;S&quot;,values:[p,c,i,r]}),a=i,o=r):&quot;s&quot;===t?(p=a+e.values[0],c=o+e.values[1],i=a+e.values[2],r=o+e.values[3],n.push({type:&quot;S&quot;,values:[p,c,i,r]}),a=i,o=r):&quot;T&quot;===t?(i=e.values[0],r=e.values[1],n.push({type:&quot;T&quot;,values:[i,r]}),a=i,o=r):&quot;t&quot;===t?(i=a+e.values[0],r=o+e.values[1],n.push({type:&quot;T&quot;,values:[i,r]}),a=i,o=r):&quot;Z&quot;!==t&amp;&amp;&quot;z&quot;!==t||(n.push({type:&quot;Z&quot;,values:[]}),a=l,o=u)}),n));return this[s]=h(t),t}if(this[r])return h(this[r]);var n,a,o,l,u,c=i(this.getAttribute(&quot;d&quot;)||&quot;&quot;);return this[r]=h(c),c},e.SVGPathElement.prototype.setPathData=function(e){if(0===e.length)a?this.setAttribute(&quot;d&quot;,&quot;&quot;):this.removeAttribute(&quot;d&quot;);else{for(var t=&quot;&quot;,n=0,i=e.length;n<i;n+=1){var o=e[n];n>0&amp;&amp;(t+=&quot; &quot;),t+=o.type,o.values&amp;&amp;o.values.length>0&amp;&amp;(t+=&quot; &quot;+o.values.join(&quot; &quot;))}this.setAttribute(&quot;d&quot;,t)}},e.SVGRectElement.prototype.getPathData=function(e){var t=this.x.baseVal.value,n=this.y.baseVal.value,a=this.width.baseVal.value,i=this.height.baseVal.value,o=this.hasAttribute(&quot;rx&quot;)?this.rx.baseVal.value:this.ry.baseVal.value,l=this.hasAttribute(&quot;ry&quot;)?this.ry.baseVal.value:this.rx.baseVal.value;o>a/2&amp;&amp;(o=a/2),l>i/2&amp;&amp;(l=i/2);var r=[{type:&quot;M&quot;,values:[t+o,n]},{type:&quot;H&quot;,values:[t+a-o]},{type:&quot;A&quot;,values:[o,l,0,0,1,t+a,n+l]},{type:&quot;V&quot;,values:[n+i-l]},{type:&quot;A&quot;,values:[o,l,0,0,1,t+a-o,n+i]},{type:&quot;H&quot;,values:[t+o]},{type:&quot;A&quot;,values:[o,l,0,0,1,t,n+i-l]},{type:&quot;V&quot;,values:[n+l]},{type:&quot;A&quot;,values:[o,l,0,0,1,t+o,n]},{type:&quot;Z&quot;,values:[]}];return r=r.filter(function(e){return&quot;A&quot;!==e.type||0!==e.values[0]&amp;&amp;0!==e.values[1]}),e&amp;&amp;!0===e.normalize&amp;&amp;(r=p(r)),r},e.SVGCircleElement.prototype.getPathData=function(e){var t=this.cx.baseVal.value,n=this.cy.baseVal.value,a=this.r.baseVal.value,i=[{type:&quot;M&quot;,values:[t+a,n]},{type:&quot;A&quot;,values:[a,a,0,0,1,t,n+a]},{type:&quot;A&quot;,values:[a,a,0,0,1,t-a,n]},{type:&quot;A&quot;,values:[a,a,0,0,1,t,n-a]},{type:&quot;A&quot;,values:[a,a,0,0,1,t+a,n]},{type:&quot;Z&quot;,values:[]}];return e&amp;&amp;!0===e.normalize&amp;&amp;(i=p(i)),i},e.SVGEllipseElement.prototype.getPathData=function(e){var t=this.cx.baseVal.value,n=this.cy.baseVal.value,a=this.rx.baseVal.value,i=this.ry.baseVal.value,o=[{type:&quot;M&quot;,values:[t+a,n]},{type:&quot;A&quot;,values:[a,i,0,0,1,t,n+i]},{type:&quot;A&quot;,values:[a,i,0,0,1,t-a,n]},{type:&quot;A&quot;,values:[a,i,0,0,1,t,n-i]},{type:&quot;A&quot;,values:[a,i,0,0,1,t+a,n]},{type:&quot;Z&quot;,values:[]}];return e&amp;&amp;!0===e.normalize&amp;&amp;(o=p(o)),o},e.SVGLineElement.prototype.getPathData=function(){return[{type:&quot;M&quot;,values:[this.x1.baseVal.value,this.y1.baseVal.value]},{type:&quot;L&quot;,values:[this.x2.baseVal.value,this.y2.baseVal.value]}]},e.SVGPolylineElement.prototype.getPathData=function(){for(var e=[],t=0;t<this.points.numberOfItems;t+=1){var n=this.points.getItem(t);e.push({type:0===t?&quot;M&quot;:&quot;L&quot;,values:[n.x,n.y]})}return e},e.SVGPolygonElement.prototype.getPathData=function(){for(var e=[],t=0;t<this.points.numberOfItems;t+=1){var n=this.points.getItem(t);e.push({type:0===t?&quot;M&quot;:&quot;L&quot;,values:[n.x,n.y]})}return e.push({type:&quot;Z&quot;,values:[]}),e}}()},ae=function(e){function t(a){if(n[a])return n[a].exports;var i=n[a]={i:a,l:!1,exports:{}};return e[a].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,a){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:a})},t.n=function(e){var n=e&amp;&amp;e.__esModule?function(){return e.default}:function(){return e};return t.d(n,&quot;a&quot;,n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p=&quot;&quot;,t(t.s=0)}([function(e,t,n){function a(){var e=void 0,t=void 0;u&amp;&amp;(s.call(window,u),u=null),l.forEach(function(t){t.event&amp;&amp;(t.listener(t.event),t.event=null,e=!0)}),e?(h=Date.now(),t=!0):Date.now()-h<o&amp;&amp;(t=!0),t&amp;&amp;(u=r.call(window,a))}function i(e){var t=-1;return l.some(function(n,a){return n.listener===e&amp;&amp;(t=a,!0)}),t}Object.defineProperty(t,&quot;__esModule&quot;,{value:!0});var o=500,l=[],r=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame||function(e){return setTimeout(e,1e3/60)},s=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame||function(e){return clearTimeout(e)},u=void 0,h=Date.now(),p={add:function(e){var t=void 0;return-1===i(e)?(l.push(t={listener:e}),function(e){t.event=e,u||a()}):null},remove:function(e){var t;(t=i(e))>-1&amp;&amp;(l.splice(t,1),!l.length&amp;&amp;u&amp;&amp;(s.call(window,u),u=null))}};t.default=p,e.exports=t.default}]),ie={line_altColor:{iniValue:!1},line_color:{},line_colorTra:{iniValue:!1},line_strokeWidth:{},plug_enabled:{iniValue:!1},plug_enabledSE:{hasSE:!0,iniValue:!1},plug_plugSE:{hasSE:!0,iniValue:w},plug_colorSE:{hasSE:!0},plug_colorTraSE:{hasSE:!0,iniValue:!1},plug_markerWidthSE:{hasSE:!0},plug_markerHeightSE:{hasSE:!0},lineOutline_enabled:{iniValue:!1},lineOutline_color:{},lineOutline_colorTra:{iniValue:!1},lineOutline_strokeWidth:{},lineOutline_inStrokeWidth:{},plugOutline_enabledSE:{hasSE:!0,iniValue:!1},plugOutline_plugSE:{hasSE:!0,iniValue:w},plugOutline_colorSE:{hasSE:!0},plugOutline_colorTraSE:{hasSE:!0,iniValue:!1},plugOutline_strokeWidthSE:{hasSE:!0},plugOutline_inStrokeWidthSE:{hasSE:!0},position_socketXYSE:{hasSE:!0,hasProps:!0},position_plugOverheadSE:{hasSE:!0},position_path:{},position_lineStrokeWidth:{},position_socketGravitySE:{hasSE:!0},path_pathData:{},path_edge:{hasProps:!0},viewBox_bBox:{hasProps:!0},viewBox_plugBCircleSE:{hasSE:!0},lineMask_enabled:{iniValue:!1},lineMask_outlineMode:{iniValue:!1},lineMask_x:{},lineMask_y:{},lineOutlineMask_x:{},lineOutlineMask_y:{},maskBGRect_x:{},maskBGRect_y:{},capsMaskAnchor_enabledSE:{hasSE:!0,iniValue:!1},capsMaskAnchor_pathDataSE:{hasSE:!0},capsMaskAnchor_strokeWidthSE:{hasSE:!0},capsMaskMarker_enabled:{iniValue:!1},capsMaskMarker_enabledSE:{hasSE:!0,iniValue:!1},capsMaskMarker_plugSE:{hasSE:!0,iniValue:w},capsMaskMarker_markerWidthSE:{hasSE:!0},capsMaskMarker_markerHeightSE:{hasSE:!0},caps_enabled:{iniValue:!1},attach_plugSideLenSE:{hasSE:!0},attach_plugBackLenSE:{hasSE:!0}},oe={show_on:{},show_effect:{},show_animOptions:{},show_animId:{},show_inAnim:{}},le=&quot;fade&quot;,re=[],se={},ue=0,he={},pe=0;function ce(e,t){var n,a;return typeof e!=typeof t||(n=$(e)?&quot;obj&quot;:Array.isArray(e)?&quot;array&quot;:&quot;&quot;)!=($(t)?&quot;obj&quot;:Array.isArray(t)?&quot;array&quot;:&quot;&quot;)||(&quot;obj&quot;===n?ce(a=Object.keys(e).sort(),Object.keys(t).sort())||a.some(function(n){return ce(e[n],t[n])}):&quot;array&quot;===n?e.length!==t.length||e.some(function(e,n){return ce(e,t[n])}):e!==t)}function de(e){return e?$(e)?Object.keys(e).reduce(function(t,n){return t[n]=de(e[n]),t},{}):Array.isArray(e)?e.map(de):e:e}function fe(e){var t,n,a,i=1,o=e=(e+&quot;&quot;).trim();function l(e){var t=1,n=H.exec(e);return n&amp;&amp;(t=parseFloat(n[1]),n[2]?t=t>=0&amp;&amp;t<=100?t/100:1:(t<0||t>1)&amp;&amp;(t=1)),t}return(t=/^(rgba|hsla|hwb|gray|device\-cmyk)\s*\(([\s\S]+)\)$/i.exec(e))?(n=t[1].toLowerCase(),a=t[2].trim().split(/\s*,\s*/),&quot;rgba&quot;===n&amp;&amp;4===a.length?(i=l(a[3]),o=&quot;rgb(&quot;+a.slice(0,3).join(&quot;, &quot;)+&quot;)&quot;):&quot;hsla&quot;===n&amp;&amp;4===a.length?(i=l(a[3]),o=&quot;hsl(&quot;+a.slice(0,3).join(&quot;, &quot;)+&quot;)&quot;):&quot;hwb&quot;===n&amp;&amp;4===a.length?(i=l(a[3]),o=&quot;hwb(&quot;+a.slice(0,3).join(&quot;, &quot;)+&quot;)&quot;):&quot;gray&quot;===n&amp;&amp;2===a.length?(i=l(a[1]),o=&quot;gray(&quot;+a[0]+&quot;)&quot;):&quot;device-cmyk&quot;===n&amp;&amp;a.length>=5&amp;&amp;(i=l(a[4]),o=&quot;device-cmyk(&quot;+a.slice(0,4).join(&quot;, &quot;)+&quot;)&quot;)):(t=/^\#(?:([\da-f]{6})([\da-f]{2})|([\da-f]{3})([\da-f]))$/i.exec(e))?t[1]?(i=parseInt(t[2],16)/255,o=&quot;#&quot;+t[1]):(i=parseInt(t[4]+t[4],16)/255,o=&quot;#&quot;+t[3]):&quot;transparent&quot;===e.toLocaleLowerCase()&amp;&amp;(i=0),[i,o]}function ye(e){return!(!e||e.nodeType!==Node.ELEMENT_NODE||&quot;function&quot;!=typeof e.getBoundingClientRect)}function me(e,t){var n,a,i,o,l={};if(!(i=e.ownerDocument))return console.error(&quot;Cannot get document that contains the element.&quot;),null;if(e.compareDocumentPosition(i)&amp;Node.DOCUMENT_POSITION_DISCONNECTED)return console.error(&quot;A disconnected element was passed.&quot;),null;for(a in n=e.getBoundingClientRect())l[a]=n[a];if(!t){if(!(o=i.defaultView))return console.error(&quot;Cannot get window that contains the element.&quot;),null;l.left+=o.pageXOffset,l.right+=o.pageXOffset,l.top+=o.pageYOffset,l.bottom+=o.pageYOffset}return l}function Se(e,t){var n,a,i=[],o=e;for(t=t||window;;){if(!(n=o.ownerDocument))return console.error(&quot;Cannot get document that contains the element.&quot;),null;if(!(a=n.defaultView))return console.error(&quot;Cannot get window that contains the element.&quot;),null;if(a===t)break;if(!(o=a.frameElement))return console.error(&quot;`baseWindow` was not found.&quot;),null;i.unshift(o)}return i}function ge(e,t){var n,a,i=0,o=0;return(a=Se(e,t=t||window))?a.length?(a.forEach(function(e,t){var n,a,l=me(e,t>0);i+=l.left,o+=l.top,a=(n=e).ownerDocument.defaultView.getComputedStyle(n,&quot;&quot;),l={left:n.clientLeft+parseFloat(a.paddingLeft),top:n.clientTop+parseFloat(a.paddingTop)},i+=l.left,o+=l.top}),(n=me(e,!0)).left+=i,n.right+=i,n.top+=o,n.bottom+=o,n):me(e):null}function _e(e,t){var n=e.x-t.x,a=e.y-t.y;return Math.sqrt(n*n+a*a)}function ve(e,t,n){var a=t.x-e.x,i=t.y-e.y;return{x:e.x+a*n,y:e.y+i*n,angle:Math.atan2(i,a)/(Math.PI/180)}}function Ee(e,t,n){var a=Math.atan2(e.y-t.y,t.x-e.x);return{x:t.x+Math.cos(a)*n,y:t.y+Math.sin(a)*n*-1}}function xe(e,t,n,a,i){var o=i*i,l=o*i,r=1-i,s=r*r,u=s*r,h=u*e.x+3*s*i*t.x+3*r*o*n.x+l*a.x,p=u*e.y+3*s*i*t.y+3*r*o*n.y+l*a.y,c=e.x+2*i*(t.x-e.x)+o*(n.x-2*t.x+e.x),d=e.y+2*i*(t.y-e.y)+o*(n.y-2*t.y+e.y),f=t.x+2*i*(n.x-t.x)+o*(a.x-2*n.x+t.x),y=t.y+2*i*(n.y-t.y)+o*(a.y-2*n.y+t.y),m=r*e.x+i*t.x,S=r*e.y+i*t.y,g=r*n.x+i*a.x,_=r*n.y+i*a.y,v=90-180*Math.atan2(c-f,d-y)/Math.PI;return{x:h,y:p,fromP2:{x:c,y:d},toP1:{x:f,y:y},fromP1:{x:m,y:S},toP2:{x:g,y:_},angle:v+=v>180?-180:180}}function be(e,t,n,a,i){function o(e,t,n,a,i){return e*(e*(-3*t+9*n-9*a+3*i)+6*t-12*n+6*a)-3*t+3*n}var l,r,s,u,h,p=[.2491,.2491,.2335,.2335,.2032,.2032,.1601,.1601,.1069,.1069,.0472,.0472],c=0;return l=(i=null==i||i>1?1:i<0?0:i)/2,[-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816].forEach(function(i,d){s=o(r=l*i+l,e.x,t.x,n.x,a.x),u=o(r,e.y,t.y,n.y,a.y),h=s*s+u*u,c+=p[d]*Math.sqrt(h)}),l*c}function ke(e,t,n,a,i){for(var o,l=.5,r=1-l;o=be(e,t,n,a,r),!(Math.abs(o-i)<=.01);)r+=(o<i?1:-1)*(l/=2);return r}function we(e,t){var n;return e.forEach(function(e){var a=t?e.map(function(e){var n={x:e.x,y:e.y};return t(n),n}):e;n||(n=[{type:&quot;M&quot;,values:[a[0].x,a[0].y]}]),n.push(a.length?2===a.length?{type:&quot;L&quot;,values:[a[1].x,a[1].y]}:{type:&quot;C&quot;,values:[a[1].x,a[1].y,a[2].x,a[2].y,a[3].x,a[3].y]}:{type:&quot;Z&quot;,values:[]})}),n}function Oe(e){var t=[],n=0;return e.forEach(function(e){var a=(2===e.length?_e:be).apply(null,e);t.push(a),n+=a}),{segsLen:t,lenAll:n}}function Me(e,t){return null==e||null==t||e.length!==t.length||e.some(function(e,n){var a=t[n];return e.type!==a.type||e.values.some(function(e,t){return e!==a.values[t]})})}function Ie(e,t,n){e.events[t]?e.events[t].indexOf(n)<0&amp;&amp;e.events[t].push(n):e.events[t]=[n]}function Ce(e,t,n){var a;e.events[t]&amp;&amp;(a=e.events[t].indexOf(n))>-1&amp;&amp;e.events[t].splice(a,1)}function Le(e){l&amp;&amp;clearTimeout(l),re.push(e),l=setTimeout(function(){re.forEach(function(e){e()}),re=[]},0)}function Ae(e,t){e.reflowTargets.indexOf(t)<0&amp;&amp;e.reflowTargets.push(t)}function Ve(e){e.reflowTargets.forEach(function(e){var t;t=e,setTimeout(function(){var e=t.parentNode,n=t.nextSibling;e.insertBefore(e.removeChild(t),n)},0)}),e.reflowTargets=[]}function Pe(e,t,n,a,i,o,l){var s,u,h;&quot;auto-start-reverse&quot;===n?(&quot;boolean&quot;!=typeof r&amp;&amp;(t.setAttribute(&quot;orient&quot;,&quot;auto-start-reverse&quot;),r=t.orientType.baseVal===SVGMarkerElement.SVG_MARKER_ORIENT_UNKNOWN),r?t.setAttribute(&quot;orient&quot;,n):((s=i.createSVGTransform()).setRotate(180,0,0),o.transform.baseVal.appendItem(s),t.setAttribute(&quot;orient&quot;,&quot;auto&quot;),h=!0)):(t.setAttribute(&quot;orient&quot;,n),!1===r&amp;&amp;o.transform.baseVal.clear()),u=t.viewBox.baseVal,h?(u.x=-a.right,u.y=-a.bottom):(u.x=a.left,u.y=a.top),u.width=a.width,u.height=a.height,Z&amp;&amp;Ae(e,l)}function Ne(e,t){return{prop:e?&quot;markerEnd&quot;:&quot;markerStart&quot;,orient:t?t.noRotate?&quot;0&quot;:e?&quot;auto&quot;:&quot;auto-start-reverse&quot;:null}}function Te(e,t){Object.keys(t).forEach(function(n){var a=t[n];e[n]=null!=a.iniValue?a.hasSE?[a.iniValue,a.iniValue]:a.iniValue:a.hasSE?a.hasProps?[{},{}]:[]:a.hasProps?{}:null})}function We(e,t,n,a,i){return a!==t[n]&amp;&amp;(t[n]=a,i&amp;&amp;i.forEach(function(t){t(e,a,n)}),!0)}function Be(e){function t(e,t){return e+parseFloat(t)}var n=e.document,a=e.getComputedStyle(n.documentElement,&quot;&quot;),i=e.getComputedStyle(n.body,&quot;&quot;),o={x:0,y:0};return&quot;static&quot;!==i.position?(o.x-=[a.marginLeft,a.borderLeftWidth,a.paddingLeft,i.marginLeft,i.borderLeftWidth].reduce(t,0),o.y-=[a.marginTop,a.borderTopWidth,a.paddingTop,i.marginTop,i.borderTopWidth].reduce(t,0)):&quot;static&quot;!==a.position&amp;&amp;(o.x-=[a.marginLeft,a.borderLeftWidth].reduce(t,0),o.y-=[a.marginTop,a.borderTopWidth].reduce(t,0)),o}function Re(e){var t,n=e.document;n.getElementById(O)||(t=(new e.DOMParser).parseFromString(M,&quot;image/svg+xml&quot;),n.body.appendChild(t.documentElement),ne(e))}function Fe(e){var t,n,a,i,o,l,r,s,u,h,p,c,d,g,k,w,O,M,I,C=e.options,L=e.curStats,V=e.aplStats,P=L.position_socketXYSE,H=!1;function U(e,t){var n=t===f?{x:e.left+e.width/2,y:e.top}:t===y?{x:e.right,y:e.top+e.height/2}:t===m?{x:e.left+e.width/2,y:e.bottom}:{x:e.left,y:e.top+e.height/2};return n.socketId=t,n}function Z(e){return{x:e.x,y:e.y}}if(L.position_path=C.path,L.position_lineStrokeWidth=L.line_strokeWidth,L.position_socketGravitySE=t=de(C.socketGravitySE),n=[0,1].map(function(t){var n,a,i,o=C.anchorSE[t],l=e.optionIsAttach.anchorSE[t],r=!1!==l?he[o._id]:null,s=!1!==l&amp;&amp;r.conf.getStrokeWidth?r.conf.getStrokeWidth(r,e):0,u=!1!==l&amp;&amp;r.conf.getBBoxNest?r.conf.getBBoxNest(r,e,s):ge(o,e.baseWindow);return L.capsMaskAnchor_pathDataSE[t]=!1!==l&amp;&amp;r.conf.getPathData?r.conf.getPathData(r,e,s):(a=null!=(n=u).right?n.right:n.left+n.width,i=null!=n.bottom?n.bottom:n.top+n.height,[{type:&quot;M&quot;,values:[n.left,n.top]},{type:&quot;L&quot;,values:[a,n.top]},{type:&quot;L&quot;,values:[a,i]},{type:&quot;L&quot;,values:[n.left,i]},{type:&quot;Z&quot;,values:[]}]),L.capsMaskAnchor_strokeWidthSE[t]=s,u}),r=-1,C.socketSE[0]&amp;&amp;C.socketSE[1]?(P[0]=U(n[0],C.socketSE[0]),P[1]=U(n[1],C.socketSE[1])):(C.socketSE[0]||C.socketSE[1]?(C.socketSE[0]?(o=0,l=1):(o=1,l=0),P[o]=U(n[o],C.socketSE[o]),(i=A.map(function(e){return U(n[l],e)})).forEach(function(e){var t=_e(e,P[o]);(t<r||-1===r)&amp;&amp;(P[l]=e,r=t)})):(i=A.map(function(e){return U(n[1],e)}),A.map(function(e){return U(n[0],e)}).forEach(function(e){i.forEach(function(t){var n=_e(e,t);(n<r||-1===r)&amp;&amp;(P[0]=e,P[1]=t,r=n)})})),[0,1].forEach(function(e){var t,a;C.socketSE[e]||(n[e].width||n[e].height?n[e].width||P[e].socketId!==S&amp;&amp;P[e].socketId!==y?n[e].height||P[e].socketId!==f&amp;&amp;P[e].socketId!==m||(P[e].socketId=P[e?0:1].y-n[e].top>=0?m:f):P[e].socketId=P[e?0:1].x-n[e].left>=0?y:S:(t=P[e?0:1].x-n[e].left,a=P[e?0:1].y-n[e].top,P[e].socketId=Math.abs(t)>=Math.abs(a)?t>=0?y:S:a>=0?m:f))})),L.position_path!==V.position_path||L.position_lineStrokeWidth!==V.position_lineStrokeWidth||[0,1].some(function(e){return L.position_plugOverheadSE[e]!==V.position_plugOverheadSE[e]||(o=P[e],l=V.position_socketXYSE[e],o.x!==l.x||o.y!==l.y||o.socketId!==l.socketId)||(n=t[e],a=V.position_socketGravitySE[e],(i=null==n?&quot;auto&quot;:Array.isArray(n)?&quot;array&quot;:&quot;number&quot;)!==(null==a?&quot;auto&quot;:Array.isArray(a)?&quot;array&quot;:&quot;number&quot;)||(&quot;array&quot;===i?n[0]!==a[0]||n[1]!==a[1]:n!==a));var n,a,i,o,l})){switch(e.pathList.baseVal=a=[],e.pathList.animVal=null,L.position_path){case _:a.push([Z(P[0]),Z(P[1])]);break;case v:c=&quot;number&quot;==typeof t[0]&amp;&amp;t[0]>0||&quot;number&quot;==typeof t[1]&amp;&amp;t[1]>0,d=j*(c?-1:1),g=Math.atan2(P[1].y-P[0].y,P[1].x-P[0].x),k=-g+d,w=Math.PI-g-d,O=_e(P[0],P[1])/Math.sqrt(2)*z,M={x:P[0].x+Math.cos(k)*O,y:P[0].y+Math.sin(k)*O*-1},I={x:P[1].x+Math.cos(w)*O,y:P[1].y+Math.sin(w)*O*-1},a.push([Z(P[0]),M,I,Z(P[1])]);break;case E:case x:u=[t[0],L.position_path===x?0:t[1]],h=[],p=[],P.forEach(function(e,t){var n,a,i,o,l,r=u[t];Array.isArray(r)?n={x:r[0],y:r[1]}:&quot;number&quot;==typeof r?n=e.socketId===f?{x:0,y:-r}:e.socketId===y?{x:r,y:0}:e.socketId===m?{x:0,y:r}:{x:-r,y:0}:(a=P[t?0:1],o=(i=L.position_plugOverheadSE[t])>0?B+(i>R?(i-R)*F:0):N+(L.position_lineStrokeWidth>T?(L.position_lineStrokeWidth-T)*W:0),e.socketId===f?((l=(e.y-a.y)/2)<o&amp;&amp;(l=o),n={x:0,y:-l}):e.socketId===y?((l=(a.x-e.x)/2)<o&amp;&amp;(l=o),n={x:l,y:0}):e.socketId===m?((l=(a.y-e.y)/2)<o&amp;&amp;(l=o),n={x:0,y:l}):((l=(e.x-a.x)/2)<o&amp;&amp;(l=o),n={x:-l,y:0})),h[t]=e.x+n.x,p[t]=e.y+n.y}),a.push([Z(P[0]),{x:h[0],y:p[0]},{x:h[1],y:p[1]},Z(P[1])]);break;case b:!function(){var e,n=1,i=2,o=3,l=4,r=[[],[]],s=[];function u(e){return e===n?o:e===i?l:e===o?n:i}function h(e){return e===i||e===l?&quot;x&quot;:&quot;y&quot;}function p(e,t,a){var l={x:e.x,y:e.y};if(a){if(a===u(e.dirId))throw new Error(&quot;Invalid dirId: &quot;+a);l.dirId=a}else l.dirId=e.dirId;return l.dirId===n?l.y-=t:l.dirId===i?l.x+=t:l.dirId===o?l.y+=t:l.x-=t,l}function c(e,t){return t.dirId===n?e.y<=t.y:t.dirId===i?e.x>=t.x:t.dirId===o?e.y>=t.y:e.x<=t.x}function d(e,t){return t.dirId===n||t.dirId===o?e.x===t.x:e.y===t.y}function f(e){return e[0]?{contain:0,notContain:1}:{contain:1,notContain:0}}function y(e,t,n){return Math.abs(t[n]-e[n])}function m(e,t,a){return&quot;x&quot;===a?e.x<t.x?i:l:e.y<t.y?o:n}function S(){var e,t,n,a,l=[c(s[1],s[0]),c(s[0],s[1])],u=[h(s[0].dirId),h(s[1].dirId)];if(u[0]===u[1]){if(l[0]&amp;&amp;l[1])return d(s[1],s[0])||(s[0][u[0]]===s[1][u[1]]?(r[0].push(s[0]),r[1].push(s[1])):(e=s[0][u[0]]+(s[1][u[1]]-s[0][u[0]])/2,r[0].push(p(s[0],Math.abs(e-s[0][u[0]]))),r[1].push(p(s[1],Math.abs(e-s[1][u[1]]))))),!1;l[0]!==l[1]?(t=f(l),(n=y(s[t.notContain],s[t.contain],u[t.notContain]))<D&amp;&amp;(s[t.notContain]=p(s[t.notContain],D-n)),r[t.notContain].push(s[t.notContain]),s[t.notContain]=p(s[t.notContain],D,d(s[t.contain],s[t.notContain])?&quot;x&quot;===u[t.notContain]?o:i:m(s[t.notContain],s[t.contain],&quot;x&quot;===u[t.notContain]?&quot;y&quot;:&quot;x&quot;))):(n=y(s[0],s[1],&quot;x&quot;===u[0]?&quot;y&quot;:&quot;x&quot;),r.forEach(function(e,t){var a=0===t?1:0;e.push(s[t]),s[t]=p(s[t],D,n>=2*D?m(s[t],s[a],&quot;x&quot;===u[t]?&quot;y&quot;:&quot;x&quot;):&quot;x&quot;===u[t]?o:i)}))}else{if(l[0]&amp;&amp;l[1])return d(s[1],s[0])?r[1].push(s[1]):d(s[0],s[1])?r[0].push(s[0]):r[0].push(&quot;x&quot;===u[0]?{x:s[1].x,y:s[0].y}:{x:s[0].x,y:s[1].y}),!1;l[0]!==l[1]?(t=f(l),r[t.notContain].push(s[t.notContain]),s[t.notContain]=p(s[t.notContain],D,y(s[t.notContain],s[t.contain],u[t.contain])>=D?m(s[t.notContain],s[t.contain],u[t.contain]):s[t.contain].dirId)):(a=[{x:s[0].x,y:s[0].y},{x:s[1].x,y:s[1].y}],r.forEach(function(e,t){var n=0===t?1:0,i=y(a[t],a[n],u[t]);i<D&amp;&amp;(s[t]=p(s[t],D-i)),e.push(s[t]),s[t]=p(s[t],D,m(s[t],s[n],u[n]))}))}return!0}for(P.forEach(function(e,a){var h,c=Z(e),d=t[a];h=Array.isArray(d)?d[0]<0?[l,-d[0]]:d[0]>0?[i,d[0]]:d[1]<0?[n,-d[1]]:d[1]>0?[o,d[1]]:[e.socketId,0]:&quot;number&quot;!=typeof d?[e.socketId,D]:d>=0?[e.socketId,d]:[u(e.socketId),-d],c.dirId=h[0],d=h[1],r[a].push(c),s[a]=p(c,d)});S(););r[1].reverse(),r[0].concat(r[1]).forEach(function(t,n){var i={x:t.x,y:t.y};n>0&amp;&amp;a.push([e,i]),e=i})}()}s=[],L.position_plugOverheadSE.forEach(function(e,t){var i,o,l,r,u,h,p,c,d,m,g,_=!t;e>0?2===(i=a[o=_?0:a.length-1]).length?(s[o]=s[o]||_e.apply(null,i),s[o]>G&amp;&amp;(s[o]-e<G&amp;&amp;(e=s[o]-G),l=ve(i[0],i[1],(_?e:s[o]-e)/s[o]),a[o]=_?[l,i[1]]:[i[0],l],s[o]-=e)):(s[o]=s[o]||be.apply(null,i),s[o]>G&amp;&amp;(s[o]-e<G&amp;&amp;(e=s[o]-G),l=xe(i[0],i[1],i[2],i[3],ke(i[0],i[1],i[2],i[3],_?e:s[o]-e)),_?(r=i[0],u=l.toP1):(r=i[3],u=l.fromP2),h=Math.atan2(r.y-l.y,l.x-r.x),p=_e(l,u),l.x=r.x+Math.cos(h)*e,l.y=r.y+Math.sin(h)*e*-1,u.x=l.x+Math.cos(h)*p,u.y=l.y+Math.sin(h)*p*-1,a[o]=_?[l,l.toP1,l.toP2,i[3]]:[i[0],l.fromP1,l.fromP2,l],s[o]=null)):e<0&amp;&amp;(i=a[o=_?0:a.length-1],c=P[t].socketId,d=c===S||c===y?&quot;x&quot;:&quot;y&quot;,e<(g=-n[t][&quot;x&quot;===d?&quot;width&quot;:&quot;height&quot;])&amp;&amp;(e=g),m=e*(c===S||c===f?-1:1),2===i.length?i[_?0:i.length-1][d]+=m:(_?[0,1]:[i.length-2,i.length-1]).forEach(function(e){i[e][d]+=m}),s[o]=null)}),V.position_socketXYSE=de(P),V.position_plugOverheadSE=de(L.position_plugOverheadSE),V.position_path=L.position_path,V.position_lineStrokeWidth=L.position_lineStrokeWidth,V.position_socketGravitySE=de(t),H=!0,e.events.apl_position&amp;&amp;e.events.apl_position.forEach(function(t){t(e,a)})}return H}function Ge(e,t){t!==e.isShown&amp;&amp;(!!t!=!!e.isShown&amp;&amp;(e.svg.style.visibility=t?&quot;&quot;:&quot;hidden&quot;),e.isShown=t,e.events&amp;&amp;e.events.svgShow&amp;&amp;e.events.svgShow.forEach(function(n){n(e,t)}))}function De(t,n){var a,i,o,l,r,s,u,h,p,c,d,f,y,m,S,g,_,v,E,x,b,k,O,M,C,A,V,N,T,W,B,R,F,G,D,z,j,H,U,q,$,ee,te,ne,ae,ie,oe,le,re,se,ue,he,pe={};n.line&amp;&amp;(pe.line=(i=(a=t).options,o=a.curStats,l=a.events,r=!1,r=We(a,o,&quot;line_color&quot;,i.lineColor,l.cur_line_color)||r,r=We(a,o,&quot;line_colorTra&quot;,fe(o.line_color)[0]<1)||r,r=We(a,o,&quot;line_strokeWidth&quot;,i.lineSize,l.cur_line_strokeWidth)||r)),(n.plug||pe.line)&amp;&amp;(pe.plug=(u=(s=t).options,h=s.curStats,p=s.events,c=!1,[0,1].forEach(function(e){var t,n,a,i,o,l,r,d,f=u.plugSE[e];c=We(s,h.plug_enabledSE,e,f!==w)||c,c=We(s,h.plug_plugSE,e,f)||c,c=We(s,h.plug_colorSE,e,d=u.plugColorSE[e]||h.line_color,p.cur_plug_colorSE)||c,c=We(s,h.plug_colorTraSE,e,fe(d)[0]<1)||c,f!==w&amp;&amp;(i=n=(t=I[L[f]]).widthR*u.plugSizeSE[e],o=a=t.heightR*u.plugSizeSE[e],Q&amp;&amp;(i*=h.line_strokeWidth,o*=h.line_strokeWidth),c=We(s,h.plug_markerWidthSE,e,i)||c,c=We(s,h.plug_markerHeightSE,e,o)||c,h.capsMaskMarker_markerWidthSE[e]=n,h.capsMaskMarker_markerHeightSE[e]=a),h.plugOutline_plugSE[e]=h.capsMaskMarker_plugSE[e]=f,h.plug_enabledSE[e]?(d=h.line_strokeWidth/J.lineSize*u.plugSizeSE[e],h.position_plugOverheadSE[e]=t.overhead*d,h.viewBox_plugBCircleSE[e]=t.bCircle*d,l=t.sideLen*d,r=t.backLen*d):(h.position_plugOverheadSE[e]=-h.line_strokeWidth/2,h.viewBox_plugBCircleSE[e]=l=r=0),We(s,h.attach_plugSideLenSE,e,l,p.cur_attach_plugSideLenSE),We(s,h.attach_plugBackLenSE,e,r,p.cur_attach_plugBackLenSE),h.capsMaskAnchor_enabledSE[e]=!h.plug_enabledSE[e]}),c=We(s,h,&quot;plug_enabled&quot;,h.plug_enabledSE[0]||h.plug_enabledSE[1])||c)),(n.lineOutline||pe.line)&amp;&amp;(pe.lineOutline=(y=(d=t).options,m=d.curStats,S=!1,S=We(d,m,&quot;lineOutline_enabled&quot;,y.lineOutlineEnabled)||S,S=We(d,m,&quot;lineOutline_color&quot;,y.lineOutlineColor)||S,S=We(d,m,&quot;lineOutline_colorTra&quot;,fe(m.lineOutline_color)[0]<1)||S,f=m.line_strokeWidth*y.lineOutlineSize,S=We(d,m,&quot;lineOutline_strokeWidth&quot;,m.line_strokeWidth-2*f)||S,S=We(d,m,&quot;lineOutline_inStrokeWidth&quot;,m.lineOutline_colorTra?m.lineOutline_strokeWidth+2*K:m.line_strokeWidth-f)||S)),(n.plugOutline||pe.line||pe.plug||pe.lineOutline)&amp;&amp;(pe.plugOutline=(_=(g=t).options,v=g.curStats,E=!1,[0,1].forEach(function(e){var t,n=v.plugOutline_plugSE[e],a=n!==w?I[L[n]]:null;E=We(g,v.plugOutline_enabledSE,e,_.plugOutlineEnabledSE[e]&amp;&amp;v.plug_enabled&amp;&amp;v.plug_enabledSE[e]&amp;&amp;!!a&amp;&amp;!!a.outlineBase)||E,E=We(g,v.plugOutline_colorSE,e,t=_.plugOutlineColorSE[e]||v.lineOutline_color)||E,E=We(g,v.plugOutline_colorTraSE,e,fe(t)[0]<1)||E,a&amp;&amp;a.outlineBase&amp;&amp;((t=_.plugOutlineSizeSE[e])>a.outlineMax&amp;&amp;(t=a.outlineMax),t*=2*a.outlineBase,E=We(g,v.plugOutline_strokeWidthSE,e,t)||E,E=We(g,v.plugOutline_inStrokeWidthSE,e,v.plugOutline_colorTraSE[e]?t-K/(v.line_strokeWidth/J.lineSize)/_.plugSizeSE[e]*2:t/2)||E)}),E)),(n.faces||pe.line||pe.plug||pe.lineOutline||pe.plugOutline)&amp;&amp;(pe.faces=(k=(x=t).curStats,O=x.aplStats,M=x.events,C=!1,!k.line_altColor&amp;&amp;We(x,O,&quot;line_color&quot;,b=k.line_color,M.apl_line_color)&amp;&amp;(x.lineFace.style.stroke=b,C=!0),We(x,O,&quot;line_strokeWidth&quot;,b=k.line_strokeWidth,M.apl_line_strokeWidth)&amp;&amp;(x.lineShape.style.strokeWidth=b+&quot;px&quot;,C=!0,(X||Z)&amp;&amp;(Ae(x,x.lineShape),Z&amp;&amp;(Ae(x,x.lineFace),Ae(x,x.lineMaskCaps)))),We(x,O,&quot;lineOutline_enabled&quot;,b=k.lineOutline_enabled,M.apl_lineOutline_enabled)&amp;&amp;(x.lineOutlineFace.style.display=b?&quot;inline&quot;:&quot;none&quot;,C=!0),k.lineOutline_enabled&amp;&amp;(We(x,O,&quot;lineOutline_color&quot;,b=k.lineOutline_color,M.apl_lineOutline_color)&amp;&amp;(x.lineOutlineFace.style.stroke=b,C=!0),We(x,O,&quot;lineOutline_strokeWidth&quot;,b=k.lineOutline_strokeWidth,M.apl_lineOutline_strokeWidth)&amp;&amp;(x.lineOutlineMaskShape.style.strokeWidth=b+&quot;px&quot;,C=!0,Z&amp;&amp;(Ae(x,x.lineOutlineMaskCaps),Ae(x,x.lineOutlineFace))),We(x,O,&quot;lineOutline_inStrokeWidth&quot;,b=k.lineOutline_inStrokeWidth,M.apl_lineOutline_inStrokeWidth)&amp;&amp;(x.lineMaskShape.style.strokeWidth=b+&quot;px&quot;,C=!0,Z&amp;&amp;(Ae(x,x.lineOutlineMaskCaps),Ae(x,x.lineOutlineFace)))),We(x,O,&quot;plug_enabled&quot;,b=k.plug_enabled,M.apl_plug_enabled)&amp;&amp;(x.plugsFace.style.display=b?&quot;inline&quot;:&quot;none&quot;,C=!0),k.plug_enabled&amp;&amp;[0,1].forEach(function(e){var t=k.plug_plugSE[e],n=t!==w?I[L[t]]:null,a=Ne(e,n);We(x,O.plug_enabledSE,e,b=k.plug_enabledSE[e],M.apl_plug_enabledSE)&amp;&amp;(x.plugsFace.style[a.prop]=b?&quot;url(#&quot;+x.plugMarkerIdSE[e]+&quot;)&quot;:&quot;none&quot;,C=!0),k.plug_enabledSE[e]&amp;&amp;(We(x,O.plug_plugSE,e,t,M.apl_plug_plugSE)&amp;&amp;(x.plugFaceSE[e].href.baseVal=&quot;#&quot;+n.elmId,Pe(x,x.plugMarkerSE[e],a.orient,n.bBox,x.svg,x.plugMarkerShapeSE[e],x.plugsFace),C=!0,X&amp;&amp;Ae(x,x.plugsFace)),We(x,O.plug_colorSE,e,b=k.plug_colorSE[e],M.apl_plug_colorSE)&amp;&amp;(x.plugFaceSE[e].style.fill=b,C=!0,(Y||Q||Z)&amp;&amp;!k.line_colorTra&amp;&amp;Ae(x,Z?x.lineMaskCaps:x.capsMaskLine)),[&quot;markerWidth&quot;,&quot;markerHeight&quot;].forEach(function(t){var n=&quot;plug_&quot;+t+&quot;SE&quot;;We(x,O[n],e,b=k[n][e],M[&quot;apl_&quot;+n])&amp;&amp;(x.plugMarkerSE[e][t].baseVal.value=b,C=!0)}),We(x,O.plugOutline_enabledSE,e,b=k.plugOutline_enabledSE[e],M.apl_plugOutline_enabledSE)&amp;&amp;(b?(x.plugFaceSE[e].style.mask=&quot;url(#&quot;+x.plugMaskIdSE[e]+&quot;)&quot;,x.plugOutlineFaceSE[e].style.display=&quot;inline&quot;):(x.plugFaceSE[e].style.mask=&quot;none&quot;,x.plugOutlineFaceSE[e].style.display=&quot;none&quot;),C=!0),k.plugOutline_enabledSE[e]&amp;&amp;(We(x,O.plugOutline_plugSE,e,t,M.apl_plugOutline_plugSE)&amp;&amp;(x.plugOutlineFaceSE[e].href.baseVal=x.plugMaskShapeSE[e].href.baseVal=x.plugOutlineMaskShapeSE[e].href.baseVal=&quot;#&quot;+n.elmId,[x.plugMaskSE[e],x.plugOutlineMaskSE[e]].forEach(function(e){e.x.baseVal.value=n.bBox.left,e.y.baseVal.value=n.bBox.top,e.width.baseVal.value=n.bBox.width,e.height.baseVal.value=n.bBox.height}),C=!0),We(x,O.plugOutline_colorSE,e,b=k.plugOutline_colorSE[e],M.apl_plugOutline_colorSE)&amp;&amp;(x.plugOutlineFaceSE[e].style.fill=b,C=!0,Z&amp;&amp;(Ae(x,x.lineMaskCaps),Ae(x,x.lineOutlineMaskCaps))),We(x,O.plugOutline_strokeWidthSE,e,b=k.plugOutline_strokeWidthSE[e],M.apl_plugOutline_strokeWidthSE)&amp;&amp;(x.plugOutlineMaskShapeSE[e].style.strokeWidth=b+&quot;px&quot;,C=!0),We(x,O.plugOutline_inStrokeWidthSE,e,b=k.plugOutline_inStrokeWidthSE[e],M.apl_plugOutline_inStrokeWidthSE)&amp;&amp;(x.plugMaskShapeSE[e].style.strokeWidth=b+&quot;px&quot;,C=!0)))}),C)),(n.position||pe.line||pe.plug)&amp;&amp;(pe.position=Fe(t)),(n.path||pe.position)&amp;&amp;(pe.path=(N=(A=t).curStats,T=A.aplStats,W=A.pathList.animVal||A.pathList.baseVal,B=N.path_edge,R=!1,W&amp;&amp;(B.x1=B.x2=W[0][0].x,B.y1=B.y2=W[0][0].y,N.path_pathData=V=we(W,function(e){e.x<B.x1&amp;&amp;(B.x1=e.x),e.y<B.y1&amp;&amp;(B.y1=e.y),e.x>B.x2&amp;&amp;(B.x2=e.x),e.y>B.y2&amp;&amp;(B.y2=e.y)}),Me(V,T.path_pathData)&amp;&amp;(A.linePath.setPathData(V),T.path_pathData=V,R=!0,Z?(Ae(A,A.plugsFace),Ae(A,A.lineMaskCaps)):X&amp;&amp;Ae(A,A.linePath),A.events.apl_path&amp;&amp;A.events.apl_path.forEach(function(e){e(A,V)}))),R)),pe.viewBox=(z=(F=t).curStats,j=F.aplStats,H=z.path_edge,U=z.viewBox_bBox,q=j.viewBox_bBox,$=F.svg.viewBox.baseVal,ee=F.svg.style,te=!1,G=Math.max(z.line_strokeWidth/2,z.viewBox_plugBCircleSE[0]||0,z.viewBox_plugBCircleSE[1]||0),D={x1:H.x1-G,y1:H.y1-G,x2:H.x2+G,y2:H.y2+G},F.events.new_edge4viewBox&amp;&amp;F.events.new_edge4viewBox.forEach(function(e){e(F,D)}),U.x=z.lineMask_x=z.lineOutlineMask_x=z.maskBGRect_x=D.x1,U.y=z.lineMask_y=z.lineOutlineMask_y=z.maskBGRect_y=D.y1,U.width=D.x2-D.x1,U.height=D.y2-D.y1,[&quot;x&quot;,&quot;y&quot;,&quot;width&quot;,&quot;height&quot;].forEach(function(e){var t;(t=U[e])!==q[e]&amp;&amp;($[e]=q[e]=t,ee[P[e]]=t+(&quot;x&quot;===e||&quot;y&quot;===e?F.bodyOffset[e]:0)+&quot;px&quot;,te=!0)}),te),pe.mask=(ie=(ne=t).curStats,oe=ne.aplStats,le=!1,ie.plug_enabled?[0,1].forEach(function(e){ie.capsMaskMarker_enabledSE[e]=ie.plug_enabledSE[e]&amp;&amp;ie.plug_colorTraSE[e]||ie.plugOutline_enabledSE[e]&amp;&amp;ie.plugOutline_colorTraSE[e]}):ie.capsMaskMarker_enabledSE[0]=ie.capsMaskMarker_enabledSE[1]=!1,ie.capsMaskMarker_enabled=ie.capsMaskMarker_enabledSE[0]||ie.capsMaskMarker_enabledSE[1],ie.lineMask_outlineMode=ie.lineOutline_enabled,ie.caps_enabled=ie.capsMaskMarker_enabled||ie.capsMaskAnchor_enabledSE[0]||ie.capsMaskAnchor_enabledSE[1],ie.lineMask_enabled=ie.caps_enabled||ie.lineMask_outlineMode,(ie.lineMask_enabled&amp;&amp;!ie.lineMask_outlineMode||ie.lineOutline_enabled)&amp;&amp;[&quot;x&quot;,&quot;y&quot;].forEach(function(e){var t=&quot;maskBGRect_&quot;+e;We(ne,oe,t,ae=ie[t])&amp;&amp;(ne.maskBGRect[e].baseVal.value=ae,le=!0)}),We(ne,oe,&quot;lineMask_enabled&quot;,ae=ie.lineMask_enabled)&amp;&amp;(ne.lineFace.style.mask=ae?&quot;url(#&quot;+ne.lineMaskId+&quot;)&quot;:&quot;none&quot;,le=!0,Q&amp;&amp;Ae(ne,ne.lineMask)),ie.lineMask_enabled&amp;&amp;(We(ne,oe,&quot;lineMask_outlineMode&quot;,ae=ie.lineMask_outlineMode)&amp;&amp;(ae?(ne.lineMaskBG.style.display=&quot;none&quot;,ne.lineMaskShape.style.display=&quot;inline&quot;):(ne.lineMaskBG.style.display=&quot;inline&quot;,ne.lineMaskShape.style.display=&quot;none&quot;),le=!0),[&quot;x&quot;,&quot;y&quot;].forEach(function(e){var t=&quot;lineMask_&quot;+e;We(ne,oe,t,ae=ie[t])&amp;&amp;(ne.lineMask[e].baseVal.value=ae,le=!0)}),We(ne,oe,&quot;caps_enabled&quot;,ae=ie.caps_enabled)&amp;&amp;(ne.lineMaskCaps.style.display=ne.lineOutlineMaskCaps.style.display=ae?&quot;inline&quot;:&quot;none&quot;,le=!0,Q&amp;&amp;Ae(ne,ne.capsMaskLine)),ie.caps_enabled&amp;&amp;([0,1].forEach(function(e){var t;We(ne,oe.capsMaskAnchor_enabledSE,e,ae=ie.capsMaskAnchor_enabledSE[e])&amp;&amp;(ne.capsMaskAnchorSE[e].style.display=ae?&quot;inline&quot;:&quot;none&quot;,le=!0,Q&amp;&amp;Ae(ne,ne.lineMask)),ie.capsMaskAnchor_enabledSE[e]&amp;&amp;(Me(t=ie.capsMaskAnchor_pathDataSE[e],oe.capsMaskAnchor_pathDataSE[e])&amp;&amp;(ne.capsMaskAnchorSE[e].setPathData(t),oe.capsMaskAnchor_pathDataSE[e]=t,le=!0),We(ne,oe.capsMaskAnchor_strokeWidthSE,e,ae=ie.capsMaskAnchor_strokeWidthSE[e])&amp;&amp;(ne.capsMaskAnchorSE[e].style.strokeWidth=ae+&quot;px&quot;,le=!0))}),We(ne,oe,&quot;capsMaskMarker_enabled&quot;,ae=ie.capsMaskMarker_enabled)&amp;&amp;(ne.capsMaskLine.style.display=ae?&quot;inline&quot;:&quot;none&quot;,le=!0),ie.capsMaskMarker_enabled&amp;&amp;[0,1].forEach(function(e){var t=ie.capsMaskMarker_plugSE[e],n=t!==w?I[L[t]]:null,a=Ne(e,n);We(ne,oe.capsMaskMarker_enabledSE,e,ae=ie.capsMaskMarker_enabledSE[e])&amp;&amp;(ne.capsMaskLine.style[a.prop]=ae?&quot;url(#&quot;+ne.lineMaskMarkerIdSE[e]+&quot;)&quot;:&quot;none&quot;,le=!0),ie.capsMaskMarker_enabledSE[e]&amp;&amp;(We(ne,oe.capsMaskMarker_plugSE,e,t)&amp;&amp;(ne.capsMaskMarkerShapeSE[e].href.baseVal=&quot;#&quot;+n.elmId,Pe(ne,ne.capsMaskMarkerSE[e],a.orient,n.bBox,ne.svg,ne.capsMaskMarkerShapeSE[e],ne.capsMaskLine),le=!0,X&amp;&amp;(Ae(ne,ne.capsMaskLine),Ae(ne,ne.lineFace))),[&quot;markerWidth&quot;,&quot;markerHeight&quot;].forEach(function(t){var n=&quot;capsMaskMarker_&quot;+t+&quot;SE&quot;;We(ne,oe[n],e,ae=ie[n][e])&amp;&amp;(ne.capsMaskMarkerSE[e][t].baseVal.value=ae,le=!0)}))}))),ie.lineOutline_enabled&amp;&amp;[&quot;x&quot;,&quot;y&quot;].forEach(function(e){var t=&quot;lineOutlineMask_&quot;+e;We(ne,oe,t,ae=ie[t])&amp;&amp;(ne.lineOutlineMask[e].baseVal.value=ae,le=!0)}),le),n.effect&amp;&amp;(ue=(re=t).curStats,he=re.aplStats,Object.keys(e).forEach(function(t){var n=e[t],a=t+&quot;_enabled&quot;,i=t+&quot;_options&quot;,o=ue[i];We(re,he,a,se=ue[a])?(se&amp;&amp;(he[i]=de(o)),n[se?&quot;init&quot;:&quot;remove&quot;](re)):se&amp;&amp;ce(o,he[i])&amp;&amp;(n.remove(re),he[a]=!0,he[i]=de(o),n.init(re))})),(Y||Q)&amp;&amp;pe.line&amp;&amp;!pe.path&amp;&amp;Ae(t,t.lineShape),Y&amp;&amp;pe.plug&amp;&amp;!pe.line&amp;&amp;Ae(t,t.plugsFace),Ve(t)}function ze(e,t){return{duration:ee(e.duration)&amp;&amp;e.duration>0?e.duration:t.duration,timing:te.validTiming(e.timing)?e.timing:de(t.timing)}}function je(e,n,a,i){var o,l=e.curStats,r=e.aplStats,s={};function u(){[&quot;show_on&quot;,&quot;show_effect&quot;,&quot;show_animOptions&quot;].forEach(function(e){r[e]=l[e]})}l.show_on=n,a&amp;&amp;t[a]&amp;&amp;(l.show_effect=a,l.show_animOptions=ze($(i)?i:{},t[a].defaultAnimOptions)),s.show_on=l.show_on!==r.show_on,s.show_effect=l.show_effect!==r.show_effect,s.show_animOptions=ce(l.show_animOptions,r.show_animOptions),s.show_effect||s.show_animOptions?l.show_inAnim?(o=s.show_effect?t[r.show_effect].stop(e,!0,!0):t[r.show_effect].stop(e),u(),t[r.show_effect].init(e,o)):s.show_on&amp;&amp;(r.show_effect&amp;&amp;s.show_effect&amp;&amp;t[r.show_effect].stop(e,!0,!0),u(),t[r.show_effect].init(e)):s.show_on&amp;&amp;(u(),t[r.show_effect].start(e))}function He(e,t,n){var a={props:e,optionName:n};return!(!(e.attachments.indexOf(t)<0)||t.conf.bind&amp;&amp;!t.conf.bind(t,a))&amp;&amp;(e.attachments.push(t),t.boundTargets.push(a),!0)}function Ue(e,t,n){var a=e.attachments.indexOf(t);a>-1&amp;&amp;e.attachments.splice(a,1),t.boundTargets.some(function(n,i){return n.props===e&amp;&amp;(t.conf.unbind&amp;&amp;t.conf.unbind(t,n),a=i,!0)})&amp;&amp;(t.boundTargets.splice(a,1),n||Le(function(){t.boundTargets.length||o(t)}))}function Ze(o,l){var r,s,u=o.options,h={};function p(e,t,n,a,i){var o={};return n?null!=a?(o.container=e[n],o.key=a):(o.container=e,o.key=n):(o.container=e,o.key=t),o.default=i,o.acceptsAuto=null==o.default,o}function c(e,t,n,a,i,o,l){var r,s,u,h=p(e,n,i,o,l);return null!=t[n]&amp;&amp;(s=(t[n]+&quot;&quot;).toLowerCase())&amp;&amp;(h.acceptsAuto&amp;&amp;s===V||(u=a[s]))&amp;&amp;u!==h.container[h.key]&amp;&amp;(h.container[h.key]=u,r=!0),null!=h.container[h.key]||h.acceptsAuto||(h.container[h.key]=h.default,r=!0),r}function f(e,t,n,a,i,o,l,r,s){var u,h,c,d,f=p(e,n,i,o,l);if(!a){if(null==f.default)throw new Error(&quot;Invalid `type`: &quot;+n);a=typeof f.default}return null!=t[n]&amp;&amp;(f.acceptsAuto&amp;&amp;(t[n]+&quot;&quot;).toLowerCase()===V||(c=h=t[n],(&quot;number&quot;===(d=a)?ee(c):typeof c===d)&amp;&amp;(h=s&amp;&amp;&quot;string&quot;===a&amp;&amp;h?h.trim():h,1)&amp;&amp;(!r||r(h))))&amp;&amp;h!==f.container[f.key]&amp;&amp;(f.container[f.key]=h,u=!0),null!=f.container[f.key]||f.acceptsAuto||(f.container[f.key]=f.default,u=!0),u}if(l=l||{},[&quot;start&quot;,&quot;end&quot;].forEach(function(e,t){var n=l[e],a=!1;if(n&amp;&amp;(ye(n)||(a=i(n,&quot;anchor&quot;)))&amp;&amp;n!==u.anchorSE[t]){if(!1!==o.optionIsAttach.anchorSE[t]&amp;&amp;Ue(o,he[u.anchorSE[t]._id]),a&amp;&amp;!He(o,he[n._id],e))throw new Error(&quot;Can't bind attachment&quot;);u.anchorSE[t]=n,o.optionIsAttach.anchorSE[t]=a,s=h.position=!0}}),!u.anchorSE[0]||!u.anchorSE[1]||u.anchorSE[0]===u.anchorSE[1])throw new Error(&quot;`start` and `end` are required.&quot;);s&amp;&amp;(r=function(e,t){var n,a,i;if(!(n=Se(e))||!(a=Se(t)))throw new Error(&quot;Cannot get frames.&quot;);return n.length&amp;&amp;a.length&amp;&amp;(n.reverse(),a.reverse(),n.some(function(e){return a.some(function(t){return t===e&amp;&amp;(i=t.contentWindow,!0)})})),i||window}(!1!==o.optionIsAttach.anchorSE[0]?he[u.anchorSE[0]._id].element:u.anchorSE[0],!1!==o.optionIsAttach.anchorSE[1]?he[u.anchorSE[1]._id].element:u.anchorSE[1]))!==o.baseWindow&amp;&amp;(!function(n,a){var o,l,r,s,u,h,p,c,f,y,m=n.aplStats,S=a.document,g=d+&quot;-&quot;+n._id;function _(e){var t=l.appendChild(S.createElementNS(U,&quot;mask&quot;));return t.id=e,t.maskUnits.baseVal=SVGUnitTypes.SVG_UNIT_TYPE_USERSPACEONUSE,[t.x,t.y,t.width,t.height].forEach(function(e){e.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX,0)}),t}function v(e){var t=l.appendChild(S.createElementNS(U,&quot;marker&quot;));return t.id=e,t.markerUnits.baseVal=SVGMarkerElement.SVG_MARKERUNITS_STROKEWIDTH,t.viewBox.baseVal||t.setAttribute(&quot;viewBox&quot;,&quot;0 0 0 0&quot;),t}function E(e){return[e.width,e.height].forEach(function(e){e.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PERCENTAGE,100)}),e}n.pathList={},Te(m,ie),Object.keys(e).forEach(function(t){var a=t+&quot;_enabled&quot;;m[a]&amp;&amp;(e[t].remove(n),m[a]=!1)}),n.baseWindow&amp;&amp;n.svg&amp;&amp;n.baseWindow.document.body.removeChild(n.svg),n.baseWindow=a,Re(a),n.bodyOffset=Be(a),n.svg=o=S.createElementNS(U,&quot;svg&quot;),o.className.baseVal=d,o.viewBox.baseVal||o.setAttribute(&quot;viewBox&quot;,&quot;0 0 0 0&quot;),n.defs=l=o.appendChild(S.createElementNS(U,&quot;defs&quot;)),n.linePath=s=l.appendChild(S.createElementNS(U,&quot;path&quot;)),s.id=u=g+&quot;-line-path&quot;,s.className.baseVal=d+&quot;-line-path&quot;,Q&amp;&amp;(s.style.fill=&quot;none&quot;),n.lineShape=s=l.appendChild(S.createElementNS(U,&quot;use&quot;)),s.id=h=g+&quot;-line-shape&quot;,s.href.baseVal=&quot;#&quot;+u,(r=l.appendChild(S.createElementNS(U,&quot;g&quot;))).id=p=g+&quot;-caps&quot;,n.capsMaskAnchorSE=[0,1].map(function(){var e=r.appendChild(S.createElementNS(U,&quot;path&quot;));return e.className.baseVal=d+&quot;-caps-mask-anchor&quot;,e}),n.lineMaskMarkerIdSE=[g+&quot;-caps-mask-marker-0&quot;,g+&quot;-caps-mask-marker-1&quot;],n.capsMaskMarkerSE=[0,1].map(function(e){return v(n.lineMaskMarkerIdSE[e])}),n.capsMaskMarkerShapeSE=[0,1].map(function(e){var t=n.capsMaskMarkerSE[e].appendChild(S.createElementNS(U,&quot;use&quot;));return t.className.baseVal=d+&quot;-caps-mask-marker-shape&quot;,t}),n.capsMaskLine=s=r.appendChild(S.createElementNS(U,&quot;use&quot;)),s.className.baseVal=d+&quot;-caps-mask-line&quot;,s.href.baseVal=&quot;#&quot;+h,n.maskBGRect=s=E(l.appendChild(S.createElementNS(U,&quot;rect&quot;))),s.id=c=g+&quot;-mask-bg-rect&quot;,s.className.baseVal=d+&quot;-mask-bg-rect&quot;,Q&amp;&amp;(s.style.fill=&quot;white&quot;),n.lineMask=E(_(n.lineMaskId=g+&quot;-line-mask&quot;)),n.lineMaskBG=s=n.lineMask.appendChild(S.createElementNS(U,&quot;use&quot;)),s.href.baseVal=&quot;#&quot;+c,n.lineMaskShape=s=n.lineMask.appendChild(S.createElementNS(U,&quot;use&quot;)),s.className.baseVal=d+&quot;-line-mask-shape&quot;,s.href.baseVal=&quot;#&quot;+u,s.style.display=&quot;none&quot;,n.lineMaskCaps=s=n.lineMask.appendChild(S.createElementNS(U,&quot;use&quot;)),s.href.baseVal=&quot;#&quot;+p,n.lineOutlineMask=E(_(f=g+&quot;-line-outline-mask&quot;)),(s=n.lineOutlineMask.appendChild(S.createElementNS(U,&quot;use&quot;))).href.baseVal=&quot;#&quot;+c,n.lineOutlineMaskShape=s=n.lineOutlineMask.appendChild(S.createElementNS(U,&quot;use&quot;)),s.className.baseVal=d+&quot;-line-outline-mask-shape&quot;,s.href.baseVal=&quot;#&quot;+u,n.lineOutlineMaskCaps=s=n.lineOutlineMask.appendChild(S.createElementNS(U,&quot;use&quot;)),s.href.baseVal=&quot;#&quot;+p,n.face=o.appendChild(S.createElementNS(U,&quot;g&quot;)),n.lineFace=s=n.face.appendChild(S.createElementNS(U,&quot;use&quot;)),s.href.baseVal=&quot;#&quot;+h,n.lineOutlineFace=s=n.face.appendChild(S.createElementNS(U,&quot;use&quot;)),s.href.baseVal=&quot;#&quot;+h,s.style.mask=&quot;url(#&quot;+f+&quot;)&quot;,s.style.display=&quot;none&quot;,n.plugMaskIdSE=[g+&quot;-plug-mask-0&quot;,g+&quot;-plug-mask-1&quot;],n.plugMaskSE=[0,1].map(function(e){return _(n.plugMaskIdSE[e])}),n.plugMaskShapeSE=[0,1].map(function(e){var t=n.plugMaskSE[e].appendChild(S.createElementNS(U,&quot;use&quot;));return t.className.baseVal=d+&quot;-plug-mask-shape&quot;,t}),y=[],n.plugOutlineMaskSE=[0,1].map(function(e){return _(y[e]=g+&quot;-plug-outline-mask-&quot;+e)}),n.plugOutlineMaskShapeSE=[0,1].map(function(e){var t=n.plugOutlineMaskSE[e].appendChild(S.createElementNS(U,&quot;use&quot;));return t.className.baseVal=d+&quot;-plug-outline-mask-shape&quot;,t}),n.plugMarkerIdSE=[g+&quot;-plug-marker-0&quot;,g+&quot;-plug-marker-1&quot;],n.plugMarkerSE=[0,1].map(function(e){var t=v(n.plugMarkerIdSE[e]);return Q&amp;&amp;(t.markerUnits.baseVal=SVGMarkerElement.SVG_MARKERUNITS_USERSPACEONUSE),t}),n.plugMarkerShapeSE=[0,1].map(function(e){return n.plugMarkerSE[e].appendChild(S.createElementNS(U,&quot;g&quot;))}),n.plugFaceSE=[0,1].map(function(e){return n.plugMarkerShapeSE[e].appendChild(S.createElementNS(U,&quot;use&quot;))}),n.plugOutlineFaceSE=[0,1].map(function(e){var t=n.plugMarkerShapeSE[e].appendChild(S.createElementNS(U,&quot;use&quot;));return t.style.mask=&quot;url(#&quot;+y[e]+&quot;)&quot;,t.style.display=&quot;none&quot;,t}),n.plugsFace=s=n.face.appendChild(S.createElementNS(U,&quot;use&quot;)),s.className.baseVal=d+&quot;-plugs-face&quot;,s.href.baseVal=&quot;#&quot;+h,s.style.display=&quot;none&quot;,n.curStats.show_inAnim?(n.isShown=1,t[m.show_effect].stop(n,!0)):n.isShown||(o.style.visibility=&quot;hidden&quot;),S.body.appendChild(o),[0,1,2].forEach(function(e){var t,a=n.options.labelSEM[e];a&amp;&amp;i(a,&quot;label&quot;)&amp;&amp;(t=he[a._id]).conf.initSvg&amp;&amp;t.conf.initSvg(t,n)})}(o,r),h.line=h.plug=h.lineOutline=h.plugOutline=h.faces=h.effect=!0),h.position=c(u,l,&quot;path&quot;,k,null,null,J.path)||h.position,h.position=c(u,l,&quot;startSocket&quot;,g,&quot;socketSE&quot;,0)||h.position,h.position=c(u,l,&quot;endSocket&quot;,g,&quot;socketSE&quot;,1)||h.position,[l.startSocketGravity,l.endSocketGravity].forEach(function(e,t){var n,a,i=!1;null!=e&amp;&amp;(Array.isArray(e)?ee(e[0])&amp;&amp;ee(e[1])&amp;&amp;(i=[e[0],e[1]],Array.isArray(u.socketGravitySE[t])&amp;&amp;(n=i,a=u.socketGravitySE[t],n.length===a.length&amp;&amp;n.every(function(e,t){return e===a[t]}))&amp;&amp;(i=!1)):((e+&quot;&quot;).toLowerCase()===V?i=null:ee(e)&amp;&amp;e>=0&amp;&amp;(i=e),i===u.socketGravitySE[t]&amp;&amp;(i=!1)),!1!==i&amp;&amp;(u.socketGravitySE[t]=i,h.position=!0))}),h.line=f(u,l,&quot;color&quot;,null,&quot;lineColor&quot;,null,J.lineColor,null,!0)||h.line,h.line=f(u,l,&quot;size&quot;,null,&quot;lineSize&quot;,null,J.lineSize,function(e){return e>0})||h.line,[&quot;startPlug&quot;,&quot;endPlug&quot;].forEach(function(e,t){h.plug=c(u,l,e,C,&quot;plugSE&quot;,t,J.plugSE[t])||h.plug,h.plug=f(u,l,e+&quot;Color&quot;,&quot;string&quot;,&quot;plugColorSE&quot;,t,null,null,!0)||h.plug,h.plug=f(u,l,e+&quot;Size&quot;,null,&quot;plugSizeSE&quot;,t,J.plugSizeSE[t],function(e){return e>0})||h.plug}),h.lineOutline=f(u,l,&quot;outline&quot;,null,&quot;lineOutlineEnabled&quot;,null,J.lineOutlineEnabled)||h.lineOutline,h.lineOutline=f(u,l,&quot;outlineColor&quot;,null,&quot;lineOutlineColor&quot;,null,J.lineOutlineColor,null,!0)||h.lineOutline,h.lineOutline=f(u,l,&quot;outlineSize&quot;,null,&quot;lineOutlineSize&quot;,null,J.lineOutlineSize,function(e){return e>0&amp;&amp;e<=.48})||h.lineOutline,[&quot;startPlugOutline&quot;,&quot;endPlugOutline&quot;].forEach(function(e,t){h.plugOutline=f(u,l,e,null,&quot;plugOutlineEnabledSE&quot;,t,J.plugOutlineEnabledSE[t])||h.plugOutline,h.plugOutline=f(u,l,e+&quot;Color&quot;,&quot;string&quot;,&quot;plugOutlineColorSE&quot;,t,null,null,!0)||h.plugOutline,h.plugOutline=f(u,l,e+&quot;Size&quot;,null,&quot;plugOutlineSizeSE&quot;,t,J.plugOutlineSizeSE[t],function(e){return e>=1})||h.plugOutline}),[&quot;startLabel&quot;,&quot;endLabel&quot;,&quot;middleLabel&quot;].forEach(function(e,t){var r,s,h,p=l[e],c=u.labelSEM[t]&amp;&amp;!o.optionIsAttach.labelSEM[t]?he[u.labelSEM[t]._id].text:u.labelSEM[t],d=!1;if((r=&quot;string&quot;==typeof p)&amp;&amp;(p=p.trim()),(r||p&amp;&amp;(d=i(p,&quot;label&quot;)))&amp;&amp;p!==c){if(u.labelSEM[t]&amp;&amp;(Ue(o,he[u.labelSEM[t]._id]),u.labelSEM[t]=&quot;&quot;),p){if(d?(s=he[(h=p)._id]).boundTargets.slice().forEach(function(e){s.conf.removeOption(s,e)}):h=new a(n.captionLabel,[p]),!He(o,he[h._id],e))throw new Error(&quot;Can't bind attachment&quot;);u.labelSEM[t]=h}o.optionIsAttach.labelSEM[t]=d}}),Object.keys(e).forEach(function(t){var n,a,i=e[t],r=t+&quot;_enabled&quot;,s=t+&quot;_options&quot;;function p(e){var t={};return i.optionsConf.forEach(function(n){var a=n[0],i=n[3];null==n[4]||t[i]||(t[i]=[]),(&quot;function&quot;==typeof a?a:&quot;id&quot;===a?c:f).apply(null,[t,e].concat(n.slice(1)))}),t}function d(e){var n,a=t+&quot;_animOptions&quot;;return e.hasOwnProperty(&quot;animation&quot;)?$(e.animation)?n=o.curStats[a]=ze(e.animation,i.defaultAnimOptions):(n=!!e.animation,o.curStats[a]=n?ze({},i.defaultAnimOptions):null):(n=!!i.defaultEnabled,o.curStats[a]=n?ze({},i.defaultAnimOptions):null),n}l.hasOwnProperty(t)&amp;&amp;(n=l[t],$(n)?(o.curStats[r]=!0,a=o.curStats[s]=p(n),i.anim&amp;&amp;(o.curStats[s].animation=d(n))):(a=o.curStats[r]=!!n)&amp;&amp;(o.curStats[s]=p({}),i.anim&amp;&amp;(o.curStats[s].animation=d({}))),ce(a,u[t])&amp;&amp;(u[t]=a,h.effect=!0))}),De(o,h)}function Ye(n,a,i){var o={options:{anchorSE:[],socketSE:[],socketGravitySE:[],plugSE:[],plugColorSE:[],plugSizeSE:[],plugOutlineEnabledSE:[],plugOutlineColorSE:[],plugOutlineSizeSE:[],labelSEM:[&quot;&quot;,&quot;&quot;,&quot;&quot;]},optionIsAttach:{anchorSE:[!1,!1],labelSEM:[!1,!1,!1]},curStats:{},aplStats:{},attachments:[],events:{},reflowTargets:[]};Te(o.curStats,ie),Te(o.aplStats,ie),Object.keys(e).forEach(function(t){var n=e[t].stats;Te(o.curStats,n),Te(o.aplStats,n),o.options[t]=!1}),Te(o.curStats,oe),Te(o.aplStats,oe),o.curStats.show_effect=le,o.curStats.show_animOptions=de(t[le].defaultAnimOptions),Object.defineProperty(this,&quot;_id&quot;,{value:++ue}),o._id=this._id,se[this._id]=o,1===arguments.length&amp;&amp;(i=n,n=null),i=i||{},(n||a)&amp;&amp;(i=de(i),n&amp;&amp;(i.start=n),a&amp;&amp;(i.end=a)),o.isShown=o.aplStats.show_on=!i.hide,this.setOptions(i)}return e={dash:{stats:{dash_len:{},dash_gap:{},dash_maxOffset:{}},anim:!0,defaultAnimOptions:{duration:1e3,timing:&quot;linear&quot;},optionsConf:[[&quot;type&quot;,&quot;len&quot;,&quot;number&quot;,null,null,null,function(e){return e>0}],[&quot;type&quot;,&quot;gap&quot;,&quot;number&quot;,null,null,null,function(e){return e>0}]],init:function(t){Ie(t,&quot;apl_line_strokeWidth&quot;,e.dash.update),t.lineFace.style.strokeDashoffset=0,e.dash.update(t)},remove:function(t){var n=t.curStats;Ce(t,&quot;apl_line_strokeWidth&quot;,e.dash.update),n.dash_animId&amp;&amp;(te.remove(n.dash_animId),n.dash_animId=null),t.lineFace.style.strokeDasharray=&quot;none&quot;,t.lineFace.style.strokeDashoffset=0,Te(t.aplStats,e.dash.stats)},update:function(e){var t,n=e.curStats,a=e.aplStats,i=a.dash_options,o=!1;n.dash_len=i.len||2*a.line_strokeWidth,n.dash_gap=i.gap||a.line_strokeWidth,n.dash_maxOffset=n.dash_len+n.dash_gap,o=We(e,a,&quot;dash_len&quot;,n.dash_len)||o,(o=We(e,a,&quot;dash_gap&quot;,n.dash_gap)||o)&amp;&amp;(e.lineFace.style.strokeDasharray=a.dash_len+&quot;,&quot;+a.dash_gap),n.dash_animOptions?(o=We(e,a,&quot;dash_maxOffset&quot;,n.dash_maxOffset),a.dash_animOptions&amp;&amp;(o||ce(n.dash_animOptions,a.dash_animOptions))&amp;&amp;(n.dash_animId&amp;&amp;(t=te.stop(n.dash_animId),te.remove(n.dash_animId)),a.dash_animOptions=null),a.dash_animOptions||(n.dash_animId=te.add(function(e){return(1-e)*a.dash_maxOffset+&quot;px&quot;},function(t){e.lineFace.style.strokeDashoffset=t},n.dash_animOptions.duration,0,n.dash_animOptions.timing,!1,t),a.dash_animOptions=de(n.dash_animOptions))):a.dash_animOptions&amp;&amp;(n.dash_animId&amp;&amp;(te.remove(n.dash_animId),n.dash_animId=null),e.lineFace.style.strokeDashoffset=0,a.dash_animOptions=null)}},gradient:{stats:{gradient_colorSE:{hasSE:!0},gradient_pointSE:{hasSE:!0,hasProps:!0}},optionsConf:[[&quot;type&quot;,&quot;startColor&quot;,&quot;string&quot;,&quot;colorSE&quot;,0,null,null,!0],[&quot;type&quot;,&quot;endColor&quot;,&quot;string&quot;,&quot;colorSE&quot;,1,null,null,!0]],init:function(t){var n,a=t.baseWindow.document,i=t.defs,o=d+&quot;-&quot;+t._id+&quot;-gradient&quot;;t.efc_gradient_gradient=n=i.appendChild(a.createElementNS(U,&quot;linearGradient&quot;)),n.id=o,n.gradientUnits.baseVal=SVGUnitTypes.SVG_UNIT_TYPE_USERSPACEONUSE,[n.x1,n.y1,n.x2,n.y2].forEach(function(e){e.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX,0)}),t.efc_gradient_stopSE=[0,1].map(function(e){var n=t.efc_gradient_gradient.appendChild(a.createElementNS(U,&quot;stop&quot;));try{n.offset.baseVal=e}catch(t){if(t.code!==DOMException.NO_MODIFICATION_ALLOWED_ERR)throw t;n.setAttribute(&quot;offset&quot;,e)}return n}),Ie(t,&quot;cur_plug_colorSE&quot;,e.gradient.update),Ie(t,&quot;apl_path&quot;,e.gradient.update),t.curStats.line_altColor=!0,t.lineFace.style.stroke=&quot;url(#&quot;+o+&quot;)&quot;,e.gradient.update(t)},remove:function(t){t.efc_gradient_gradient&amp;&amp;(t.defs.removeChild(t.efc_gradient_gradient),t.efc_gradient_gradient=t.efc_gradient_stopSE=null),Ce(t,&quot;cur_plug_colorSE&quot;,e.gradient.update),Ce(t,&quot;apl_path&quot;,e.gradient.update),t.curStats.line_altColor=!1,t.lineFace.style.stroke=t.curStats.line_color,Te(t.aplStats,e.gradient.stats)},update:function(e){var t,n,a=e.curStats,i=e.aplStats,o=i.gradient_options,l=e.pathList.animVal||e.pathList.baseVal;[0,1].forEach(function(e){a.gradient_colorSE[e]=o.colorSE[e]||a.plug_colorSE[e]}),n=l[0][0],a.gradient_pointSE[0]={x:n.x,y:n.y},n=(t=l[l.length-1])[t.length-1],a.gradient_pointSE[1]={x:n.x,y:n.y},[0,1].forEach(function(t){var n;We(e,i.gradient_colorSE,t,n=a.gradient_colorSE[t])&amp;&amp;(Q?(n=fe(n),e.efc_gradient_stopSE[t].style.stopColor=n[1],e.efc_gradient_stopSE[t].style.stopOpacity=n[0]):e.efc_gradient_stopSE[t].style.stopColor=n),[&quot;x&quot;,&quot;y&quot;].forEach(function(o){(n=a.gradient_pointSE[t][o])!==i.gradient_pointSE[t][o]&amp;&amp;(e.efc_gradient_gradient[o+(t+1)].baseVal.value=i.gradient_pointSE[t][o]=n)})})}},dropShadow:{stats:{dropShadow_dx:{},dropShadow_dy:{},dropShadow_blur:{},dropShadow_color:{},dropShadow_opacity:{},dropShadow_x:{},dropShadow_y:{}},optionsConf:[[&quot;type&quot;,&quot;dx&quot;,null,null,null,2],[&quot;type&quot;,&quot;dy&quot;,null,null,null,4],[&quot;type&quot;,&quot;blur&quot;,null,null,null,3,function(e){return e>=0}],[&quot;type&quot;,&quot;color&quot;,null,null,null,&quot;#000&quot;,null,!0],[&quot;type&quot;,&quot;opacity&quot;,null,null,null,.8,function(e){return e>=0&amp;&amp;e<=1}]],init:function(t){var n,a,i,o,l,r=t.baseWindow.document,s=t.defs,h=d+&quot;-&quot;+t._id+&quot;-dropShadow&quot;,p=(n=r,a=h,l={},&quot;boolean&quot;!=typeof u&amp;&amp;(u=!!window.SVGFEDropShadowElement&amp;&amp;!Q),l.elmsAppend=[l.elmFilter=i=n.createElementNS(U,&quot;filter&quot;)],i.filterUnits.baseVal=SVGUnitTypes.SVG_UNIT_TYPE_USERSPACEONUSE,i.x.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX,0),i.y.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX,0),i.width.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PERCENTAGE,100),i.height.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PERCENTAGE,100),i.id=a,u?(l.elmOffset=l.elmBlur=o=i.appendChild(n.createElementNS(U,&quot;feDropShadow&quot;)),l.styleFlood=o.style):(l.elmBlur=i.appendChild(n.createElementNS(U,&quot;feGaussianBlur&quot;)),l.elmOffset=o=i.appendChild(n.createElementNS(U,&quot;feOffset&quot;)),o.result.baseVal=&quot;offsetblur&quot;,o=i.appendChild(n.createElementNS(U,&quot;feFlood&quot;)),l.styleFlood=o.style,(o=i.appendChild(n.createElementNS(U,&quot;feComposite&quot;))).in2.baseVal=&quot;offsetblur&quot;,o.operator.baseVal=SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_IN,(o=i.appendChild(n.createElementNS(U,&quot;feMerge&quot;))).appendChild(n.createElementNS(U,&quot;feMergeNode&quot;)),o.appendChild(n.createElementNS(U,&quot;feMergeNode&quot;)).in1.baseVal=&quot;SourceGraphic&quot;),l);[&quot;elmFilter&quot;,&quot;elmOffset&quot;,&quot;elmBlur&quot;,&quot;styleFlood&quot;,&quot;elmsAppend&quot;].forEach(function(e){t[&quot;efc_dropShadow_&quot;+e]=p[e]}),p.elmsAppend.forEach(function(e){s.appendChild(e)}),t.face.setAttribute(&quot;filter&quot;,&quot;url(#&quot;+h+&quot;)&quot;),Ie(t,&quot;new_edge4viewBox&quot;,e.dropShadow.adjustEdge),e.dropShadow.update(t)},remove:function(t){var n=t.defs;t.efc_dropShadow_elmsAppend&amp;&amp;(t.efc_dropShadow_elmsAppend.forEach(function(e){n.removeChild(e)}),t.efc_dropShadow_elmFilter=t.efc_dropShadow_elmOffset=t.efc_dropShadow_elmBlur=t.efc_dropShadow_styleFlood=t.efc_dropShadow_elmsAppend=null),Ce(t,&quot;new_edge4viewBox&quot;,e.dropShadow.adjustEdge),De(t,{}),t.face.removeAttribute(&quot;filter&quot;),Te(t.aplStats,e.dropShadow.stats)},update:function(e){var t,n,a=e.curStats,i=e.aplStats,o=i.dropShadow_options;a.dropShadow_dx=t=o.dx,We(e,i,&quot;dropShadow_dx&quot;,t)&amp;&amp;(e.efc_dropShadow_elmOffset.dx.baseVal=t,n=!0),a.dropShadow_dy=t=o.dy,We(e,i,&quot;dropShadow_dy&quot;,t)&amp;&amp;(e.efc_dropShadow_elmOffset.dy.baseVal=t,n=!0),a.dropShadow_blur=t=o.blur,We(e,i,&quot;dropShadow_blur&quot;,t)&amp;&amp;(e.efc_dropShadow_elmBlur.setStdDeviation(t,t),n=!0),n&amp;&amp;De(e,{}),a.dropShadow_color=t=o.color,We(e,i,&quot;dropShadow_color&quot;,t)&amp;&amp;(e.efc_dropShadow_styleFlood.floodColor=t),a.dropShadow_opacity=t=o.opacity,We(e,i,&quot;dropShadow_opacity&quot;,t)&amp;&amp;(e.efc_dropShadow_styleFlood.floodOpacity=t)},adjustEdge:function(e,t){var n,a,i=e.curStats,o=e.aplStats;null!=i.dropShadow_dx&amp;&amp;(n=3*i.dropShadow_blur,(a={x1:t.x1-n+i.dropShadow_dx,y1:t.y1-n+i.dropShadow_dy,x2:t.x2+n+i.dropShadow_dx,y2:t.y2+n+i.dropShadow_dy}).x1<t.x1&amp;&amp;(t.x1=a.x1),a.y1<t.y1&amp;&amp;(t.y1=a.y1),a.x2>t.x2&amp;&amp;(t.x2=a.x2),a.y2>t.y2&amp;&amp;(t.y2=a.y2),[&quot;x&quot;,&quot;y&quot;].forEach(function(n){var a,l=&quot;dropShadow_&quot;+n;i[l]=a=t[n+&quot;1&quot;],We(e,o,l,a)&amp;&amp;(e.efc_dropShadow_elmFilter[n].baseVal.value=a)}))}}},Object.keys(e).forEach(function(t){var n=e[t],a=n.stats;a[t+&quot;_enabled&quot;]={iniValue:!1},a[t+&quot;_options&quot;]={hasProps:!0},n.anim&amp;&amp;(a[t+&quot;_animOptions&quot;]={},a[t+&quot;_animId&quot;]={})}),t={none:{defaultAnimOptions:{},init:function(e,n){var a=e.curStats;a.show_animId&amp;&amp;(te.remove(a.show_animId),a.show_animId=null),t.none.start(e,n)},start:function(e,n){t.none.stop(e,!0)},stop:function(e,t,n){var a=e.curStats;return n=null!=n?n:e.aplStats.show_on,a.show_inAnim=!1,t&amp;&amp;Ge(e,n),n?1:0}},fade:{defaultAnimOptions:{duration:300,timing:&quot;linear&quot;},init:function(e,n){var a=e.curStats,i=e.aplStats;a.show_animId&amp;&amp;te.remove(a.show_animId),a.show_animId=te.add(function(e){return e},function(n,a){a?t.fade.stop(e,!0):(e.svg.style.opacity=n+&quot;&quot;,Z&amp;&amp;(Ae(e,e.svg),Ve(e)))},i.show_animOptions.duration,1,i.show_animOptions.timing,null,!1),t.fade.start(e,n)},start:function(e,t){var n,a=e.curStats;a.show_inAnim&amp;&amp;(n=te.stop(a.show_animId)),Ge(e,1),a.show_inAnim=!0,te.start(a.show_animId,!e.aplStats.show_on,null!=t?t:n)},stop:function(e,t,n){var a,i=e.curStats;return n=null!=n?n:e.aplStats.show_on,a=i.show_inAnim?te.stop(i.show_animId):n?1:0,i.show_inAnim=!1,t&amp;&amp;(e.svg.style.opacity=n?&quot;&quot;:&quot;0&quot;,Ge(e,n)),a}},draw:{defaultAnimOptions:{duration:500,timing:[.58,0,.42,1]},init:function(e,n){var a=e.curStats,i=e.aplStats,o=e.pathList.baseVal,l=Oe(o),r=l.segsLen,s=l.lenAll;a.show_animId&amp;&amp;te.remove(a.show_animId),a.show_animId=te.add(function(e){var t,n,a,i,l=-1;if(0===e)n=[[o[0][0],o[0][0]]];else if(1===e)n=o;else{for(t=s*e,n=[];t>=r[++l];)n.push(o[l]),t-=r[l];t&amp;&amp;(2===(a=o[l]).length?n.push([a[0],ve(a[0],a[1],t/r[l])]):(i=xe(a[0],a[1],a[2],a[3],ke(a[0],a[1],a[2],a[3],t)),n.push([a[0],i.fromP1,i.fromP2,i])))}return n},function(n,a){a?t.draw.stop(e,!0):(e.pathList.animVal=n,De(e,{path:!0}))},i.show_animOptions.duration,1,i.show_animOptions.timing,null,!1),t.draw.start(e,n)},start:function(e,n){var a,i=e.curStats;i.show_inAnim&amp;&amp;(a=te.stop(i.show_animId)),Ge(e,1),i.show_inAnim=!0,Ie(e,&quot;apl_position&quot;,t.draw.update),te.start(i.show_animId,!e.aplStats.show_on,null!=n?n:a)},stop:function(e,t,n){var a,i=e.curStats;return n=null!=n?n:e.aplStats.show_on,a=i.show_inAnim?te.stop(i.show_animId):n?1:0,i.show_inAnim=!1,t&amp;&amp;(n?(e.pathList.animVal=null,De(e,{path:!0})):(e.pathList.animVal=[[e.pathList.baseVal[0][0],e.pathList.baseVal[0][0]]],De(e,{path:!0})),Ge(e,n)),a},update:function(e){Ce(e,&quot;apl_position&quot;,t.draw.update),e.curStats.show_inAnim?t.draw.init(e,t.draw.stop(e)):e.aplStats.show_animOptions={}}}},function(){function t(e){return function(t){var n={};n[e]=t,this.setOptions(n)}}[[&quot;start&quot;,&quot;anchorSE&quot;,0],[&quot;end&quot;,&quot;anchorSE&quot;,1],[&quot;color&quot;,&quot;lineColor&quot;],[&quot;size&quot;,&quot;lineSize&quot;],[&quot;startSocketGravity&quot;,&quot;socketGravitySE&quot;,0],[&quot;endSocketGravity&quot;,&quot;socketGravitySE&quot;,1],[&quot;startPlugColor&quot;,&quot;plugColorSE&quot;,0],[&quot;endPlugColor&quot;,&quot;plugColorSE&quot;,1],[&quot;startPlugSize&quot;,&quot;plugSizeSE&quot;,0],[&quot;endPlugSize&quot;,&quot;plugSizeSE&quot;,1],[&quot;outline&quot;,&quot;lineOutlineEnabled&quot;],[&quot;outlineColor&quot;,&quot;lineOutlineColor&quot;],[&quot;outlineSize&quot;,&quot;lineOutlineSize&quot;],[&quot;startPlugOutline&quot;,&quot;plugOutlineEnabledSE&quot;,0],[&quot;endPlugOutline&quot;,&quot;plugOutlineEnabledSE&quot;,1],[&quot;startPlugOutlineColor&quot;,&quot;plugOutlineColorSE&quot;,0],[&quot;endPlugOutlineColor&quot;,&quot;plugOutlineColorSE&quot;,1],[&quot;startPlugOutlineSize&quot;,&quot;plugOutlineSizeSE&quot;,0],[&quot;endPlugOutlineSize&quot;,&quot;plugOutlineSizeSE&quot;,1]].forEach(function(e){var n=e[0],a=e[1],i=e[2];Object.defineProperty(Ye.prototype,n,{get:function(){var e=null!=i?se[this._id].options[a][i]:a?se[this._id].options[a]:se[this._id].options[n];return null==e?V:de(e)},set:t(n),enumerable:!0})}),[[&quot;path&quot;,k],[&quot;startSocket&quot;,g,&quot;socketSE&quot;,0],[&quot;endSocket&quot;,g,&quot;socketSE&quot;,1],[&quot;startPlug&quot;,C,&quot;plugSE&quot;,0],[&quot;endPlug&quot;,C,&quot;plugSE&quot;,1]].forEach(function(e){var n=e[0],a=e[1],i=e[2],o=e[3];Object.defineProperty(Ye.prototype,n,{get:function(){var e,t=null!=o?se[this._id].options[i][o]:i?se[this._id].options[i]:se[this._id].options[n];return t?Object.keys(a).some(function(n){return a[n]===t&amp;&amp;(e=n,!0)})?e:new Error(&quot;It's broken&quot;):V},set:t(n),enumerable:!0})}),Object.keys(e).forEach(function(n){var a=e[n];Object.defineProperty(Ye.prototype,n,{get:function(){var e,t,i=se[this._id].options[n];return $(i)?(e=i,t=a.optionsConf.reduce(function(t,n){var a,i=n[0],o=n[1],l=n[2],r=n[3],s=n[4],u=null!=s?e[r][s]:r?e[r]:e[o];return t[o]=&quot;id&quot;===i?u?Object.keys(l).some(function(e){return l[e]===u&amp;&amp;(a=e,!0)})?a:new Error(&quot;It's broken&quot;):V:null==u?V:de(u),t},{}),a.anim&amp;&amp;(t.animation=de(e.animation)),t):i},set:t(n),enumerable:!0})}),[&quot;startLabel&quot;,&quot;endLabel&quot;,&quot;middleLabel&quot;].forEach(function(e,n){Object.defineProperty(Ye.prototype,e,{get:function(){var e=se[this._id],t=e.options;return t.labelSEM[n]&amp;&amp;!e.optionIsAttach.labelSEM[n]?he[t.labelSEM[n]._id].text:t.labelSEM[n]||&quot;&quot;},set:t(e),enumerable:!0})})}(),Ye.prototype.setOptions=function(e){return Ze(se[this._id],e),this},Ye.prototype.position=function(){return De(se[this._id],{position:!0}),this},Ye.prototype.remove=function(){var t=se[this._id],n=t.curStats;Object.keys(e).forEach(function(e){var t=e+&quot;_animId&quot;;n[t]&amp;&amp;te.remove(n[t])}),n.show_animId&amp;&amp;te.remove(n.show_animId),t.attachments.slice().forEach(function(e){Ue(t,e)}),t.baseWindow&amp;&amp;t.svg&amp;&amp;t.baseWindow.document.body.removeChild(t.svg),delete se[this._id]},Ye.prototype.show=function(e,t){return je(se[this._id],!0,e,t),this},Ye.prototype.hide=function(e,t){return je(se[this._id],!1,e,t),this},o=function(e){e&amp;&amp;he[e._id]&amp;&amp;(e.boundTargets.slice().forEach(function(t){Ue(t.props,e,!0)}),e.conf.remove&amp;&amp;e.conf.remove(e),delete he[e._id])},a=function(){function e(e,t){var n,a={conf:e,curStats:{},aplStats:{},boundTargets:[]},i={};e.argOptions.every(function(e){return!(!t.length||(&quot;string&quot;==typeof e.type?typeof t[0]!==e.type:&quot;function&quot;!=typeof e.type||!e.type(t[0])))&amp;&amp;(i[e.optionName]=t.shift(),!0)}),n=t.length&amp;&amp;$(t[0])?de(t[0]):{},Object.keys(i).forEach(function(e){n[e]=i[e]}),e.stats&amp;&amp;(Te(a.curStats,e.stats),Te(a.aplStats,e.stats)),Object.defineProperty(this,&quot;_id&quot;,{value:++pe}),Object.defineProperty(this,&quot;isRemoved&quot;,{get:function(){return!he[this._id]}}),a._id=this._id,e.init&amp;&amp;!e.init(a,n)||(he[this._id]=a)}return e.prototype.remove=function(){var e=this,t=he[e._id];t&amp;&amp;(t.boundTargets.slice().forEach(function(e){t.conf.removeOption(t,e)}),Le(function(){var t=he[e._id];t&amp;&amp;(console.error(&quot;LeaderLineAttachment was not removed by removeOption&quot;),o(t))}))},e}(),window.LeaderLineAttachment=a,i=function(e,t){return e instanceof a&amp;&amp;(!(e.isRemoved||t&amp;&amp;he[e._id].conf.type!==t)||null)},n={pointAnchor:{type:&quot;anchor&quot;,argOptions:[{optionName:&quot;element&quot;,type:ye}],init:function(e,t){return e.element=n.pointAnchor.checkElement(t.element),e.x=n.pointAnchor.parsePercent(t.x,!0)||[.5,!0],e.y=n.pointAnchor.parsePercent(t.y,!0)||[.5,!0],!0},removeOption:function(e,t){var i=t.props,o={},l=e.element,r=i.options.anchorSE[&quot;start&quot;===t.optionName?1:0];l===r&amp;&amp;(l=r===document.body?new a(n.pointAnchor,[l]):document.body),o[t.optionName]=l,Ze(i,o)},getBBoxNest:function(e,t){var n=ge(e.element,t.baseWindow),a=n.width,i=n.height;return n.width=n.height=0,n.left=n.right=n.left+e.x[0]*(e.x[1]?a:1),n.top=n.bottom=n.top+e.y[0]*(e.y[1]?i:1),n},parsePercent:function(e,t){var n,a,i=!1;return ee(e)?a=e:&quot;string&quot;==typeof e&amp;&amp;(n=H.exec(e))&amp;&amp;n[2]&amp;&amp;(i=0!==(a=parseFloat(n[1])/100)),null!=a&amp;&amp;(t||a>=0)?[a,i]:null},checkElement:function(e){if(null==e)e=document.body;else if(!ye(e))throw new Error(&quot;`element` must be Element&quot;);return e}},areaAnchor:{type:&quot;anchor&quot;,argOptions:[{optionName:&quot;element&quot;,type:ye},{optionName:&quot;shape&quot;,type:&quot;string&quot;}],stats:{color:{},strokeWidth:{},elementWidth:{},elementHeight:{},elementLeft:{},elementTop:{},pathListRel:{},bBoxRel:{},pathData:{},viewBoxBBox:{hasProps:!0},dashLen:{},dashGap:{}},init:function(e,t){var a,i,o,l=[];return e.element=n.pointAnchor.checkElement(t.element),&quot;string&quot;==typeof t.color&amp;&amp;(e.color=t.color.trim()),&quot;string&quot;==typeof t.fillColor&amp;&amp;(e.fill=t.fillColor.trim()),ee(t.size)&amp;&amp;t.size>=0&amp;&amp;(e.size=t.size),t.dash&amp;&amp;(e.dash=!0,ee(t.dash.len)&amp;&amp;t.dash.len>0&amp;&amp;(e.dashLen=t.dash.len),ee(t.dash.gap)&amp;&amp;t.dash.gap>0&amp;&amp;(e.dashGap=t.dash.gap)),&quot;circle&quot;===t.shape?e.shape=t.shape:&quot;polygon&quot;===t.shape&amp;&amp;Array.isArray(t.points)&amp;&amp;t.points.length>=3&amp;&amp;t.points.every(function(t){var a={};return!(!(a.x=n.pointAnchor.parsePercent(t[0],!0))||!(a.y=n.pointAnchor.parsePercent(t[1],!0)))&amp;&amp;(l.push(a),(a.x[1]||a.y[1])&amp;&amp;(e.hasRatio=!0),!0)})?(e.shape=t.shape,e.points=l):(e.shape=&quot;rect&quot;,e.radius=ee(t.radius)&amp;&amp;t.radius>=0?t.radius:0),&quot;rect&quot;!==e.shape&amp;&amp;&quot;circle&quot;!==e.shape||(e.x=n.pointAnchor.parsePercent(t.x,!0)||[-.05,!0],e.y=n.pointAnchor.parsePercent(t.y,!0)||[-.05,!0],e.width=n.pointAnchor.parsePercent(t.width)||[1.1,!0],e.height=n.pointAnchor.parsePercent(t.height)||[1.1,!0],(e.x[1]||e.y[1]||e.width[1]||e.height[1])&amp;&amp;(e.hasRatio=!0)),a=e.element.ownerDocument,e.svg=i=a.createElementNS(U,&quot;svg&quot;),i.className.baseVal=d+&quot;-areaAnchor&quot;,i.viewBox.baseVal||i.setAttribute(&quot;viewBox&quot;,&quot;0 0 0 0&quot;),e.path=i.appendChild(a.createElementNS(U,&quot;path&quot;)),e.path.style.fill=e.fill||&quot;none&quot;,e.isShown=!1,i.style.visibility=&quot;hidden&quot;,a.body.appendChild(i),Re(o=a.defaultView),e.bodyOffset=Be(o),e.updateColor=function(){var t,n=e.curStats,a=e.aplStats,i=e.boundTargets.length?e.boundTargets[0].props.curStats:null;n.color=t=e.color||(i?i.line_color:J.lineColor),We(e,a,&quot;color&quot;,t)&amp;&amp;(e.path.style.stroke=t)},e.updateShow=function(){Ge(e,e.boundTargets.some(function(e){return!0===e.props.isShown}))},!0},bind:function(e,t){var n=t.props;return e.color||Ie(n,&quot;cur_line_color&quot;,e.updateColor),Ie(n,&quot;svgShow&quot;,e.updateShow),Le(function(){e.updateColor(),e.updateShow()}),!0},unbind:function(e,t){var a=t.props;e.color||Ce(a,&quot;cur_line_color&quot;,e.updateColor),Ce(a,&quot;svgShow&quot;,e.updateShow),e.boundTargets.length>1&amp;&amp;Le(function(){e.updateColor(),e.updateShow(),n.areaAnchor.update(e)&amp;&amp;e.boundTargets.forEach(function(e){De(e.props,{position:!0})})})},removeOption:function(e,t){n.pointAnchor.removeOption(e,t)},remove:function(e){e.boundTargets.length&amp;&amp;(console.error(&quot;LeaderLineAttachment was not unbound by remove&quot;),e.boundTargets.forEach(function(t){n.areaAnchor.unbind(e,t)})),e.svg.parentNode.removeChild(e.svg)},getStrokeWidth:function(e,t){return n.areaAnchor.update(e)&amp;&amp;e.boundTargets.length>1&amp;&amp;Le(function(){e.boundTargets.forEach(function(e){e.props!==t&amp;&amp;De(e.props,{position:!0})})}),e.curStats.strokeWidth},getPathData:function(e,t){var n=ge(e.element,t.baseWindow);return we(e.curStats.pathListRel,function(e){e.x+=n.left,e.y+=n.top})},getBBoxNest:function(e,t){var n=ge(e.element,t.baseWindow),a=e.curStats.bBoxRel;return{left:a.left+n.left,top:a.top+n.top,right:a.right+n.left,bottom:a.bottom+n.top,width:a.width,height:a.height}},update:function(e){var t,n,a,i,o,l,r,s,u,h,p,c,d,f,y,m,S,g,_,v,E,x,b,k,w,O,M,I,C,L,A,V,N=e.curStats,T=e.aplStats,W=e.boundTargets.length?e.boundTargets[0].props.curStats:null,B={};if(B.strokeWidth=We(e,N,&quot;strokeWidth&quot;,null!=e.size?e.size:W?W.line_strokeWidth:J.lineSize),t=me(e.element),B.elementWidth=We(e,N,&quot;elementWidth&quot;,t.width),B.elementHeight=We(e,N,&quot;elementHeight&quot;,t.height),B.elementLeft=We(e,N,&quot;elementLeft&quot;,t.left),B.elementTop=We(e,N,&quot;elementTop&quot;,t.top),B.strokeWidth||e.hasRatio&amp;&amp;(B.elementWidth||B.elementHeight)){switch(e.shape){case&quot;rect&quot;:(v={left:e.x[0]*(e.x[1]?t.width:1),top:e.y[0]*(e.y[1]?t.height:1),width:e.width[0]*(e.width[1]?t.width:1),height:e.height[0]*(e.height[1]?t.height:1)}).right=v.left+v.width,v.bottom=v.top+v.height,k=N.strokeWidth/2,x=(b=Math.min(v.width,v.height))?b/2*Math.SQRT2+k:0,(E=e.radius?e.radius<=x?e.radius:x:0)?(O=E-(w=(E-k)/Math.SQRT2),I=E*z,M=[{x:v.left-O,y:v.top+w},{x:v.left+w,y:v.top-O},{x:v.right-w,y:v.top-O},{x:v.right+O,y:v.top+w},{x:v.right+O,y:v.bottom-w},{x:v.right-w,y:v.bottom+O},{x:v.left+w,y:v.bottom+O},{x:v.left-O,y:v.bottom-w}],N.pathListRel=[[M[0],{x:M[0].x,y:M[0].y-I},{x:M[1].x-I,y:M[1].y},M[1]]],M[1].x!==M[2].x&amp;&amp;N.pathListRel.push([M[1],M[2]]),N.pathListRel.push([M[2],{x:M[2].x+I,y:M[2].y},{x:M[3].x,y:M[3].y-I},M[3]]),M[3].y!==M[4].y&amp;&amp;N.pathListRel.push([M[3],M[4]]),N.pathListRel.push([M[4],{x:M[4].x,y:M[4].y+I},{x:M[5].x+I,y:M[5].y},M[5]]),M[5].x!==M[6].x&amp;&amp;N.pathListRel.push([M[5],M[6]]),N.pathListRel.push([M[6],{x:M[6].x-I,y:M[6].y},{x:M[7].x,y:M[7].y+I},M[7]]),M[7].y!==M[0].y&amp;&amp;N.pathListRel.push([M[7],M[0]]),N.pathListRel.push([]),O=E-w+N.strokeWidth/2,M=[{x:v.left-O,y:v.top-O},{x:v.right+O,y:v.bottom+O}],N.bBoxRel={left:M[0].x,top:M[0].y,right:M[1].x,bottom:M[1].y,width:M[1].x-M[0].x,height:M[1].y-M[0].y}):(O=N.strokeWidth/2,M=[{x:v.left-O,y:v.top-O},{x:v.right+O,y:v.bottom+O}],N.pathListRel=[[M[0],{x:M[1].x,y:M[0].y}],[{x:M[1].x,y:M[0].y},M[1]],[M[1],{x:M[0].x,y:M[1].y}],[]],M=[{x:v.left-N.strokeWidth,y:v.top-N.strokeWidth},{x:v.right+N.strokeWidth,y:v.bottom+N.strokeWidth}],N.bBoxRel={left:M[0].x,top:M[0].y,right:M[1].x,bottom:M[1].y,width:M[1].x-M[0].x,height:M[1].y-M[0].y});break;case&quot;circle&quot;:(r={left:e.x[0]*(e.x[1]?t.width:1),top:e.y[0]*(e.y[1]?t.height:1),width:e.width[0]*(e.width[1]?t.width:1),height:e.height[0]*(e.height[1]?t.height:1)}).width||r.height||(r.width=r.height=10),r.width||(r.width=r.height),r.height||(r.height=r.width),r.right=r.left+r.width,r.bottom=r.top+r.height,s=r.left+r.width/2,u=r.top+r.height/2,f=N.strokeWidth/2,y=r.width/2,m=r.height/2,h=y*Math.SQRT2+f,p=m*Math.SQRT2+f,c=h*z,d=p*z,_=[{x:s-h,y:u},{x:s,y:u-p},{x:s+h,y:u},{x:s,y:u+p}],N.pathListRel=[[_[0],{x:_[0].x,y:_[0].y-d},{x:_[1].x-c,y:_[1].y},_[1]],[_[1],{x:_[1].x+c,y:_[1].y},{x:_[2].x,y:_[2].y-d},_[2]],[_[2],{x:_[2].x,y:_[2].y+d},{x:_[3].x+c,y:_[3].y},_[3]],[_[3],{x:_[3].x-c,y:_[3].y},{x:_[0].x,y:_[0].y+d},_[0]],[]],S=h-y+N.strokeWidth/2,g=p-m+N.strokeWidth/2,_=[{x:r.left-S,y:r.top-g},{x:r.right+S,y:r.bottom+g}],N.bBoxRel={left:_[0].x,top:_[0].y,right:_[1].x,bottom:_[1].y,width:_[1].x-_[0].x,height:_[1].y-_[0].y};break;case&quot;polygon&quot;:e.points.forEach(function(e){var n=e.x[0]*(e.x[1]?t.width:1),o=e.y[0]*(e.y[1]?t.height:1);a?(n<a.left&amp;&amp;(a.left=n),n>a.right&amp;&amp;(a.right=n),o<a.top&amp;&amp;(a.top=o),o>a.bottom&amp;&amp;(a.bottom=o)):a={left:n,right:n,top:o,bottom:o},i?N.pathListRel.push([i,{x:n,y:o}]):N.pathListRel=[],i={x:n,y:o}}),N.pathListRel.push([]),o=N.strokeWidth/2,l=[{x:a.left-o,y:a.top-o},{x:a.right+o,y:a.bottom+o}],N.bBoxRel={left:l[0].x,top:l[0].y,right:l[1].x,bottom:l[1].y,width:l[1].x-l[0].x,height:l[1].y-l[0].y}}B.pathListRel=B.bBoxRel=!0}return(B.pathListRel||B.elementLeft||B.elementTop)&amp;&amp;(N.pathData=we(N.pathListRel,function(e){e.x+=t.left,e.y+=t.top})),We(e,T,&quot;strokeWidth&quot;,n=N.strokeWidth)&amp;&amp;(e.path.style.strokeWidth=n+&quot;px&quot;),Me(n=N.pathData,T.pathData)&amp;&amp;(e.path.setPathData(n),T.pathData=n,B.pathData=!0),e.dash&amp;&amp;(!B.pathData&amp;&amp;(!B.strokeWidth||e.dashLen&amp;&amp;e.dashGap)||(N.dashLen=e.dashLen||2*N.strokeWidth,N.dashGap=e.dashGap||N.strokeWidth),B.dash=We(e,T,&quot;dashLen&quot;,N.dashLen)||B.dash,B.dash=We(e,T,&quot;dashGap&quot;,N.dashGap)||B.dash,B.dash&amp;&amp;(e.path.style.strokeDasharray=T.dashLen+&quot;,&quot;+T.dashGap)),C=N.viewBoxBBox,L=T.viewBoxBBox,A=e.svg.viewBox.baseVal,V=e.svg.style,C.x=N.bBoxRel.left+t.left,C.y=N.bBoxRel.top+t.top,C.width=N.bBoxRel.width,C.height=N.bBoxRel.height,[&quot;x&quot;,&quot;y&quot;,&quot;width&quot;,&quot;height&quot;].forEach(function(t){(n=C[t])!==L[t]&amp;&amp;(A[t]=L[t]=n,V[P[t]]=n+(&quot;x&quot;===t||&quot;y&quot;===t?e.bodyOffset[t]:0)+&quot;px&quot;)}),B.strokeWidth||B.pathListRel||B.bBoxRel}},mouseHoverAnchor:{type:&quot;anchor&quot;,argOptions:[{optionName:&quot;element&quot;,type:ye},{optionName:&quot;showEffectName&quot;,type:&quot;string&quot;}],style:{backgroundImage:&quot;url('data:image/svg+xml;charset=utf-8;base64,PHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgd2lkdGg9IjI0IiBoZWlnaHQ9IjI0Ij48cG9seWdvbiBwb2ludHM9IjI0LDAgMCw4IDgsMTEgMCwxOSA1LDI0IDEzLDE2IDE2LDI0IiBmaWxsPSJjb3JhbCIvPjwvc3ZnPg==')&quot;,backgroundSize:&quot;&quot;,backgroundRepeat:&quot;no-repeat&quot;,backgroundColor:&quot;#f8f881&quot;,cursor:&quot;default&quot;},hoverStyle:{backgroundImage:&quot;none&quot;,backgroundColor:&quot;#fadf8f&quot;},padding:{top:1,right:15,bottom:1,left:2},minHeight:15,backgroundPosition:{right:2,top:2},backgroundSize:{width:12,height:12},dirKeys:[[&quot;top&quot;,&quot;Top&quot;],[&quot;right&quot;,&quot;Right&quot;],[&quot;bottom&quot;,&quot;Bottom&quot;],[&quot;left&quot;,&quot;Left&quot;]],init:function(e,a){var i,o,l,r,s,u,h,p,c,d,f,y=n.mouseHoverAnchor,m={};if(e.element=n.pointAnchor.checkElement(a.element),p=e.element,!((d=p.ownerDocument)&amp;&amp;(c=d.defaultView)&amp;&amp;c.HTMLElement&amp;&amp;p instanceof c.HTMLElement))throw new Error(&quot;`element` must be HTML element&quot;);return y.style.backgroundSize=y.backgroundSize.width+&quot;px &quot;+y.backgroundSize.height+&quot;px&quot;,[&quot;style&quot;,&quot;hoverStyle&quot;].forEach(function(t){var n=y[t];e[t]=Object.keys(n).reduce(function(e,t){return e[t]=n[t],e},{})}),&quot;inline&quot;===(i=e.element.ownerDocument.defaultView.getComputedStyle(e.element,&quot;&quot;)).display?e.style.display=&quot;inline-block&quot;:&quot;none&quot;===i.display&amp;&amp;(e.style.display=&quot;block&quot;),n.mouseHoverAnchor.dirKeys.forEach(function(t){var n=t[0],a=&quot;padding&quot;+t[1];parseFloat(i[a])<y.padding[n]&amp;&amp;(e.style[a]=y.padding[n]+&quot;px&quot;)}),e.style.display&amp;&amp;(r=e.element.style.display,e.element.style.display=e.style.display),n.mouseHoverAnchor.dirKeys.forEach(function(t){var n=&quot;padding&quot;+t[1];e.style[n]&amp;&amp;(m[n]=e.element.style[n],e.element.style[n]=e.style[n])}),(l=e.element.getBoundingClientRect()).height<y.minHeight&amp;&amp;(Z?(f=y.minHeight,&quot;content-box&quot;===i.boxSizing?f-=parseFloat(i.borderTopWidth)+parseFloat(i.borderBottomWidth)+parseFloat(i.paddingTop)+parseFloat(i.paddingBottom):&quot;padding-box&quot;===i.boxSizing&amp;&amp;(f-=parseFloat(i.borderTopWidth)+parseFloat(i.borderBottomWidth)),e.style.height=f+&quot;px&quot;):e.style.height=parseFloat(i.height)+(y.minHeight-l.height)+&quot;px&quot;),e.style.backgroundPosition=Q?l.width-y.backgroundSize.width-y.backgroundPosition.right+&quot;px &quot;+y.backgroundPosition.top+&quot;px&quot;:&quot;right &quot;+y.backgroundPosition.right+&quot;px top &quot;+y.backgroundPosition.top+&quot;px&quot;,e.style.display&amp;&amp;(e.element.style.display=r),n.mouseHoverAnchor.dirKeys.forEach(function(t){var n=&quot;padding&quot;+t[1];e.style[n]&amp;&amp;(e.element.style[n]=m[n])}),[&quot;style&quot;,&quot;hoverStyle&quot;].forEach(function(t){var n=e[t],i=a[t];$(i)&amp;&amp;Object.keys(i).forEach(function(e){&quot;string&quot;==typeof i[e]||ee(i[e])?n[e]=i[e]:null==i[e]&amp;&amp;delete n[e]})}),&quot;function&quot;==typeof a.onSwitch&amp;&amp;(h=a.onSwitch),a.showEffectName&amp;&amp;t[a.showEffectName]&amp;&amp;(e.showEffectName=s=a.showEffectName),u=a.animOptions,e.elmStyle=o=e.element.style,e.mouseenter=function(t){e.hoverStyleSave=y.getStyles(o,Object.keys(e.hoverStyle)),y.setStyles(o,e.hoverStyle),e.boundTargets.forEach(function(e){je(e.props,!0,s,u)}),h&amp;&amp;h(t)},e.mouseleave=function(t){y.setStyles(o,e.hoverStyleSave),e.boundTargets.forEach(function(e){je(e.props,!1,s,u)}),h&amp;&amp;h(t)},!0},bind:function(e,t){var a,i,o,l,r;return t.props.svg?n.mouseHoverAnchor.llShow(t.props,!1,e.showEffectName):Le(function(){n.mouseHoverAnchor.llShow(t.props,!1,e.showEffectName)}),e.enabled||(e.styleSave=n.mouseHoverAnchor.getStyles(e.elmStyle,Object.keys(e.style)),n.mouseHoverAnchor.setStyles(e.elmStyle,e.style),e.removeEventListener=(a=e.element,i=e.mouseenter,o=e.mouseleave,&quot;onmouseenter&quot;in a&amp;&amp;&quot;onmouseleave&quot;in a?(a.addEventListener(&quot;mouseenter&quot;,i,!1),a.addEventListener(&quot;mouseleave&quot;,o,!1),function(){a.removeEventListener(&quot;mouseenter&quot;,i,!1),a.removeEventListener(&quot;mouseleave&quot;,o,!1)}):(console.warn(&quot;mouseenter and mouseleave events polyfill is enabled.&quot;),l=function(e){e.relatedTarget&amp;&amp;(e.relatedTarget===this||this.compareDocumentPosition(e.relatedTarget)&amp;Node.DOCUMENT_POSITION_CONTAINED_BY)||i.apply(this,arguments)},a.addEventListener(&quot;mouseover&quot;,l),r=function(e){e.relatedTarget&amp;&amp;(e.relatedTarget===this||this.compareDocumentPosition(e.relatedTarget)&amp;Node.DOCUMENT_POSITION_CONTAINED_BY)||o.apply(this,arguments)},a.addEventListener(&quot;mouseout&quot;,r),function(){a.removeEventListener(&quot;mouseover&quot;,l,!1),a.removeEventListener(&quot;mouseout&quot;,r,!1)})),e.enabled=!0),!0},unbind:function(e,t){e.enabled&amp;&amp;e.boundTargets.length<=1&amp;&amp;(e.removeEventListener(),n.mouseHoverAnchor.setStyles(e.elmStyle,e.styleSave),e.enabled=!1),n.mouseHoverAnchor.llShow(t.props,!0,e.showEffectName)},removeOption:function(e,t){n.pointAnchor.removeOption(e,t)},remove:function(e){e.boundTargets.length&amp;&amp;(console.error(&quot;LeaderLineAttachment was not unbound by remove&quot;),e.boundTargets.forEach(function(t){n.mouseHoverAnchor.unbind(e,t)}))},getBBoxNest:function(e,t){return ge(e.element,t.baseWindow)},llShow:function(e,n,a){t[a||e.curStats.show_effect].stop(e,!0,n),e.aplStats.show_on=n},getStyles:function(e,t){return t.reduce(function(t,n){return t[n]=e[n],t},{})},setStyles:function(e,t){Object.keys(t).forEach(function(n){e[n]=t[n]})}},captionLabel:{type:&quot;label&quot;,argOptions:[{optionName:&quot;text&quot;,type:&quot;string&quot;}],stats:{color:{},x:{},y:{}},textStyleProps:[&quot;fontFamily&quot;,&quot;fontStyle&quot;,&quot;fontVariant&quot;,&quot;fontWeight&quot;,&quot;fontStretch&quot;,&quot;fontSize&quot;,&quot;fontSizeAdjust&quot;,&quot;kerning&quot;,&quot;letterSpacing&quot;,&quot;wordSpacing&quot;,&quot;textDecoration&quot;],init:function(e,t){return&quot;string&quot;==typeof t.text&amp;&amp;(e.text=t.text.trim()),!!e.text&amp;&amp;(&quot;string&quot;==typeof t.color&amp;&amp;(e.color=t.color.trim()),e.outlineColor=&quot;string&quot;==typeof t.outlineColor?t.outlineColor.trim():&quot;#fff&quot;,Array.isArray(t.offset)&amp;&amp;ee(t.offset[0])&amp;&amp;ee(t.offset[1])&amp;&amp;(e.offset={x:t.offset[0],y:t.offset[1]}),ee(t.lineOffset)&amp;&amp;(e.lineOffset=t.lineOffset),n.captionLabel.textStyleProps.forEach(function(n){null!=t[n]&amp;&amp;(e[n]=t[n])}),e.updateColor=function(t){n.captionLabel.updateColor(e,t)},e.updateSocketXY=function(t){var n,a,i,o,l=e.curStats,r=e.aplStats,s=t.curStats,u=s.position_socketXYSE[e.socketIndex];null!=u.x&amp;&amp;(e.offset?(l.x=u.x+e.offset.x,l.y=u.y+e.offset.y):(n=e.height/2,a=Math.max(s.attach_plugSideLenSE[e.socketIndex]||0,s.line_strokeWidth/2),i=s.position_socketXYSE[e.socketIndex?0:1],u.socketId===S||u.socketId===y?(l.x=u.socketId===S?u.x-n-e.width:u.x+n,l.y=i.y<u.y?u.y+a+n:u.y-a-n-e.height):(l.x=i.x<u.x?u.x+a+n:u.x-a-n-e.width,l.y=u.socketId===f?u.y-n-e.height:u.y+n)),We(e,r,&quot;x&quot;,o=l.x)&amp;&amp;(e.elmPosition.x.baseVal.getItem(0).value=o),We(e,r,&quot;y&quot;,o=l.y)&amp;&amp;(e.elmPosition.y.baseVal.getItem(0).value=o+e.height))},e.updatePath=function(t){var a,i,o=e.curStats,l=e.aplStats,r=t.pathList.animVal||t.pathList.baseVal;r&amp;&amp;(a=n.captionLabel.getMidPoint(r,e.lineOffset),o.x=a.x-e.width/2,o.y=a.y-e.height/2,We(e,l,&quot;x&quot;,i=o.x)&amp;&amp;(e.elmPosition.x.baseVal.getItem(0).value=i),We(e,l,&quot;y&quot;,i=o.y)&amp;&amp;(e.elmPosition.y.baseVal.getItem(0).value=i+e.height))},e.updateShow=function(t){n.captionLabel.updateShow(e,t)},Q&amp;&amp;(e.adjustEdge=function(t,a){var i=e.curStats;null!=i.x&amp;&amp;n.captionLabel.adjustEdge(a,{x:i.x,y:i.y,width:e.width,height:e.height},e.strokeWidth/2)}),!0)},updateColor:function(e,t){var n,a=e.curStats,i=e.aplStats,o=t.curStats;a.color=n=e.color||o.line_color,We(e,i,&quot;color&quot;,n)&amp;&amp;(e.styleFill.fill=n)},updateShow:function(e,t){var n=!0===t.isShown;n!==e.isShown&amp;&amp;(e.styleShow.visibility=n?&quot;&quot;:&quot;hidden&quot;,e.isShown=n)},adjustEdge:function(e,t,n){var a={x1:t.x-n,y1:t.y-n,x2:t.x+t.width+n,y2:t.y+t.height+n};a.x1<e.x1&amp;&amp;(e.x1=a.x1),a.y1<e.y1&amp;&amp;(e.y1=a.y1),a.x2>e.x2&amp;&amp;(e.x2=a.x2),a.y2>e.y2&amp;&amp;(e.y2=a.y2)},newText:function(e,t,n,a,i){var o,l,r,u,h,p;return(o=t.createElementNS(U,&quot;text&quot;)).textContent=e,[o.x,o.y].forEach(function(e){var t=n.createSVGLength();t.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX,0),e.baseVal.initialize(t)}),&quot;boolean&quot;!=typeof s&amp;&amp;(s=&quot;paintOrder&quot;in o.style),i&amp;&amp;!s?(r=t.createElementNS(U,&quot;defs&quot;),o.id=a,r.appendChild(o),(h=(l=t.createElementNS(U,&quot;g&quot;)).appendChild(t.createElementNS(U,&quot;use&quot;))).href.baseVal=&quot;#&quot;+a,(u=l.appendChild(t.createElementNS(U,&quot;use&quot;))).href.baseVal=&quot;#&quot;+a,(p=h.style).strokeLinejoin=&quot;round&quot;,{elmPosition:o,styleText:o.style,styleFill:u.style,styleStroke:p,styleShow:l.style,elmsAppend:[r,l]}):(p=o.style,i&amp;&amp;(p.strokeLinejoin=&quot;round&quot;,p.paintOrder=&quot;stroke&quot;),{elmPosition:o,styleText:p,styleFill:p,styleStroke:i?p:null,styleShow:p,elmsAppend:[o]})},getMidPoint:function(e,t){var n,a,i,o=Oe(e),l=o.segsLen,r=o.lenAll,s=-1;if((n=r/2+(t||0))<=0)return 2===(a=e[0]).length?ve(a[0],a[1],0):xe(a[0],a[1],a[2],a[3],0);if(n>=r)return 2===(a=e[e.length-1]).length?ve(a[0],a[1],1):xe(a[0],a[1],a[2],a[3],1);for(i=[];n>l[++s];)i.push(e[s]),n-=l[s];return 2===(a=e[s]).length?ve(a[0],a[1],n/l[s]):xe(a[0],a[1],a[2],a[3],ke(a[0],a[1],a[2],a[3],n))},initSvg:function(e,t){var a,i,o=n.captionLabel.newText(e.text,t.baseWindow.document,t.svg,d+&quot;-captionLabel-&quot;+e._id,e.outlineColor);[&quot;elmPosition&quot;,&quot;styleFill&quot;,&quot;styleShow&quot;,&quot;elmsAppend&quot;].forEach(function(t){e[t]=o[t]}),e.isShown=!1,e.styleShow.visibility=&quot;hidden&quot;,n.captionLabel.textStyleProps.forEach(function(t){null!=e[t]&amp;&amp;(o.styleText[t]=e[t])}),o.elmsAppend.forEach(function(e){t.svg.appendChild(e)}),a=o.elmPosition.getBBox(),e.width=a.width,e.height=a.height,e.outlineColor&amp;&amp;(i=(i=a.height/9)>10?10:i<2?2:i,o.styleStroke.strokeWidth=i+&quot;px&quot;,o.styleStroke.stroke=e.outlineColor),e.strokeWidth=i||0,Te(e.aplStats,n.captionLabel.stats),e.updateColor(t),e.refSocketXY?e.updateSocketXY(t):e.updatePath(t),Q&amp;&amp;De(t,{}),e.updateShow(t)},bind:function(e,t){var a=t.props;return e.color||Ie(a,&quot;cur_line_color&quot;,e.updateColor),(e.refSocketXY=&quot;startLabel&quot;===t.optionName||&quot;endLabel&quot;===t.optionName)?(e.socketIndex=&quot;startLabel&quot;===t.optionName?0:1,Ie(a,&quot;apl_position&quot;,e.updateSocketXY),e.offset||(Ie(a,&quot;cur_attach_plugSideLenSE&quot;,e.updateSocketXY),Ie(a,&quot;cur_line_strokeWidth&quot;,e.updateSocketXY))):Ie(a,&quot;apl_path&quot;,e.updatePath),Ie(a,&quot;svgShow&quot;,e.updateShow),Q&amp;&amp;Ie(a,&quot;new_edge4viewBox&quot;,e.adjustEdge),n.captionLabel.initSvg(e,a),!0},unbind:function(e,t){var a=t.props;e.elmsAppend&amp;&amp;(e.elmsAppend.forEach(function(e){a.svg.removeChild(e)}),e.elmPosition=e.styleFill=e.styleShow=e.elmsAppend=null),Te(e.curStats,n.captionLabel.stats),Te(e.aplStats,n.captionLabel.stats),e.color||Ce(a,&quot;cur_line_color&quot;,e.updateColor),e.refSocketXY?(Ce(a,&quot;apl_position&quot;,e.updateSocketXY),e.offset||(Ce(a,&quot;cur_attach_plugSideLenSE&quot;,e.updateSocketXY),Ce(a,&quot;cur_line_strokeWidth&quot;,e.updateSocketXY))):Ce(a,&quot;apl_path&quot;,e.updatePath),Ce(a,&quot;svgShow&quot;,e.updateShow),Q&amp;&amp;(Ce(a,&quot;new_edge4viewBox&quot;,e.adjustEdge),De(a,{}))},removeOption:function(e,t){var n=t.props,a={};a[t.optionName]=&quot;&quot;,Ze(n,a)},remove:function(e){e.boundTargets.length&amp;&amp;(console.error(&quot;LeaderLineAttachment was not unbound by remove&quot;),e.boundTargets.forEach(function(t){n.captionLabel.unbind(e,t)}))}},pathLabel:{type:&quot;label&quot;,argOptions:[{optionName:&quot;text&quot;,type:&quot;string&quot;}],stats:{color:{},startOffset:{},pathData:{}},init:function(e,t){return&quot;string&quot;==typeof t.text&amp;&amp;(e.text=t.text.trim()),!!e.text&amp;&amp;(&quot;string&quot;==typeof t.color&amp;&amp;(e.color=t.color.trim()),e.outlineColor=&quot;string&quot;==typeof t.outlineColor?t.outlineColor.trim():&quot;#fff&quot;,ee(t.lineOffset)&amp;&amp;(e.lineOffset=t.lineOffset),n.captionLabel.textStyleProps.forEach(function(n){null!=t[n]&amp;&amp;(e[n]=t[n])}),e.updateColor=function(t){n.captionLabel.updateColor(e,t)},e.updatePath=function(t){var a,i=e.curStats,o=e.aplStats,l=t.curStats,r=t.pathList.animVal||t.pathList.baseVal;r&amp;&amp;(i.pathData=a=n.pathLabel.getOffsetPathData(r,l.line_strokeWidth/2+e.strokeWidth/2+e.height/4,1.25*e.height),Me(a,o.pathData)&amp;&amp;(e.elmPath.setPathData(a),o.pathData=a,e.bBox=e.elmPosition.getBBox(),e.updateStartOffset(t)))},e.updateStartOffset=function(t){var n,a,i,o,l=e.curStats,r=e.aplStats,s=t.curStats;l.pathData&amp;&amp;((2!==e.semIndex||e.lineOffset)&amp;&amp;(n=l.pathData.reduce(function(e,t){var n,a=t.values;switch(t.type){case&quot;M&quot;:o={x:a[0],y:a[1]};break;case&quot;L&quot;:n={x:a[0],y:a[1]},o&amp;&amp;(e+=_e(o,n)),o=n;break;case&quot;C&quot;:n={x:a[4],y:a[5]},o&amp;&amp;(e+=be(o,{x:a[0],y:a[1]},{x:a[2],y:a[3]},n)),o=n}return e},0),i=0===e.semIndex?0:1===e.semIndex?n:n/2,2!==e.semIndex&amp;&amp;(a=Math.max(s.attach_plugBackLenSE[e.semIndex]||0,s.line_strokeWidth/2)+e.strokeWidth/2+e.height/4,i=(i+=0===e.semIndex?a:-a)<0?0:i>n?n:i),e.lineOffset&amp;&amp;(i=(i+=e.lineOffset)<0?0:i>n?n:i),l.startOffset=i,We(e,r,&quot;startOffset&quot;,i)&amp;&amp;(e.elmOffset.startOffset.baseVal.value=i)))},e.updateShow=function(t){n.captionLabel.updateShow(e,t)},Q&amp;&amp;(e.adjustEdge=function(t,a){e.bBox&amp;&amp;n.captionLabel.adjustEdge(a,e.bBox,e.strokeWidth/2)}),!0)},getOffsetPathData:function(e,t,n){var a,i,o=3,l=[];function r(e,t){return Math.abs(e.x-t.x)<o&amp;&amp;Math.abs(e.y-t.y)<o}return e.forEach(function(e){var n,i,o,s,u,h,p,c,d,f,y,m,S,g,_,v,E,x,b,k,w;2===e.length?(x=e[0],b=e[1],k=t,w=Math.atan2(x.y-b.y,b.x-x.x)+.5*Math.PI,n=[{x:x.x+Math.cos(w)*k,y:x.y+Math.sin(w)*k*-1},{x:b.x+Math.cos(w)*k,y:b.y+Math.sin(w)*k*-1}],a?(o=a.points,(s=Math.atan2(o[1].y-o[0].y,o[0].x-o[1].x)-Math.atan2(e[0].y-e[1].y,e[1].x-e[0].x))>=0&amp;&amp;s<=Math.PI?i={type:&quot;line&quot;,points:n,inside:!0}:(h=Ee(o[0],o[1],t),u=Ee(n[1],n[0],t),c=o[0],f=u,y=n[1],m=(d=h).x-c.x,S=d.y-c.y,g=y.x-f.x,_=y.y-f.y,v=(-S*(c.x-f.x)+m*(c.y-f.y))/(-g*S+m*_),E=(g*(c.y-f.y)-_*(c.x-f.x))/(-g*S+m*_),(p=v>=0&amp;&amp;v<=1&amp;&amp;E>=0&amp;&amp;E<=1?{x:c.x+E*m,y:c.y+E*S}:null)?(o[1]=p,i={type:&quot;line&quot;,points:[p,n[1]]}):(o[1]=r(u,h)?u:h,i={type:&quot;line&quot;,points:[u,n[1]]}),a.len=_e(o[0],o[1]))):i={type:&quot;line&quot;,points:n},i.len=_e(i.points[0],i.points[1]),l.push(a=i)):(l.push({type:&quot;cubic&quot;,points:function(e,t,n,a,i,o){for(var l,r,s=be(e,t,n,a)/o,u=1/(i>o?s*(i/o):s),h=[],p=0;r=(90-(l=xe(e,t,n,a,p)).angle)*(Math.PI/180),h.push({x:l.x+Math.cos(r)*i,y:l.y+Math.sin(r)*i*-1}),!(p>=1);)(p+=u)>1&amp;&amp;(p=1);return h}(e[0],e[1],e[2],e[3],t,16)}),a=null)}),a=null,l.forEach(function(e){var i;&quot;line&quot;===e.type?(e.inside&amp;&amp;(a.len>t?((i=a.points)[1]=Ee(i[0],i[1],-t),a.len=_e(i[0],i[1])):(a.points=null,a.len=0),e.len>t+n?((i=e.points)[0]=Ee(i[1],i[0],-(t+n)),e.len=_e(i[0],i[1])):(e.points=null,e.len=0)),a=e):a=null}),l.reduce(function(e,t){var n=t.points;return n&amp;&amp;(i&amp;&amp;r(n[0],i)||e.push({type:&quot;M&quot;,values:[n[0].x,n[0].y]}),&quot;line&quot;===t.type?e.push({type:&quot;L&quot;,values:[n[1].x,n[1].y]}):(n.shift(),n.forEach(function(t){e.push({type:&quot;L&quot;,values:[t.x,t.y]})})),i=n[n.length-1]),e},[])},newText:function(e,t,n,a){var i,o,l,r,u,h,p,c,d,f;return(r=(l=t.createElementNS(U,&quot;defs&quot;)).appendChild(t.createElementNS(U,&quot;path&quot;))).id=i=n+&quot;-path&quot;,(h=(u=t.createElementNS(U,&quot;text&quot;)).appendChild(t.createElementNS(U,&quot;textPath&quot;))).href.baseVal=&quot;#&quot;+i,h.startOffset.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX,0),h.textContent=e,&quot;boolean&quot;!=typeof s&amp;&amp;(s=&quot;paintOrder&quot;in u.style),a&amp;&amp;!s?(u.id=o=n+&quot;-text&quot;,l.appendChild(u),(d=(p=t.createElementNS(U,&quot;g&quot;)).appendChild(t.createElementNS(U,&quot;use&quot;))).href.baseVal=&quot;#&quot;+o,(c=p.appendChild(t.createElementNS(U,&quot;use&quot;))).href.baseVal=&quot;#&quot;+o,(f=d.style).strokeLinejoin=&quot;round&quot;,{elmPosition:u,elmPath:r,elmOffset:h,styleText:u.style,styleFill:c.style,styleStroke:f,styleShow:p.style,elmsAppend:[l,p]}):(f=u.style,a&amp;&amp;(f.strokeLinejoin=&quot;round&quot;,f.paintOrder=&quot;stroke&quot;),{elmPosition:u,elmPath:r,elmOffset:h,styleText:f,styleFill:f,styleStroke:a?f:null,styleShow:f,elmsAppend:[l,u]})},initSvg:function(e,t){var a,i,o=n.pathLabel.newText(e.text,t.baseWindow.document,d+&quot;-pathLabel-&quot;+e._id,e.outlineColor);[&quot;elmPosition&quot;,&quot;elmPath&quot;,&quot;elmOffset&quot;,&quot;styleFill&quot;,&quot;styleShow&quot;,&quot;elmsAppend&quot;].forEach(function(t){e[t]=o[t]}),e.isShown=!1,e.styleShow.visibility=&quot;hidden&quot;,n.captionLabel.textStyleProps.forEach(function(t){null!=e[t]&amp;&amp;(o.styleText[t]=e[t])}),o.elmsAppend.forEach(function(e){t.svg.appendChild(e)}),o.elmPath.setPathData([{type:&quot;M&quot;,values:[0,100]},{type:&quot;h&quot;,values:[100]}]),a=o.elmPosition.getBBox(),o.styleText.textAnchor=[&quot;start&quot;,&quot;end&quot;,&quot;middle&quot;][e.semIndex],2!==e.semIndex||e.lineOffset||o.elmOffset.startOffset.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PERCENTAGE,50),e.height=a.height,e.outlineColor&amp;&amp;(i=(i=a.height/9)>10?10:i<2?2:i,o.styleStroke.strokeWidth=i+&quot;px&quot;,o.styleStroke.stroke=e.outlineColor),e.strokeWidth=i||0,Te(e.aplStats,n.pathLabel.stats),e.updateColor(t),e.updatePath(t),e.updateStartOffset(t),Q&amp;&amp;De(t,{}),e.updateShow(t)},bind:function(e,t){var a=t.props;return e.color||Ie(a,&quot;cur_line_color&quot;,e.updateColor),Ie(a,&quot;cur_line_strokeWidth&quot;,e.updatePath),Ie(a,&quot;apl_path&quot;,e.updatePath),e.semIndex=&quot;startLabel&quot;===t.optionName?0:&quot;endLabel&quot;===t.optionName?1:2,(2!==e.semIndex||e.lineOffset)&amp;&amp;Ie(a,&quot;cur_attach_plugBackLenSE&quot;,e.updateStartOffset),Ie(a,&quot;svgShow&quot;,e.updateShow),Q&amp;&amp;Ie(a,&quot;new_edge4viewBox&quot;,e.adjustEdge),n.pathLabel.initSvg(e,a),!0},unbind:function(e,t){var a=t.props;e.elmsAppend&amp;&amp;(e.elmsAppend.forEach(function(e){a.svg.removeChild(e)}),e.elmPosition=e.elmPath=e.elmOffset=e.styleFill=e.styleShow=e.elmsAppend=null),Te(e.curStats,n.pathLabel.stats),Te(e.aplStats,n.pathLabel.stats),e.color||Ce(a,&quot;cur_line_color&quot;,e.updateColor),Ce(a,&quot;cur_line_strokeWidth&quot;,e.updatePath),Ce(a,&quot;apl_path&quot;,e.updatePath),(2!==e.semIndex||e.lineOffset)&amp;&amp;Ce(a,&quot;cur_attach_plugBackLenSE&quot;,e.updateStartOffset),Ce(a,&quot;svgShow&quot;,e.updateShow),Q&amp;&amp;(Ce(a,&quot;new_edge4viewBox&quot;,e.adjustEdge),De(a,{}))},removeOption:function(e,t){var n=t.props,a={};a[t.optionName]=&quot;&quot;,Ze(n,a)},remove:function(e){e.boundTargets.length&amp;&amp;(console.error(&quot;LeaderLineAttachment was not unbound by remove&quot;),e.boundTargets.forEach(function(t){n.pathLabel.unbind(e,t)}))}}},Object.keys(n).forEach(function(e){Ye[e]=function(){return new a(n[e],Array.prototype.slice.call(arguments))}}),Ye.positionByWindowResize=!0,window.addEventListener(&quot;resize&quot;,ae.add(function(){Ye.positionByWindowResize&amp;&amp;Object.keys(se).forEach(function(e){De(se[e],{position:!0})})}),!1),Ye}();</script><div data-connections=&quot;[{&amp;quot;from&amp;quot;:{&amp;quot;proc&amp;quot;:&amp;quot;Randomius&amp;quot;,&amp;quot;port&amp;quot;:&amp;quot;out&amp;quot;},&amp;quot;to&amp;quot;:{&amp;quot;proc&amp;quot;:&amp;quot;Tallystrix&amp;quot;,&amp;quot;port&amp;quot;:&amp;quot;stat&amp;quot;}},{&amp;quot;from&amp;quot;:{&amp;quot;proc&amp;quot;:&amp;quot;Chronon&amp;quot;,&amp;quot;port&amp;quot;:&amp;quot;out&amp;quot;},&amp;quot;to&amp;quot;:{&amp;quot;proc&amp;quot;:&amp;quot;Tallystrix&amp;quot;,&amp;quot;port&amp;quot;:&amp;quot;poke&amp;quot;}},{&amp;quot;from&amp;quot;:{&amp;quot;proc&amp;quot;:&amp;quot;Tallystrix&amp;quot;,&amp;quot;port&amp;quot;:&amp;quot;alert&amp;quot;},&amp;quot;to&amp;quot;:{&amp;quot;proc&amp;quot;:&amp;quot;Claxxus&amp;quot;,&amp;quot;port&amp;quot;:&amp;quot;in&amp;quot;}}]&quot; id=&quot;flow-data&quot; style=&quot;display: none;&quot;></div><script>
window.addEventListener('load', function() {
  const dataEl = document.getElementById('flow-data');
  const connectionsJSON = dataEl.getAttribute('data-connections');
  const connections = JSON.parse(connectionsJSON);
  function drawConnections() {
    setTimeout(() => {
      connections.forEach(conn => {
        const outSocketId = `:${conn.from.proc}-:${conn.from.port}`;
        const inSocketId = `:${conn.to.proc}-:${conn.to.port}`;
        const outSocketEl = document.getElementById(outSocketId);
        const inSocketEl = document.getElementById(inSocketId);
        const line = new LeaderLine(
          outSocketEl,
          inSocketEl,
          {color: '#52606D',
           size: 3,
           startSocket: 'bottom',
           endSocket: 'top',
           path: 'grid',
           // hide: true,
           animOptions: {duration: 1000, timing: 'ease'}});
        // line.show('draw');
      });
    }, 500);
  }
  drawConnections();});</script><style>html,
body {
  margin: 0;
  padding: 0;
}

body {
  height: 100vh;
  width: 100vw;
  margin-top: 50px;
  background-color: #CBD2D9;
}

.row-3 {
  display: flex;
  flex-direction: row;
  justify-content: center;
  gap: 10px;
  align-items: center;
}

.card-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 40px;
  min-width: 220px;
}
.card-container .proc-card {
  background: #F5F7FA;
  border-radius: 3px;
  width: 100%;
  display: inline-block;
  position: relative;
  transition: all 0.4s ease-in-out;
  will-change: height;
  margin-bottom: 55px;
}
.card-container .proc-card.expanded .expanded-view {
  max-height: 500px;
  opacity: 1;
  visibility: visible;
}
.card-container .proc-card .expanded-view {
  transition: all 0.4s ease-in-out;
  max-height: 0;
  opacity: 0;
  overflow: hidden;
  visibility: hidden;
}
.card-container .proc-card .expanded-view .header-labels {
  display: flex;
  justify-content: center;
  padding: 0 15px;
}
.card-container .proc-card .expanded-view .header-labels .header-label {
  font-size: 1.75em;
  font-weight: 500;
  color: #4a4a4a;
  text-align: center;
  width: 150px;
}
.card-container .proc-card .expanded-view .middle-section-one-container {
  box-sizing: border-box;
  background: #52606D;
  color: #E4E7EB;
  border-radius: 2px;
  position: relative;
  padding: 10px 0;
  width: calc(100% - 20px);
  margin: auto;
}
.card-container .proc-card .expanded-view .title-container {
  text-align: center;
}
.card-container .proc-card .expanded-view .title-container .title {
  font-size: 2.3em;
  font-weight: 600;
  margin: 0;
  color: white;
}
.card-container .proc-card .output-section {
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  box-sizing: border-box;
}
.card-container .proc-card .output-section .output-container {
  display: flex;
  flex-direction: row;
  gap: 15px;
  justify-content: center;
  align-items: center;
  width: calc(100% - 14px);
  margin: 0 7px;
  padding: 0 0;
  box-sizing: border-box;
}
.card-container .proc-card .output-section .output-container .output {
  flex: 1;
  min-width: 110px;
  padding: 0 8px;
  font-size: 1.75em;
  color: #4a4a4a;
  text-align: center;
  height: 40px;
  display: flex;
  justify-content: center;
  align-items: center;
  white-space: nowrap;
}
</style></head><body><div id=&quot;chart&quot;><div class=&quot;row-3&quot;><div class=&quot;card-container&quot; id=&quot;Randomius&quot;><div class=&quot;proc-card expanded&quot;><div class=&quot;expanded-view&quot;><div class=&quot;header-labels&quot;></div><div class=&quot;middle-section-one-container&quot;><div class=&quot;title-container&quot;><h2 class=&quot;title&quot;>Randomius</h2></div></div><div class=&quot;output-section&quot;><div class=&quot;output-container&quot;><div class=&quot;output&quot; id=&quot;:Randomius-:out&quot;>out</div></div></div></div></div></div><div class=&quot;card-container&quot; id=&quot;Chronon&quot;><div class=&quot;proc-card expanded&quot;><div class=&quot;expanded-view&quot;><div class=&quot;header-labels&quot;></div><div class=&quot;middle-section-one-container&quot;><div class=&quot;title-container&quot;><h2 class=&quot;title&quot;>Chronon</h2></div></div><div class=&quot;output-section&quot;><div class=&quot;output-container&quot;><div class=&quot;output&quot; id=&quot;:Chronon-:out&quot;>out</div></div></div></div></div></div></div><div class=&quot;row-3&quot;><div class=&quot;card-container&quot; id=&quot;Tallystrix&quot;><div class=&quot;proc-card expanded&quot;><div class=&quot;expanded-view&quot;><div class=&quot;header-labels&quot;><div class=&quot;header-label&quot; id=&quot;:Tallystrix-:stat&quot;>stat</div><div class=&quot;header-label&quot; id=&quot;:Tallystrix-:poke&quot;>poke</div></div><div class=&quot;middle-section-one-container&quot;><div class=&quot;title-container&quot;><h2 class=&quot;title&quot;>Tallystrix</h2></div></div><div class=&quot;output-section&quot;><div class=&quot;output-container&quot;><div class=&quot;output&quot; id=&quot;:Tallystrix-:alert&quot;>alert</div></div></div></div></div></div></div><div class=&quot;row-3&quot;><div class=&quot;card-container&quot; id=&quot;Claxxus&quot;><div class=&quot;proc-card expanded&quot;><div class=&quot;expanded-view&quot;><div class=&quot;header-labels&quot;><div class=&quot;header-label&quot; id=&quot;:Claxxus-:in&quot;>in</div></div><div class=&quot;middle-section-one-container&quot;><div class=&quot;title-container&quot;><h2 class=&quot;title&quot;>Claxxus</h2></div></div><div class=&quot;output-section&quot;><div class=&quot;output-container&quot;></div></div></div></div></div></div></div></body></html>" width="100%"></iframe>
<p>The Flow creates them, calling upon their civic duties, Describe your duties. Initialize your station.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb36-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> flow </span>(flow/create-flow config))</span></code></pre></div>
</div>
<p>The city is ready, but not yet in action.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb37-1">(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">def</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> chs </span>(flow/start flow))</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>Randomius initialing
Tallystrix initializing
Chronon initializing
Claxxus initializing
</code></pre>
</div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb39-1">chs</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb40-1">{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:report-chan</span> #object [ManyToManyChannel],</span>
<span id="cb40-2"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:error-chan</span> #object [ManyToManyChannel]}</span></code></pre></div>
</div>
<p><code>report-chan</code> and <code>error-chan</code> are special conduits in the Flow. Tallystrix sends her summaries to <code>report</code>, dutifully. When something breaks it flows to <code>error</code>.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb41-1">(a/poll! (<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:report-chan</span> chs))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb42-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span></span></code></pre></div>
</div>
<p>Start initialized, but transitioning has not occurred yet. Transition with order.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb43-1">(flow/resume flow)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb44-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb45-1">(Thread/sleep <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
THREAD OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>Randomius transitioning :clojure.core.async.flow/resume
Talon, set flight!
Tallystrix transitioning :clojure.core.async.flow/resume
Chronon transitioning :clojure.core.async.flow/resume
Chronon running
Claxxus transitioning :clojure.core.async.flow/resume
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb47-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span></span></code></pre></div>
</div>
<p>The city breathes, the asynchronous allegiance stirs.</p>
<p>Transform with purpose.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb48-1">(a/poll! (<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:report-chan</span> chs))</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
THREAD OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>SQUARK: 3
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb50-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb51-1">(a/poll! (<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:report-chan</span> chs))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb52-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb53-1">(flow/inject flow [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Tallystrix</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:poke</span>] [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span>])</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
THREAD OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>Chronon transforms :alarm true to :out
Randomius transform 3 from :stat to :out
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb55-1">#object [FutureTask]</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb56-1">(a/poll! (<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:report-chan</span> chs))</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
THREAD OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>Tallystrix transforming :stat 3
Tallystrix transforming :poke true
Tallystrix transforming :poke true
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb58-1">{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:avg</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>}</span></code></pre></div>
</div>
<p>Mischief is afoot.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb59-1">(flow/inject flow [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Tallystrix</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span>] [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abc1000"</span>])</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb60-1">#object [FutureTask]</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb61-1">(a/poll! (<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:error-chan</span> chs))</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb62-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span></span></code></pre></div>
</div>
<p>Claxxus does not speak of such failures. He is for alerts. Thresholds breached, events of note, things the city must hear.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb63-1">(flow/inject flow [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Claxxus</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:in</span>] [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:sandwich</span>])</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
THREAD OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>Tallystrix transforming :stat abc1000
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb65-1">#object [FutureTask]</span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb66-1">(Thread/sleep <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
THREAD OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>Claxxus transforming :in :sandwich
Alert:  :sandwich
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb68-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span></span></code></pre></div>
</div>
<p>Fluxus est graphum, fluxus est processus, fluxus est data.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb69-1">(datafy/datafy flow)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb70-1">{<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:procs</span></span>
<span id="cb70-2"> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Randomius</span></span>
<span id="cb70-3">  {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:args</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>},</span>
<span id="cb70-4">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:proc</span></span>
<span id="cb70-5">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:step</span> core.async.flow.example.asynctopolis/Randomius,</span>
<span id="cb70-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:desc</span></span>
<span id="cb70-7">    {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:params</span></span>
<span id="cb70-8">     {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Min value to generate"</span>,</span>
<span id="cb70-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Max value to generate"</span>,</span>
<span id="cb70-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time in ms to wait between generating"</span>},</span>
<span id="cb70-11">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:outs</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Output channel for stats"</span>}}}},</span>
<span id="cb70-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Tallystrix</span></span>
<span id="cb70-13">  {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:args</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>},</span>
<span id="cb70-14">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:proc</span></span>
<span id="cb70-15">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:step</span> core.async.flow.example.asynctopolis/Tallystrix,</span>
<span id="cb70-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:desc</span></span>
<span id="cb70-17">    {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:params</span></span>
<span id="cb70-18">     {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:min</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Min value, alert if lower"</span>,</span>
<span id="cb70-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:max</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Max value, alert if higher"</span>},</span>
<span id="cb70-20">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:ins</span></span>
<span id="cb70-21">     {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Channel to receive stat values"</span>,</span>
<span id="cb70-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:poke</span></span>
<span id="cb70-23">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Channel to poke when it is time to report a window of data to the log"</span>},</span>
<span id="cb70-24">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:outs</span></span>
<span id="cb70-25">     {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alert</span></span>
<span id="cb70-26">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Notify of value out of range {:val value, :error :high|:low"</span>},</span>
<span id="cb70-27">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:workload</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:compute</span>}}},</span>
<span id="cb70-28">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Chronon</span></span>
<span id="cb70-29">  {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:args</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3000</span>},</span>
<span id="cb70-30">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:proc</span></span>
<span id="cb70-31">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:step</span> core.async.flow.example.asynctopolis/Chronon,</span>
<span id="cb70-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:desc</span></span>
<span id="cb70-33">    {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:params</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:wait</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time to wait between pokes"</span>},</span>
<span id="cb70-34">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:outs</span></span>
<span id="cb70-35">     {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Poke channel, will send true when the alarm goes off"</span>}}}},</span>
<span id="cb70-36">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Claxxus</span></span>
<span id="cb70-37">  {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:args</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:prefix</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alert: "</span>},</span>
<span id="cb70-38">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:proc</span></span>
<span id="cb70-39">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:step</span> core.async.flow.example.asynctopolis/Claxxus,</span>
<span id="cb70-40">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:desc</span></span>
<span id="cb70-41">    {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:params</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:prefix</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Log message prefix"</span>},</span>
<span id="cb70-42">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:ins</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:in</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Channel to receive messages"</span>}}},</span>
<span id="cb70-43">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:chan-opts</span></span>
<span id="cb70-44">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:in</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buf-or-n</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> SlidingBuffer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>}}}}},</span>
<span id="cb70-45"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:conns</span></span>
<span id="cb70-46"> [[[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Randomius</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span>] [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Tallystrix</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span>]]</span>
<span id="cb70-47">  [[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Chronon</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span>] [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Tallystrix</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:poke</span>]]</span>
<span id="cb70-48">  [[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Tallystrix</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alert</span>] [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Claxxus</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:in</span>]]],</span>
<span id="cb70-49"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:execs</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:mixed</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:io</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:compute</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span>},</span>
<span id="cb70-50"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:chans</span></span>
<span id="cb70-51"> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:ins</span></span>
<span id="cb70-52">  {[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Tallystrix</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:stat</span>]</span>
<span id="cb70-53">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb70-54">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb70-55">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb70-56">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> FixedBuffer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>}},</span>
<span id="cb70-57">   [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Tallystrix</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:poke</span>]</span>
<span id="cb70-58">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb70-59">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb70-60">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb70-61">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> FixedBuffer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>}},</span>
<span id="cb70-62">   [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Claxxus</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:in</span>]</span>
<span id="cb70-63">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb70-64">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb70-65">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb70-66">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> SlidingBuffer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>}}},</span>
<span id="cb70-67">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:outs</span></span>
<span id="cb70-68">  {[<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Randomius</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span>]</span>
<span id="cb70-69">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb70-70">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb70-71">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb70-72">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> FixedBuffer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>}},</span>
<span id="cb70-73">   [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Tallystrix</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:alert</span>]</span>
<span id="cb70-74">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb70-75">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb70-76">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb70-77">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> SlidingBuffer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>}},</span>
<span id="cb70-78">   [<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:Chronon</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:out</span>]</span>
<span id="cb70-79">   {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb70-80">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb70-81">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb70-82">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> FixedBuffer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>}}},</span>
<span id="cb70-83">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:error</span></span>
<span id="cb70-84">  {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb70-85">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb70-86">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb70-87">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> SlidingBuffer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>}},</span>
<span id="cb70-88">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:report</span></span>
<span id="cb70-89">  {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:put-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb70-90">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:take-count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb70-91">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:closed</span>? <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">false</span>,</span>
<span id="cb70-92">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:buffer</span> {<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:type</span> SlidingBuffer, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:count</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">:capacity</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>}}}}</span></code></pre></div>
</div>
<p>The flow may coordinate peace.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb71-1">(flow/pause flow)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb72-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb73-1">(Thread/sleep <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
THREAD OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>Chronon transitioning :clojure.core.async.flow/pause
Chronon rests.
Randomius transitioning :clojure.core.async.flow/pause
Claxxus transitioning :clojure.core.async.flow/pause
Talon, rest!
Tallystrix transitioning :clojure.core.async.flow/pause
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb75-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span></span></code></pre></div>
</div>
<p>Pax optima rerum.</p>
<p>The flow may cease.</p>
<div class="sourceClojure">
<div class="sourceCode" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb76-1">(flow/stop flow)</span></code></pre></div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb77-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
</div>
<div class="sourceClojure">
<div class="sourceCode" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb78-1">(Thread/sleep <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
THREAD OUT
</div>
</div>
<div class="callout-body-container callout-body">
<pre><code>Claxxus transitioning :clojure.core.async.flow/stop
Randomius transitioning :clojure.core.async.flow/stop
Tallystrix transitioning :clojure.core.async.flow/stop
Chronon transitioning :clojure.core.async.flow/stop
</code></pre>
</div>
</div>
<div class="printedClojure">
<div class="sourceCode" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode clojure code-with-copy"><code class="sourceCode clojure"><span id="cb80-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nil</span></span></code></pre></div>
</div>
<p>The city falls silent.</p>
<p>Thus does Asynctopolis coordinate, thus is Vita Processus observed.</p>
<p>The flow of Asynctopolis is a choreography of concurrent logic, where each part knows just enough to play its role, and no more. It’s a quiet network of intent. Each role with a narrow purpose, joined by shared channels and rhythm.</p>
<p>You can observe its work as it happens. You can inspect, poke, pause, and resume. Buffers shape its tempo, and transitions reveal its state.</p>
<p>In Asynctopolis, no one rules, yet the system flows precisely, predictably, asynchronously.</p>
<div style="background-color:grey;height:2px;width:100%;"></div>
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/src/core/async/flow/example/asynctopolis.clj">src/core/async/flow/example/asynctopolis.clj</a></small></small></pre></div>


</section>

 ]]></description>
  <guid>https://clojurecivitas.github.io/core/async/flow/example/asynctopolis.html</guid>
  <pubDate>Thu, 01 May 2025 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
