[
  {
    "objectID": "blog/kirahowe/2021-04-24-bad-websites.html",
    "href": "blog/kirahowe/2021-04-24-bad-websites.html",
    "title": "There Is So Much Low Hanging Fruit In Web Development",
    "section": "",
    "text": "I am perpetually annoyed at how frustrating it is to build simple websites. Fair warning, this post is a bit ranty. I will explore technical solutions to these problems in a follow up post. But this one sets the stage first to explain why I spend so much time working on and thinking about things that appear to be easy, solved problems.\nThere’s a certain kind of website that lands in a kind of uncanny valley, being at once\n\ntoo simple to justify running a server around the clock just to keep it available\nnot visited enough to justify paying very much at all to keep online\ntoo bespoke and un-blog-like enough to be a massive PITA to build using existing static website generation tools like jekyll or hugo\ncomplicated enough to be too brittle to build from a few cobbled together scripts\n\nI contend that there is currently no tool that makes it easy to build accessible, modern, fast, static websites that are any more complicated than a very plain-looking blog.\nTo be fair, maybe this is because this just isn’t as easy a task as it seems, which is why so many people earn a literal fortune doing it. And that’s fair. If you want a nice website, spending a few thousand dollars on a professional developer and designer is the way to go. But what about all the millions of people who just have some dumb essays they want to publish? Or some random idea to try out to see if it will stick? It’s really annoying to do right now.\nI’m sad that there is no better solution than the drag-and-drop website builders backed by javascript frameworks that make database-driven websites to serve what is essentially static content. This has resulted in an internet where the vast majority of websites are inaccessible (80% of websites have significant accessibility issues), slow (only 15% of websites operate at an acceptable page speed), and bloated (70% of pages are over 1MB).\nWhen I first got into web development I was shocked to discover that the vast majority of the industry is pretty ok with this state of affairs. I do bring up these concerns with my fellow tech people from time to time but the answer I overwhelmingly get reflects the kind of half-baked libertarian free-market indifference that has thoroughly permeated the industry: “something something capitalism if people are making money everything must be fine”.\nI disagree. Everything is not fine. Whether something makes money is not the only measure that matters. It’s true that there are many companies and people that have made a fortune polluting the internet with inaccesible, slow, and bloated websites. That doesn’t make it ok.\nAnyway, believe it or not complaining about problems is not my favourite passtime. I spend most of my waking hours thinking about and working on solutions to problems, but I also spend a fair amount of time trying to decide which problems to focus on. All of this got me thinking about what key features I need in a website generator, which I’ll write down next."
  },
  {
    "objectID": "blog/kirahowe/2021-03-10-software-ethics.html",
    "href": "blog/kirahowe/2021-03-10-software-ethics.html",
    "title": "Ethics Are Missing From Software Development",
    "section": "",
    "text": "There is something conspicuously missing from software development education. As developers, we learn all about how to write, organize, design, share, use, and test software, but the discussion of how that software will actually be used and what it’s impact on the world will be is usually an afterthought.\nWhat discussions do happen tend to be around licensing and intellectual property, with the main focus on not getting sued. That stuff matters, but it doesn’t come close to addressing and grappling with the total impact of the tech industry.\nThe effects of software on the world are enormous. It affects the way we do everything and shows up in every corner of our lives:\n\nhow we keep in touch with friends and family\nhow we get around\nhow we work\nhow we learn about the world and make decisions\nhow we grow up\nhow we affect the planet\n\nPreventing our software from making the world worse should be at the top of our minds as technologists, but it’s almost always on the backburner. There’s a huge disconnect between writing some characters on a computer and seeing effects in the real world.\nI’m worried that’s a really big problem, though. I really don’t think it’s an exaggeration to say that some of the most dire problems we need to collectively deal with in my lifetime are caused or exacerbated by software.\nThings like the environmental crisis. Bitcoin bullshit already consumes more resources than many countries. Or the mental health crisis. There’s good evidence that suggests the internet makes us meaner, angrier, and sadder than ever. Or the erosion of democracy worldwide. There’s no doubt that social media is responsible for flooding our information ecosystem with disinformation, which spreads like cancer through our networks and leads us to making irrational decisions that can have deleterious long term effects.\nI’m not advocating for every software engineer to become an ethicist, but we can do a lot better at being aware of the impact our work has on the world. It’s definitely not nothing, and sometimes it’s everything."
  },
  {
    "objectID": "blog/kirahowe/2020-10-15-journalism-is-important.html",
    "href": "blog/kirahowe/2020-10-15-journalism-is-important.html",
    "title": "Journalism Is Important",
    "section": "",
    "text": "This is the first post in a series on things the 2020 pandemic has taught me. It’s been by far the weirdest and hardest thing I’ve experienced so far in my life. It was a real struggle to figure out how to operate in this new kind of world, but after about half a year I feel like I’m finally starting to get my bearings. Some days feel normal again, and I can mostly do the things I used to enjoy before the pandemic hit. Now that I have some presence of mind back I realized the experience has actually taught me several important things. The first is that journalism is important."
  },
  {
    "objectID": "blog/kirahowe/2020-10-15-journalism-is-important.html#we-need-useful-and-true-information",
    "href": "blog/kirahowe/2020-10-15-journalism-is-important.html#we-need-useful-and-true-information",
    "title": "Journalism Is Important",
    "section": "We Need Useful and True Information",
    "text": "We Need Useful and True Information\nMost of the media we consume now is either clickbait or fake news. Nobody wants to believe that, but it’s immediately obvious as soon as you find yourself seeking actual news. You know, like new information that’s true about the world. This pandemic has taught me a new appreciation for a certain kind of journalism.\nI live in a big city and things around me change frequently and quickly. I don’t want to wade through hours of government press conferences or pages of legislation to understand what’s going on – whether I’m allowed to do my plans this weekend, what I need to wear or do in public, where I should avoid spending time. Those are all things I care about and need to know in order to live my life, but the answers aren’t immediately clear when there’s a torrent of new information coming from every level of government every week.\nConsolidating this deluge of new information into a mass-consumable format is one thing certain types of real journalists do. They have standards and accountability. They have also have mechanisms for earning trust, like fact checking and verifying sources and issuing errata. All of these things make it reasonable for us to believe that what they say is true. At a time when decisions we make can have potentially critical impact, it’s important to learn what the latest updates are and be able to trust them.\nAt the beginning of the pandemic I realized the usual places I got my “news” were honestly trash. I started paying several independent media outlets that employ these kinds of journalists – real people who actually go into the world and collect information then write about it in an honest way – in the hope that they will continue to do this service and can outlast social media’s onslaught on truth and decency."
  },
  {
    "objectID": "blog/kirahowe/2020-10-15-journalism-is-important.html#there-need-to-be-consequences-for-misinformation",
    "href": "blog/kirahowe/2020-10-15-journalism-is-important.html#there-need-to-be-consequences-for-misinformation",
    "title": "Journalism Is Important",
    "section": "There Need To Be Consequences For Misinformation",
    "text": "There Need To Be Consequences For Misinformation\nThis pandemic also made me realize that we really need to do something about bad information. I guess that sounds facetious. Obviously bad information has always been a problem, but we are encountering it in a new way this year and we need to respond to it in a new way, too.\nIncentives are completely misaligned right now. Literally billions of people primarily interact with the outside world through social media, which has monetized “engagement”, which is just a polite term for behaviour manipulation. This compels news outlets to produce “engaging” content so they can compete with all of the other content creators trying to capture our attention. Engaging content is the opposite of thoughtful, nuanced content. This is partly how we got to a world where it’s near impossible to find out what the facts even are.\nIt’s crucial that we figure out how to punish rather than reward the current business model of media and social media companies. It should be easiest and most compelling for a normal person to get information from a reputable authority, not some anonymous, personalized, possibly fake source on the internet.\nIn the midst of a massive health and economic crisis like the one we’re currently living through, peddling government propaganda or disseminating misinformation escalates from being merely annoying and distracting to dangerous and unethical. There are no consequences for this, which is another problem we need to fix. But that’s a whole separate series for another time."
  },
  {
    "objectID": "blog/kirahowe/2020-10-15-journalism-is-important.html#support-actual-journalists",
    "href": "blog/kirahowe/2020-10-15-journalism-is-important.html#support-actual-journalists",
    "title": "Journalism Is Important",
    "section": "Support Actual Journalists",
    "text": "Support Actual Journalists\nIf you don’t already, I want to encourage you to pay money to reputable outlets for your news. You can see which ones those are by checking what they published in the early days of the crisis. Find ones who had journalists on the ground, reporting the breaking news as your city was shutting down and rules were changing day by day. We need those people to keep their jobs.\nAdvertising (meaning, selling our attention) is a broken business model and until we figure out a better way to fund journalism, we’ll have to do it ourselves. There are surprisingly few media companies left that still have actual humans on staff, on the ground in a crisis, reporting new information that it’s important for people to know. We need to support them to make sure they don’t go out of business, having been replaced by clickbait-generating bots and “influencers” who produce vacuous content by the ton for likes.\nWe’ve been blurring the lines between entertainment and journalism for a while now and I think it’s finally catching up with us."
  },
  {
    "objectID": "blog/kirahowe/2020-12-30-how-to-set-up-codecov-for-a-clojure-deps-project.html",
    "href": "blog/kirahowe/2020-12-30-how-to-set-up-codecov-for-a-clojure-deps-project.html",
    "title": "How To Set Up Codecov For a Clojure Deps Project",
    "section": "",
    "text": "Update: I recently switched to using Github Actions to run my tests because I started getting git auth failures trying to fetch git deps on CircleCI. Learning the random YAML magic required to set up a github action was marginally less awful than faffing with ssh keys on circle. You can see the result in this commit. The actual steps to set up codecov for your project are the same.\nAnother update: CircleCI’s support was extremely helpful working with me to get to the bottom of the issue with git deps and ssh keys and found a solution for me. The problem was that the java library the Clojure cli uses to authenticate couldn’t read certain kinds of ssh keys. I updated my circle config with the solution in this commit and am back to using CircleCI now.\nI recently set up code coverage reporting with Codecov for a Clojure project of mine that uses tools.deps and builds on CircleCI. It turned out to be pretty easy but the documentation for the various parts was a bit ambiguous, so I wrote down the steps here in case you’re looking to do the same. You can see all the changes it took together in context in this commit where I set it up for my project."
  },
  {
    "objectID": "blog/kirahowe/2020-12-30-how-to-set-up-codecov-for-a-clojure-deps-project.html#assumptions",
    "href": "blog/kirahowe/2020-12-30-how-to-set-up-codecov-for-a-clojure-deps-project.html#assumptions",
    "title": "How To Set Up Codecov For a Clojure Deps Project",
    "section": "Assumptions",
    "text": "Assumptions\nThese instructions assume your project uses the same specific set of tools as me:\n\nClojure with tools.deps\nGithub\nCircleCI\nCodecov\n\nThe same idea should work fine with other combinations of services, but you might have to do things slightly differently or tweak some syntax if you use e.g. Gitlab instead of Github or Travis instead of CircleCI."
  },
  {
    "objectID": "blog/kirahowe/2020-12-30-how-to-set-up-codecov-for-a-clojure-deps-project.html#set-up-the-project-in-codecov",
    "href": "blog/kirahowe/2020-12-30-how-to-set-up-codecov-for-a-clojure-deps-project.html#set-up-the-project-in-codecov",
    "title": "How To Set Up Codecov For a Clojure Deps Project",
    "section": "1. Set up the project in Codecov",
    "text": "1. Set up the project in Codecov\n\nSign in to Codecov with Github\nClick “Add New Repository” on the dashboard for your github user/organization (the url should be something like https://codecov.io/gh/&lt;gh-username&gt;)\nSelect the repo\n\nThis should leave you at a screen that shows you a Codecov token. If not, click on the “Settings” tab for your project in Codecov to see the token. Copy it."
  },
  {
    "objectID": "blog/kirahowe/2020-12-30-how-to-set-up-codecov-for-a-clojure-deps-project.html#add-the-codecov-token-to-circleci",
    "href": "blog/kirahowe/2020-12-30-how-to-set-up-codecov-for-a-clojure-deps-project.html#add-the-codecov-token-to-circleci",
    "title": "How To Set Up Codecov For a Clojure Deps Project",
    "section": "2. Add the Codecov token to CircleCI",
    "text": "2. Add the Codecov token to CircleCI\n\nIn CircleCI “Project Settings” &gt; “Environment Variables” set CODECOV_TOKEN to the value copied from above\n\nI’m assuming your project is already building on CircleCI. If not you can do similar steps to above on Circle (sign in with Github and add your project), and crib my config for a Clojure deps project to get started."
  },
  {
    "objectID": "blog/kirahowe/2020-12-30-how-to-set-up-codecov-for-a-clojure-deps-project.html#generate-codecov-reports-from-test-runs-in-ci",
    "href": "blog/kirahowe/2020-12-30-how-to-set-up-codecov-for-a-clojure-deps-project.html#generate-codecov-reports-from-test-runs-in-ci",
    "title": "How To Set Up Codecov For a Clojure Deps Project",
    "section": "3. Generate Codecov reports from test runs in CI",
    "text": "3. Generate Codecov reports from test runs in CI\n\nAdd a new alias to your deps project to run tests and generate the Codecov reports using cloverage:\n\n:coverage {:extra-paths [\"test\"]\n           :extra-deps {cloverage/cloverage {:mvn/version \"1.2.1\"}}\n           :main-opts [\"-m\" \"cloverage.coverage\" \"-p\" \"src\" \"-s\" \"test\" \"--codecov\"]}\n\nUpdate your run tests step in your CircleCI config to use this new alias:\n\n- run:\n    name: Run tests\n    command: clojure -M:coverage"
  },
  {
    "objectID": "blog/kirahowe/2020-12-30-how-to-set-up-codecov-for-a-clojure-deps-project.html#send-the-coverage-reports-to-codecov",
    "href": "blog/kirahowe/2020-12-30-how-to-set-up-codecov-for-a-clojure-deps-project.html#send-the-coverage-reports-to-codecov",
    "title": "How To Set Up Codecov For a Clojure Deps Project",
    "section": "4. Send the coverage reports to Codecov",
    "text": "4. Send the coverage reports to Codecov\n\nAdd a step in your CircleCI config to send the reports to Codecov:\n\n- run:\n    name: Send test coverage to Codecov\n    command: bash &lt;(curl -s https://codecov.io/bash)"
  },
  {
    "objectID": "blog/kirahowe/2020-12-30-how-to-set-up-codecov-for-a-clojure-deps-project.html#caveats",
    "href": "blog/kirahowe/2020-12-30-how-to-set-up-codecov-for-a-clojure-deps-project.html#caveats",
    "title": "How To Set Up Codecov For a Clojure Deps Project",
    "section": "Caveats",
    "text": "Caveats\nCode coverage isn’t a great metric for the quality of your test suite. It’s pretty easy to write a couple of tests that exercise most of your code but don’t prove much about it’s correctness, at least in Clojure where your whole program is basically a pipeline to transform data. I still use this metric though. I find it useful as a high level check to see if there are entirely untested functions, which can also help find dead code. Anyway, just a note of caution to not lean too heavily on code coverage metrics as a measure of the quality of your test suite. It’s more like a flag that gets raised if you forget to test something altogether. High code coverage doesn’t necessarily indicate a good test suite, but low code coverage definitely indicates a bad one."
  },
  {
    "objectID": "blog/kirahowe/2021-01-19-becoming-a-software-developer.html",
    "href": "blog/kirahowe/2021-01-19-becoming-a-software-developer.html",
    "title": "Becoming A Software Developer",
    "section": "",
    "text": "I get asked a lot for advice on becoming a software developer. I didn’t study anything related to software in university, but now it’s what I do for a living. I also spent about 3.5 years mentoring with Lighthouse Labs, a local web development bootcamp, and watched (and would like to believe at least in some cases, helped) hundreds of people of every age from wildly diverse backgrounds get jobs as software developers.\nThis is my advice for people with no technical experience who want to land their first job writing software. It’s based on my experience as both a person who did it myself and as a mentor to other people who did it. There’s no single right way to go about this, and no matter how you do it’s a lot of work. But these are some things that have worked for other people, myself included. These suggestions are arranged roughly in order, but of course many overlap and kind of happen at the same time."
  },
  {
    "objectID": "blog/kirahowe/2021-01-19-becoming-a-software-developer.html#know-what-youre-getting-yourself-into",
    "href": "blog/kirahowe/2021-01-19-becoming-a-software-developer.html#know-what-youre-getting-yourself-into",
    "title": "Becoming A Software Developer",
    "section": "Know what you’re getting yourself into",
    "text": "Know what you’re getting yourself into\nSoftware engineering is nothing like I expected it to be. All the hard parts involve dealing with people. Part of my original motivation for choosing a career in software was thinking I wouldn’t have to deal much with people. I wasn’t very good at it and didn’t enjoy it, but my fantasy of just sitting in front of my computer all day and watching my bank account fill up was totally delusional.\nThe reality of writing code for a living, in my experience, includes dealing with a lot of office politics, entitled middle managers, stressed out co-workers, and yes, condescencion and occasional harassment (especially if you’re not male). I find the culture of the tech industry generally toxic and abusive and it has very nearly broken my spirit on multiple occasions.\nYou won’t be alone dealing with this. Your co-workers and countless people across the industry share the experience. And it is ultimately bearable.\nI don’t say this to discourage anyone from getting into software, but just to highlight that the stuff you hear from recruiters is bullshit. It’s not all free trips and fancy perks and big paycheques. It is those things, sure, but the reality is much less glamorous than they make it sound.\nBeing a software developer means getting paid to solve other people’s problems. The rest is fluff. This makes it a solid career path, though, because other people have a lot of problems.\nIt is still an empowering and lucrative career. Despite my generally negative view of the industry, I still highly recommend and help people into a career in software regularly. Most individual software developers, like most people, are genuine and kind. And I can’t speak to problems in other industries first hand, but I gather most high-paying, male-dominated industries are pretty similar anyway."
  },
  {
    "objectID": "blog/kirahowe/2021-01-19-becoming-a-software-developer.html#meet-lots-of-people",
    "href": "blog/kirahowe/2021-01-19-becoming-a-software-developer.html#meet-lots-of-people",
    "title": "Becoming A Software Developer",
    "section": "Meet lots of people",
    "text": "Meet lots of people\nI was referred to three of the four programming jobs I’ve had so far through friends. I made friends with those people who were already programmers at meetups. I didn’t ask them to get me a job, but a lot of companies are pretty much always looking for new software engineers, so when your friend hears you’re looking for that kind of job, they can bring it up at work. I still did interviews, but it makes an enormous difference when someone the boss already knows and trusts can vouch for you.\nA word on meeting strangers. I, like many people who are into nerd things like software, am the most introverted person I know. I found hanging out in groups of new people excruciating at first, but honestly learning how to not be awkward around strangers is just as important as learning how to code if you want to do well in your career. I just went to the meetups and stood off to the side, awkwardly making eye contact with a few random people. Eventually a friendly extrovert would come up and initiate a conversation, and before I knew it I could hold my own in a crowd.\nCheck out meetups for programming languages you’re interested in, or if there aren’t those kinds of groups where you live, join online communities. Most programming languages have a slack or discord server where people hang out, and in my experience people are usually very welcoming and kind to newbies (at least in the Ruby, Elixir, and Clojure communities; all of which I highly recommend)."
  },
  {
    "objectID": "blog/kirahowe/2021-01-19-becoming-a-software-developer.html#learn-how-to-code-in-public",
    "href": "blog/kirahowe/2021-01-19-becoming-a-software-developer.html#learn-how-to-code-in-public",
    "title": "Becoming A Software Developer",
    "section": "Learn how to code, in public",
    "text": "Learn how to code, in public\nWithout any formal education in software development, you have to offer something else to prove you actually know how to write code. I did this by building a bunch of crappy side projects. The very first thing I ever did was replicate the Google landing page with HTML and CSS. The first actual app I made was a blackjack game with Sinatra. I also made Twitter and Reddit clones with Rails, and little browser games like Pacman with different JavaScript frameworks. Some of that code still exists in my GitHub graveyard if you want to see what I mean by crappy. Other common toy projects include link shorteners, photo galleries, e-commerce stores, time trackers, or clones of whatever software you normally use, like spreadsheets, workflow management, calendars, etc. The possibilities are endless.\nLook for tutorials online that walk through how to build the kinds of things you’re interested in. If you don’t know where to start, The Odin Project and Free Code Camp are two free programs that offer very realistic learning roadmaps. I did parts of both of those but never finished either. I also did several free courses on Coursera and edX, which are both amazing but you have to be careful not to end up in a rabbit hole. Those two mostly have actual university courses, which are super interesting, but not very relevant to things you’ll do in a real job.\nIf your goal is to get from nothing to making money as a developer as fast as possible I recommend sticking to a more targeted learning roadmap like the two above. There are also countless paid ones which vary wildly in price and quality. Be weary about shelling out huge amounts of money for bootcamps. I did pay for a few months of Launch School (which at the time was called “Tea Leaf Academy”), and it was the best career move I ever made. I highly recommend them because they’re in a sweet spot of offering a robust and relevant curriculum without costing a fortune. It’s not free ($200/month), but a few hundred dollars is a very small investment in the scheme of your career. Apparently they also offer a deferred payment option now, too.\nThe career-oriented bootcamps will also teach you loads of useful practical things they don’t teach in the free university courses, like version control (git), testing, and how to collaborate with other developers on one project.\nIt took me 6 months of studying, meeting people, and building crappy software full time before I got my first internship. 95% of Lighthouse Labs graduates are employed as software developers in that timeframe. Launch School delivers impressive, concrete results for many of their students, too. I never finished most of the courses or programs I started. I funded that time off by living like a peasant on money I made running one of those student painting businesses the previous summer. Learning to code can feel like a slog at times, but just stick with it and you’re very likely to be among the vast majority who succeed at this self-educated developer thing. It is a totally achievable and realistic goal and you’re in good company.\nOther than doing free online courses and building apps from tutorials, other ways I learned in public during this time included blogging about my learning journey, making myself a portfolio website to showcase my little projects, and volunteering with some local tech communities. Do what works for you, but focus on ending up with at least a few medium sized projects you can show someone to prove you know how to make software that works."
  },
  {
    "objectID": "blog/kirahowe/2021-01-19-becoming-a-software-developer.html#learn-best-practices",
    "href": "blog/kirahowe/2021-01-19-becoming-a-software-developer.html#learn-best-practices",
    "title": "Becoming A Software Developer",
    "section": "Learn best practices",
    "text": "Learn best practices\nA surprising number of experienced developers still write really horrible code. Spend some time learning about software design and software engineering best practices to avoid becoming one of them. How you do that depends a lot on how you learn. (BTW, you should figure that out before you embark upon a journey of self-re-education for a career change). I absorb a lot from reading and prefer to learn by studying theory over trial and error, so reading and watching talks works really well for me. YMMV and you do ultimately just need experience to really get this stuff, but you don’t have to start from scratch.\nRead “The Pragmatic Programmer” by Dave Thomas and Andrew Hunt, and anything by Sandi Metz. Watch Rich Hickey’s talks, especially “Simple Made Easy”, and Sarah Mei’s “Livable Code”. Other classics include Eric Evans’ “Domain Driven Design” and Martin Fowler’s “Refactoring”. There are countless others and everyone has their opinion about what should be included in the software engineering canon, but these are my recommendations. They’ll provide a solid foundation and ample fodder for further reading and watching."
  },
  {
    "objectID": "blog/kirahowe/2021-01-19-becoming-a-software-developer.html#pour-your-heart-out",
    "href": "blog/kirahowe/2021-01-19-becoming-a-software-developer.html#pour-your-heart-out",
    "title": "Becoming A Software Developer",
    "section": "Pour your heart out",
    "text": "Pour your heart out\nOnce you can write code that mostly works, start looking for a job. Put the word out that you’re seeking your first role writing software. Hopefully one of your programmer friends will know about an open position, but you can still apply to random jobs on the internet, too. This has a very low success rate, but it’s possible. I got one of my four jobs by firing my resume into the abyss. I included a very long and heartfelt cover letter about how I loved programming so much and really wanted to work for this specific company (which I did), and how I learn fast and really believed I could do the job if they’d give me a chance.\nIt worked. The hiring manager said my letter caught his attention. I had one year of experience at that time and had never worked remotely before, but I got the job.\nDon’t be afraid to be authentic. Don’t lie and say you know more than you do, but don’t sell yourself short, either. Bootstrapping a career in software is no small feat and there are many teams out there who would love to hire the kinds of self-starting fast learners who do it."
  },
  {
    "objectID": "blog/kirahowe/2021-01-19-becoming-a-software-developer.html#dont-be-too-picky-at-first",
    "href": "blog/kirahowe/2021-01-19-becoming-a-software-developer.html#dont-be-too-picky-at-first",
    "title": "Becoming A Software Developer",
    "section": "Don’t be too picky (at first!)",
    "text": "Don’t be too picky (at first!)\nThe reality is that your first job or two will probably be pretty crappy and underpaid. At this point you’re trying to convince someone to take a chance on you, and it’s a trade off between your dignity and your future career. In the very beginning, you should prioritize gaining experience over almost everything else. Obviously never put up with anything you’re uncomfortable with, but if you can stick it out it’s worth setting the bar pretty low just to get your first few months of real job experience, IMHO.\nI lucked out and worked with the most amazing team in the world for my first job as a developer, but I discovered from the students I mentored that that is very much not the norm.\nThere are pros and cons to every kind of company, so don’t worry too much about finding the perfect fit right away. Focus on gaining experience at first so you can have the freedom to focus on finding the perfect fit later. I’ve worked with a few different kinds of companies and there are pros and cons no matter where you go.\nBig corporations usually have a lot of experienced developers and lethargic processes, so there’s more opportunity to take your time and get help from people more advanced than you. The pressure is often pretty low because people have such low expectations for new developers, which honestly is fair. You have a lot of room to screw up because you’re such a tiny cog in a massive machine. The downsides depend on your personality. For me it was that I find most large tech companies to be evil and didn’t like the soul-crushing feeling of helping to build something I hated.\nStartups usually have fewer people available to be mentors, but more opportunity to take on disproportionate responsibility for your level, which can be an amazing learning experience in a different way. You also have a lot of room to screw up, but it’s more because your screw ups just blend in with the overall culture of moving fast and breaking things. I now believe that’s a ridiculous way to run a business, but when there’s widespread acceptance of breaking even important things, you have a lot freedom to experiment and learn by trial and error."
  },
  {
    "objectID": "blog/kirahowe/2021-01-19-becoming-a-software-developer.html#be-a-good-student",
    "href": "blog/kirahowe/2021-01-19-becoming-a-software-developer.html#be-a-good-student",
    "title": "Becoming A Software Developer",
    "section": "Be a good student",
    "text": "Be a good student\nLastly, once you finally land your first job, be a good student. Treat your first year or two on the job like paid education, not your chance to go in and show everyone how it’s done. You know way less than you think, and you have no idea what it takes to build functioning software systems, let alone to deploy or maintain them. Always be humble and eager to learn. Soak up every minute of attention you get from more experienced developers around you and learn from them. Not everything they say is wise or true, but pay attention and copy the things that work whilst ignoring the things that clearly don’t.\nLearn how to ask good questions. Don’t be afraid to ask for help, but before you do, at least try to figure out the problem yourself. Write down what you tried, and explain why you’re surprised your attempt didn’t work.\nThere are certain things you can only really learn from experience on a real world project, so see what opportunities there are to learn those things, for example:\n\nsecuring and backing up actual important customer data\ndeploying a huge app with no downtime\nrefactoring large, messy, legacy codebases\nadding new features to large, messy, legacy codebases\nfixing obscure bugs with no instructions to reproduce them\n\nThese are just a few examples of things you won’t run into on your little demo projects. Pay attention to the problems you’re dealing with at work that you don’t run into on side projects and learn how to fix those. That’s your pathway to levelling up. Most importantly, never stop learning."
  },
  {
    "objectID": "blog/kirahowe/2021-01-19-becoming-a-software-developer.html#thats-all",
    "href": "blog/kirahowe/2021-01-19-becoming-a-software-developer.html#thats-all",
    "title": "Becoming A Software Developer",
    "section": "That’s all",
    "text": "That’s all\nSoftware development is a great career. It’s allowed me to be financially independent and stable, travel the world, meet cool people, and lots more. My path won’t work for everyone. There are as many different ways to become a software developer as there are people, but I’ve seen countless aspiring software engineers go through their own journeys and many of them touch on these points, so see how they fit in to your own path. And let me know how it goes 🙂"
  },
  {
    "objectID": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html",
    "href": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html",
    "title": "How To Set Up Your Own Nextcloud Server",
    "section": "",
    "text": "One of my goals for 2020 was to stop using Google’s products. There are a lot of reasons why, but that’s not the point of this post. I found out about Nextcloud last month and it turns out it’s a great replacement for a lot of Google. I don’t actually use all of its features, but I’ve migrated my calendar, reminders, contacts, bookmarks, video calls, photos, and news feeds and I’m really happy with it so far.\nThere are a lot of companies that will host Nextcloud for you where you just sign up for an account like anything else, but in case you’re interested in hosting Nextcloud for yourself this post is basically a brain dump of how I did that. It took me a while to cobble together all the pieces I needed to get everything working from end to end, so I’m hoping this might save someone else from having to do the same. If you know your way around servers and Nextcloud already you can just skim the headings like a checklist to make sure you don’t forget an important step. But if you want a succinct overview of the actual steps I did and commands I ran, each section contains those details. By the end you’ll see how I installed Nextcloud on my own server, secured it, set up backups, and set up external storage for my photos.\nSome parts are pieced together from other partial guides or longer blog posts, so where relevant the references lead to those sources. This post is more of a quick start with just the essential steps. Anything in &lt;pointy-brackets&gt; is meant to be replaced. So the actual command I ran was e.g. adduser kira, not adduser &lt;name&gt;."
  },
  {
    "objectID": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#what-this-list-assumes-you-already-have",
    "href": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#what-this-list-assumes-you-already-have",
    "title": "How To Set Up Your Own Nextcloud Server",
    "section": "What this list assumes you already have",
    "text": "What this list assumes you already have\n\nA domain name. I got mine from Namecheap.\nAn account with a cloud server provider. I use Linode.\nAn account with Backblaze\nAn account with Healthchecks.io\nYour ssh key\n$99/year. I pay $5/month for the server I use, $2/month for back ups, $5/year for the domain name ($5.16 actually), and CAD$10/year for carbon offsets."
  },
  {
    "objectID": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#set-up-a-server-running-ubuntu-and-set-up-ssh-access-for-yourself",
    "href": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#set-up-a-server-running-ubuntu-and-set-up-ssh-access-for-yourself",
    "title": "How To Set Up Your Own Nextcloud Server",
    "section": "1. Set up a server running Ubuntu and set up ssh access for yourself",
    "text": "1. Set up a server running Ubuntu and set up ssh access for yourself\n\nSpin up a new server with your cloud provider. I use a “nanode”, the smallest server available from Linode, with 1GB of RAM and 25GB of storage, which is plenty more than Nextcloud’s minimum specs.\nSelect an operating system that can install snap packages. I’m using Ubuntu 20.04 (LTS). Nextcloud recommends at least either Ubuntu 18.04 LTS or Red Hat Enterprise Linux 7.\nAdd your ssh key to the server. There should be a way to do this through the UI where you manage your new server.\nCopy the IP address of your new server\n\n\n1.1. ssh into your server as the root user and make yourself a new sudo user that can also ssh into the machine 1\n\nssh root@&lt;server-ip-address&gt;\nadduser &lt;name&gt;\nusermod -aG sudo &lt;name&gt;\nrsync --archive --chown=&lt;name&gt;:&lt;name&gt; ~/.ssh /home/&lt;name&gt;\n\nClose this ssh session and log in as your new user to make sure it works:\n\nlogout\nssh &lt;name&gt;@&lt;server-ip-address&gt;\n\nLeave this ssh session open. The rest of the commands below are meant to be run on your server, unless otherwise stated."
  },
  {
    "objectID": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#point-your-new-server-to-your-custom-domain",
    "href": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#point-your-new-server-to-your-custom-domain",
    "title": "How To Set Up Your Own Nextcloud Server",
    "section": "2. Point your new server to your custom domain",
    "text": "2. Point your new server to your custom domain\nThere should be a way to do this in the admin section for your server. On Linode’s there’s a “Domains” section in the left admin menu. From there I clicked “Add a Domain” in the top right, then filled in the domain name, my email address, and selected “Insert default records from one of my Linodes” from the “Insert Defaults Records” dropdown, then I selected my new Nextcloud server from the list of Linodes. The steps might be slightly different depending what cloud server provider you’re using. By the end you need DNS records pointing your domain name to your Nextcloud server. If you did this through Linode (or whatever you’re using), you’ll also need to update the nameservers with your domain registar."
  },
  {
    "objectID": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#set-up-a-basic-firewall",
    "href": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#set-up-a-basic-firewall",
    "title": "How To Set Up Your Own Nextcloud Server",
    "section": "3. Set up a basic firewall",
    "text": "3. Set up a basic firewall\n\nsudo ufw allow OpenSSH\nsudo ufw allow https\nsudo ufw allow http\nsudo ufw enable"
  },
  {
    "objectID": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#install-nextcloud",
    "href": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#install-nextcloud",
    "title": "How To Set Up Your Own Nextcloud Server",
    "section": "4. Install Nextcloud",
    "text": "4. Install Nextcloud\n\nsudo snap install nextcloud\nsudo nextcloud.manual-install &lt;username&gt; &lt;password&gt;"
  },
  {
    "objectID": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#set-up-your-domain-enable-https-and-install-an-auto-updating-certificate-from-lets-encrypt",
    "href": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#set-up-your-domain-enable-https-and-install-an-auto-updating-certificate-from-lets-encrypt",
    "title": "How To Set Up Your Own Nextcloud Server",
    "section": "5. Set up your domain, enable https, and install an auto-updating certificate from Let’s Encrypt",
    "text": "5. Set up your domain, enable https, and install an auto-updating certificate from Let’s Encrypt\n\nsudo nextcloud.occ config:system:set trusted_domains 1 --value=&lt;your-domain.name&gt;\nsudo nextcloud.enable-https lets-encrypt"
  },
  {
    "objectID": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#enable-2fa-on-your-nextcloud-account",
    "href": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#enable-2fa-on-your-nextcloud-account",
    "title": "How To Set Up Your Own Nextcloud Server",
    "section": "6. Enable 2FA on your Nextcloud account *",
    "text": "6. Enable 2FA on your Nextcloud account *\n\nLog in to your new personal cloud at the domain you configured using the username and password you chose above and install the 2FA app\n\nClick on your initial in the top right corner of the Nextcloud dashboard and select “Apps”\nIn the left side bar click on “Security”, then search for the “Two-Factor TOTP Provider” app\nClick “Download and enable”\n\nSet up 2FA with this newly installed app\n\nClick on your initial in the top right corner and select “Settings”\nIn the left sidebar, click on “Security” (in the “Personal” section) then check the “Enable TOTP” box and follow the instructions to set up 2FA\n\n\nI managed to forget my password in the time between installing Nextcloud and trying to log in for the first time. If that happens to you, you can reset it by running sudo nextcloud.occ user:resetpassword &lt;username&gt;.\n\n* Doing this means you will be required to generate “app passwords” in order to log in to your Nextcloud account in third party apps or other devices (to use Nextcloud to sync your calendar or reminders to your phone, for example.) There’s a tiny box with a button that says “Create new app password” at the bottom of the “Security” admin section (under “Personal”, not “Administration”) where you can do that."
  },
  {
    "objectID": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#set-up-backups",
    "href": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#set-up-backups",
    "title": "How To Set Up Your Own Nextcloud Server",
    "section": "7. Set up backups",
    "text": "7. Set up backups\n\n7.1. Turn on “local” backups\n\nEnable backups for your whole server for a first layer of backups. I did this when I was setting up my Linode (there was a checkbox in the “Optional Add-ons” section for it). Otherwise there’s a “Backups” tab in the admin section where you can turn them on. Linode charges $2/month for this.\n\n\n\n7.2. Set up “offsite” backups\n\nInstall and set up Backblaze\n\nMake a bucket in Backblaze for your backups\nMake an app key with access to your backup bucket\nGet the Backblaze cli and configure it\n\nsudo apt install python3-pip\nsudo pip3 install b2\nsudo b2 authorize_account &lt;keyID&gt;\nCopy the key secret from the app key you just made to authorize the Backblaze cli\n\n\nCreate a new user to run the backups and disable password access for it, for security 2\n\nsudo adduser ncbackup\nsudo usermod -s /sbin/nologin ncbackup *\n\nCreate directories for the backups and logs\n\nsudo mkdir -p /home/ncbackup/backups/logs\n\nCreate the backup script and make it runnable **\n\nsudo touch /usr/sbin/ncbackup.sh\nsudo chmod +x /usr/sbin/ncbackup.sh\nsudo vim /usr/sbin/ncbackup.sh and copy the contents of the backup script below into your new file, or write your own that accomplishes the same things: ***\n\n\n#!/bin/bash\nset -e\n\nDATE=$(date '+%Y-%m-%d')\n\n# Output to a logfile\nexec &&gt; /home/ncbackup/backups/logs/${DATE}.txt\n\n# Export all your config and data from Nextcloud\necho \"Starting Nextcloud export...\"\nnextcloud.export\necho \"Export complete\"\n\n# Compress backed up folder\necho \"Compressing backup...\"\ntar -zcf /home/ncbackup/backups/${DATE}.tar.gz -C /var/snap/nextcloud/common/backups/ .\necho \"Nextcloud backup successfully compressed to /home/ncbackup/backups\"\n\n# Remove uncompressed backup data\nrm -rf /var/snap/nextcloud/common/backups/*\n\n# Remove backups and logs older than 5 days\necho \"Removing backups older than 5 days...\"\nfind /home/ncbackup/backups -type f -mtime +5 -delete\nfind /home/ncbackup/backups/logs -type f -mtime +5 -delete\n\n# Keep 14 days of backups in Backblaze\necho \"Uploading to Backblaze...\"\nb2 sync --keepDays 14 --replaceNewer /home/ncbackup/backups b2://&lt;your-bucket-name&gt;\necho \"Nextcloud backup completed successfully\"\n\nLet the ncbackup user run the backup script as the root user\n\nsudo visudo\nCopy this to the end of the file that opens:\n\n\n# Allow ncbackup to run script as sudo\nncbackup ALL=(ALL) NOPASSWD: /usr/sbin/ncbackup.sh\n\n\n * If you want to undo this for some reason you can run sudo usermod -s /bin/bash ncbackup \n\n\n ** Note this means you will have 6 copies of all your data on your server all the time – 5 backups and the live versions. The backups are compressed, but it can still add up to a lot of space. Keep an eye on how much storage your server is using. Running it out of space will probably be one of the first issues you run into. I explain how to get notified when that’s close to happening at the end. \n\n\n *** You don’t have to use vim here. Your server probably has nano installed or you can install the editor of your choice. To change the default editor on your server, run sudo update-alternatives –config editor, and choose the one you want."
  },
  {
    "objectID": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#schedule-and-monitor-your-backups",
    "href": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#schedule-and-monitor-your-backups",
    "title": "How To Set Up Your Own Nextcloud Server",
    "section": "8. Schedule and monitor your backups",
    "text": "8. Schedule and monitor your backups\n\nMake yourself a healthcheck at healthchecks.io and copy the ping url\nsudo crontab -u ncbackup -e\nCopy this to the bottom of the file: 0 2 * * * sudo /usr/sbin/ncbackup.sh && curl -fsS -m 10 --retry 5 -o /dev/null &lt;your-ping-url&gt;\n\nThis will run your backups once per day at 2am (in your server’s timezone, probably UTC), but you can set whatever time and frequency you want, just remember to update your healthcheck to match."
  },
  {
    "objectID": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#test-your-backups",
    "href": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#test-your-backups",
    "title": "How To Set Up Your Own Nextcloud Server",
    "section": "9. Test your backups",
    "text": "9. Test your backups\nBackups are only useful if you can use them to restore your data. Make sure yours work before you need them.\nTo test your entire server backups you can just try restoring the whole server using Linode’s (or whoever’s) UI. Testing the archived backups we uploaded to Backblaze is a little more involved but you’ll be glad you know how to do it when you need it.\n\nRepeat steps 1-5, except you can just update the records for your domain that’s already set up to point to your new server’s IP address(es).\nDownload one of your backups\nCopy the backup onto your new server. Run this in a terminal on your machine (not in an ssh session with a remote server):\n\nscp /local/path/to/your/backup/ &lt;user&gt;@&lt;new-server-ip-address&gt;:~\n\n\nssh into your new server for the rest of these commands - Unzip, rename, and move the backup to a place where the Nextcloud snap installation will be able to access it, then make the root user the owner - tar -xvzf &lt;backup-name&gt;.tar.gz - sudo mv &lt;backup-data-dir&gt;/ /var/snap/nextcloud/current/ - sudo chown -R root:root /var/snap/nextcloud/current/&lt;backup-data-dir&gt;/ - Import your data - sudo nextcloud.import /var/snap/nextcloud/current/&lt;backup-data-dir&gt;/ - Once it’s done, clean up the backup archive - rm &lt;backup-name&gt;.tar.gz\nThis should be all you need to restore your Nextcloud installation. It might take a while for the DNS records to propagate, so if you want to test that your restored cloud is working in the meantime you can check it directly at its IP address if you add that to the list of trusted domains: - sudo nextcloud.occ config:system:set trusted_domains 2 --value=&lt;new-server-ip-address&gt;\nNote this will only be available over http, so you might get a dramatic warning about security when you visit the ip address directly. To remove the ip address from the list of trusted domains once you’re satisfied, run: - sudo nextcloud.occ config:system:delete trusted_domains 2"
  },
  {
    "objectID": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#offset-your-co2",
    "href": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#offset-your-co2",
    "title": "How To Set Up Your Own Nextcloud Server",
    "section": "10. Offset your CO2",
    "text": "10. Offset your CO2\nIt’s not going to be clear exactly what the environmental impact of your server is, but it won’t be nothing. You can get a rough idea how much CO2 your server emits with tools like this one. Then you can buy carbon offsets from a reputable carbon offset vendor, like Less. I spent $10/year to offset half a tonne of CO2.\nI know carbon offsetting is a long and complicated topic, and the environmental impact of computing infrastructure goes way beyond CO2 emissions, but the point is just to be aware that doing all this stuff on your computer has potentially negative consequences in the real world and to at least try to minimize them where you can and mitigate them where you can’t."
  },
  {
    "objectID": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#bonus",
    "href": "blog/kirahowe/2020-12-11-how-to-set-up-your-own-nextcloud-instance.html#bonus",
    "title": "How To Set Up Your Own Nextcloud Server",
    "section": "Bonus",
    "text": "Bonus\n\nSet up a Backblaze bucket as external storage, e.g. for photos\n\nInstall and enable the “External storage support” app for your Nextcloud instance\nGo to “Settings” then, under “Administration” in the left side bar (not under “Personal”), click “External storages”\nEnter a name for your new folder* and select “Amazon S3” from the “Add storage” dropdown, then fill in the details for your Backblaze bucket and account\n\n\n * Make sure the name you give the external storage folder isn’t already taken. I called mine “Photos”, which already existed in my Nextcloud files, and it conflicted in strange and surprising ways. If you want to call your external storage folder “Photos” make sure to go delete the “Photos” folder that’s already there first. \n\n\n\nGet notified when you’re approaching your storage limit\nIf you choose the cheapest Linode server like I did it doesn’t come with much storage, and depending on how much data you have and how many backups you’re leaving on the server you might run it out of storage pretty quickly. There’s an app called “Quota warning” in the monitoring category you can install to get notified if you’re approaching your server’s storage limits. You can configure when and how it notifies you in “Additional settings” after it’s installed.\n\nThat’s it! I hope this helps someone avoid hours of searching through documentation, blog posts, and outdated forums. Good luck!\nDiscuss this post on Hacker News, Dev.to or Reddit"
  },
  {
    "objectID": "blog/kirahowe/2019-12-10-searching-for-sunday.html",
    "href": "blog/kirahowe/2019-12-10-searching-for-sunday.html",
    "title": "Searching for Sunday",
    "section": "",
    "text": "What is the point of going to church? I ask myself this question weekly. I didn’t grow up going to any sort of regular religious services, but I’m becoming increasingly religious as an adult. I’m inclined to think that church should be a part of my faith journey, but mostly because going to church is just what religious people do. I’ve never understood the point, and have experienced quite a mixed bag of emotions venturing in and out of a handful of different faith communities over the past couple of years.\nThis is the subject of Rachel Held Evans’ book “Searching for Sunday”. It’s a story of her own faith journey and a call to the rest of us on a similar path to keep searching. I struggle to find the motivation to continue exploring religion and spending time on faith-related ventures. In a season where I’m wondering whether religion has any purpose at all, I found this book inspiring."
  },
  {
    "objectID": "blog/kirahowe/2019-12-10-searching-for-sunday.html#diversity-in-the-church",
    "href": "blog/kirahowe/2019-12-10-searching-for-sunday.html#diversity-in-the-church",
    "title": "Searching for Sunday",
    "section": "Diversity in the church",
    "text": "Diversity in the church\nOne of the most refreshing things about this book was her sincere exploration of the diversity of faith traditions. This resonated with me. I’ve spent the most time with a Reform Jewish community, but have also been involved to varying degrees with Baptist, Presbyterian, United, Anglican, generic non-denominational evangelical, Unitarian, Jesuit, Roman Catholic, and Quaker communities over the past couple of years, and I’m deeply confused about how we got here.\nWhen I read about the life of Jesus and what he taught, I hear a call to unity. And it’s not just an empty plea. He teaches us how to get there; we’re called to love the outcast and welcome the stranger. I don’t understand how we ever got to a place where churches have literal rules about who’s allowed in and who’s not. It seems to me that there’s no bigger obstacle to achieving Jesus’ vision for humanity than the Church itself. He came to condemn legalistic Jews, but instead of taking that message to heart and focusing on the substance of his teachings, his followers have just replaced one set of rules for another.\nRachel observes this phenomenon, too, and calls us to understand what grace really is.\n\nPerhaps we’re afraid that if we move, God might use people and methods we don’t approve of, that rules will be broken and theologies questioned. Perhaps we’re afraid that if we get out of the way, this grace thing might get out of hand. Well, guess what? It already has.\n\nIt’s inevitable that we will have differences. But in a community that claims to revere a man who came here to love and befriend those who were excluded for their differences, homogeneity should be a warning sign that we’re doing it wrong. I don’t just mean ethnic homogeneity, although there’s no doubt you’ll have a hard time finding a church with members from more than a couple of different ethnic backgrounds. I mean that we should find was to embrace diversity of opinion. Isolating ourselves into sheltered communities divided along doctrinal lines cannot be the point of spirituality."
  },
  {
    "objectID": "blog/kirahowe/2019-12-10-searching-for-sunday.html#what-is-spirit-like",
    "href": "blog/kirahowe/2019-12-10-searching-for-sunday.html#what-is-spirit-like",
    "title": "Searching for Sunday",
    "section": "What is spirit like?",
    "text": "What is spirit like?\nThis is another question that fuels my faith journey. I believe there are things we can experience that aren’t attributable to our normal sensory inputs. I call these spiritual or mystical experiences. Other people use more religious language, but however you to describe it, spirituality appears to be a persistent and ubiquitous part of the human experience.\nI experience it as a sense of relentless forward progress, a source of strength in my darkest moments, a seemingly source-less inspiration to be more generous and loving, and an outlet for my gratitude when I’m amazed at how beautiful life can be. Some people call this force/source/motivator God, but there are literally thousands of traditions and cultures from every corner of the earth that have similar and genuine descriptions of experiencing something bigger than themselves. I call it spirit. I find the idea that this phenomenon can be boiled down to a list of faith statements and church doctrines repulsive. Seeking is worthwhile. Encoding the results of any one community’s search in law is exactly what Jesus insisted we stop doing.\nMany religions have claimed a monopoly on this phenomenon of spirituality. Some Christian denominations today insist they know what spirit is like and that it really matters that everyone else agrees with them. They are so keen on this that they have been willing to trample the core values of the gospel in order to spread their ideas about what God is like. From Rachel:\n\nIt seems those most likely to miss God’s work in the world are those most convinced they know exactly what to look for, the ones who expect God to play by the rules.\n\nIn the meantime, spirit is at work in the world every day, but we cling to the past like our lives depend on it for the sake of preserving an approach to spirituality that Jesus told us is all wrong. In their desperate attempts to hang on to rules and social constructs that are fundamentally incompatible with our ever evolving reality, religious communities forsake the very God of love and mercy who they claim to worship."
  },
  {
    "objectID": "blog/kirahowe/2019-12-10-searching-for-sunday.html#overcoming-cynicism",
    "href": "blog/kirahowe/2019-12-10-searching-for-sunday.html#overcoming-cynicism",
    "title": "Searching for Sunday",
    "section": "Overcoming cynicism",
    "text": "Overcoming cynicism\nIt’s probably already transparent, but I’m extremely cynical about religion. Part of the reason is because I know its truth claims are bullshit and its smug moral superiority is a sham. Yet something keeps me seeking. For all the failings of its followers, I think the Jesus movement has a lot to teach us about things that our world desperately needs to know. Things like love and reconciliation, acceptance and friendship, grief and pain.\nRachel talks about what keeps her seeking, and I found this insight inspiring:\n\nCynicism is a powerful anesthetic we use to numb ourselves to pain, but which also, by its nature, numbs us to truth and joy. Grief is healthy. Even anger can be healthy. But numbing ourselves with cynicism in an effort to avoid feeling those things is not.\n\nFor most of my life this was my approach to religion – complete rejection as a result of pure cynicism. It allowed me to get over the anger and frustration I felt toward religious communities, but it also prevented me from seeing anything positive at all in them. Letting down that guard has been very hard, and it still doesn’t take much to send me spiralling back to my former indifferent and contemptuous approach to the whole thing.\nOn most days even approaching these topics with an open mind requires me to tap into my deepest reserves of empathy and mercy. Getting over the cynicism is hard, but I believe it’s the first step toward spiritual growth."
  },
  {
    "objectID": "blog/kirahowe/2019-12-10-searching-for-sunday.html#continuing-the-journey",
    "href": "blog/kirahowe/2019-12-10-searching-for-sunday.html#continuing-the-journey",
    "title": "Searching for Sunday",
    "section": "Continuing the journey",
    "text": "Continuing the journey\nI grew up as an outsider to faith and religious communities. Most of the people I know are atheists, but they are more Christ-like than any Christian I’ve met so far. Their love is sincere and unprejudiced. Strangers and outcasts are always welcome at their tables. From my perspective, religion has nothing to offer them, but could definitely learn a bit about love from them.\nI wonder sometimes if this just points to a triumph of those progressive values Jesus espoused. Maybe our culture has been so steeped in Christian tradition for so long that some of it has finally started to sink in. Not that we don’t have a long way to go, but I see examples daily of strangers being welcomed with open arms and communities coming together to lift up the least among them. Isn’t that kind of the whole point?\nIt’s hard for a newcomer to understand what the point of church is. All of the ceremony and expense of running a church just seems obscene most of the time, not to mention hypocritical. As an outsider, it appears to be nothing more than a relic of a bygone era – the last bastion of misogyny and homophobia in a society that is finally growing out of those harmful attitudes, a stronghold for regressive politics, a cash cow for manipulative and greedy men to line their own pockets.\nThen I realize that these issues have always plagued human institutions. I wonder how many people before us have had the same struggles with organized religion but, like me, were incapable of shaking the feeling that there’s something worth paying attention to there.\nThe church as we know it is dying, and I can’t help but have any feeling about it other than “good riddance”. But I don’t think our desire for connection with something beyond ourselves is going anywhere. When I’m honest with myself, I have to admit that I’m pretty excited to see what emerges from these ruins."
  },
  {
    "objectID": "blog/kirahowe/2021-04-24-my-dream-static-website-generator.html",
    "href": "blog/kirahowe/2021-04-24-my-dream-static-website-generator.html",
    "title": "My Dream Static Website Generator",
    "section": "",
    "text": "I’m on the hunt for a simple tool to build simple websites. In my last post I explained a bit about what I mean by that and why I find the existing options unsatisfactory. It got me thinking about what my requirements are. I think it’s good in general to think up front about how software should work. It helps me quickly pass on existing solutions before wasting tons of time learning a new thing only to discover it can’t do what I need (because I didn’t know what I needed until it was too late). It also helps me make better software.\nI’ve made several different static site generators with different approaches and every time the reason I stop using them is because there’s some feature I want that would be very complicated to add because it’s at odds with some fundamental way the original system was designed. After a few iterations I feel like I finally have a pretty good grasp on my requirements, which is at least a start. The rest of this post explains what they are."
  },
  {
    "objectID": "blog/kirahowe/2021-04-24-my-dream-static-website-generator.html#advanced-markdown-processing",
    "href": "blog/kirahowe/2021-04-24-my-dream-static-website-generator.html#advanced-markdown-processing",
    "title": "My Dream Static Website Generator",
    "section": "Advanced markdown processing",
    "text": "Advanced markdown processing\nMost static site generators render markdown to HTML, but most don’t handle any extensions to basic markdown very well. I have some special things I need my static site generator to handle, including: - Typography. I write in a plain text editor, so I need my site generator to properly process e.g. en dashes (–), em dashes (—), apostrophes (’), quote marks (“”), and other special characters and not just use the plain text versions that are the defaults in my editor. - Footnotes. I don’t often use footnotes, but when I do I do not want to faff with supertext links and manual anchor fragments. - Syntax highlighting. Similarly, I don’t often include code snippets in my posts, but I do occasionally and I find highlighted code much easier to read, so I’d like my blog to include syntax highlighted code snippets. I’m also weirdly obsessed with things working without JavaScript, so I need a tool that can process my posts to include the relevant markup and css at build time in order to have the smallest possible pages that also work without JS."
  },
  {
    "objectID": "blog/kirahowe/2021-04-24-my-dream-static-website-generator.html#use-open-standards-and-best-practices",
    "href": "blog/kirahowe/2021-04-24-my-dream-static-website-generator.html#use-open-standards-and-best-practices",
    "title": "My Dream Static Website Generator",
    "section": "Use open standards and best practices",
    "text": "Use open standards and best practices\nBy this I mean the final website should have no accessibility issues, no performance issues, and nothing extra being downloaded that is not necessary to load the text on the page. It should also use semantic HTML with all the right head tags to render properly in search results and social media. It should be styled with modern and minimal CSS, and, of course, have no JS for static content. Ideally all of these things would be checked on build so that an inaccessible, slow, bloated website simply cannot be made with this tool."
  },
  {
    "objectID": "blog/kirahowe/2021-04-24-my-dream-static-website-generator.html#arbitrary-data-access",
    "href": "blog/kirahowe/2021-04-24-my-dream-static-website-generator.html#arbitrary-data-access",
    "title": "My Dream Static Website Generator",
    "section": "Arbitrary data access",
    "text": "Arbitrary data access\nMy main complaint with basically all of the current options for generating static websites is that the content and templates are all intermingled — severely complected, as a Clojurian would say. There are also major usability issues as a user trying to add new content to a website. Content and website structure should be fundamentally decoupled. That means:\n\nI shouldn’t have to open my entire project including templates and config files to write a new blog post\nNot all the websites I make are blogs, so the tool should not dictate a particular website structure\nI shouldn’t have to commit up front to a particular way of organizing the content of my website. Permalinks should be permanent and therefore fundamentally separate from page metadata like title, date, etc., as well as file metadata like parent directory.\n\n\nBlogging features\nThese should ideally fall out of the flexible requirements for accessing data I just described (for free), but there are a few specific blogging features I always need, so they get a special mention here: - Tagging posts and index pages (including RSS feeds) for all posts with a given tag - Grouping posts into arbitrary categories or series’ - Easy links to next, previous, or related posts. This is really a special case of grouping, but called out separately for emphasis. - Pagination for series or tags that accumulate a lot of posts"
  },
  {
    "objectID": "blog/kirahowe/2021-04-24-my-dream-static-website-generator.html#flexible-templating-and-markup-languages",
    "href": "blog/kirahowe/2021-04-24-my-dream-static-website-generator.html#flexible-templating-and-markup-languages",
    "title": "My Dream Static Website Generator",
    "section": "Flexible templating and markup languages",
    "text": "Flexible templating and markup languages\nI write mostly in either Org mode or Markdown, occasionally also Asciidoc. And sometimes I make a page that’s so unique and incompatible with my existing layout I write it directly in HTML. My static site generator should be agnostic about markup language and support all of these seamlessly.\nFor designing the layout of the website it should use a well known but simple templating language. Something like Mustache, Liquid, or Nunchucks would be good, or considering my affinity for Clojure maybe Selmer or even Hiccup, though that might be prohibitively weird. The main point is that it should be simple to use and narrowly focused on templating. Concerns about munging data and post-processing content should be entirely separate from developing the layout of the website.\nThe layouts should also be sufficiently flexible to allow granular customization down to the page. There are many special cases where I want to include one extra tag in the head for example, or something special in the footer. The layout should support these kinds of customizations without requireing janky hacks that break the semantic grouping in the HTML."
  },
  {
    "objectID": "blog/kirahowe/2021-04-24-my-dream-static-website-generator.html#smooth-development-experience",
    "href": "blog/kirahowe/2021-04-24-my-dream-static-website-generator.html#smooth-development-experience",
    "title": "My Dream Static Website Generator",
    "section": "Smooth development experience",
    "text": "Smooth development experience\nSpeaking of developing the layout, I’m a spoiled millenial web developer and want a smooth developer experience. No janky scripts or custom build chains. I want a single command out of the box that I can run to get a development server that will watch my files and auto-reload the browser when they change. I’m not entirely sold on CSS and JS variants that require pre- or post-processing, but I think they’re useful and ubiquitous enough the tool should probably support these as well.\nThings like Less and Tailwind will probably fall out of fashion soon enough, but auto-prefixing and dead rule pruning are probably here to stay and should be included out of the box. Similarly I suspect the compile-to-JS language du jour will continue to change every year or two, but minifying and fingerprinting scripts are kind of minimum best practice now and should happen automatically. Same for image optimization to be honest, but now I’m really dreaming."
  },
  {
    "objectID": "blog/kirahowe/2021-04-24-my-dream-static-website-generator.html#conclusion",
    "href": "blog/kirahowe/2021-04-24-my-dream-static-website-generator.html#conclusion",
    "title": "My Dream Static Website Generator",
    "section": "Conclusion",
    "text": "Conclusion\nThis is my wishlist for my static website building experience. It follows a broad general pattern of being very flexible with data and the underlying model(s) the site uses, whilst being very rigid and prescriptive about standards for minimal markup. This fits my overall philosophy of programming. I basically think develoeprs should lean heavily on existing standards and best practices where they exist, so that the majority of development effort can be spent on the (ideally small) part of the project that truly is unique. One of my biggest complaints about the tech industry generally is how much time we waste reinventing wheels.\nThinking through how everything should work in advance like this is really helpful for me. The more software I write the more convinced I become that we should be spending vastly more time thinking about and designing software than we do. I get that there’s a trade off between doing things well and getting things done, but there is also a difference between perfectionism and valuing quality.\nSo, hopefully someone will find this blog post and build my dream static website generator. Failing that, I will probably start working on yet another attempt of my own as my next side project."
  },
  {
    "objectID": "blog/kirahowe/2020-12-31-2020-year-in-review.html",
    "href": "blog/kirahowe/2020-12-31-2020-year-in-review.html",
    "title": "2020 Year In Review",
    "section": "",
    "text": "I’m really excited that 2020 is over! This was the hardest year of my life so far. It was also the first one that was worse and not better than all the previous ones, which I’m really hoping is not a new trend. When I thought about it a bit I realized I still did a lot of cool things and learned a lot this year though.\nThey’re arranged roughly in order of least to most personal, so if you finish one section and thought “wow, that was a bit of an overshare, Kira”, then – fair warning – you might not want to continue."
  },
  {
    "objectID": "blog/kirahowe/2020-12-31-2020-year-in-review.html#desk",
    "href": "blog/kirahowe/2020-12-31-2020-year-in-review.html#desk",
    "title": "2020 Year In Review",
    "section": "Desk",
    "text": "Desk\nOne thing I’m really proud of that I did this year is finally get the cable situation behind my desk under control. I’ll take whatever wins I can get right now, so I’m counting this as a big one. Here’s what it looks like before and after:\n\n\n\n\nMy desk before figuring out a cable management solution. 😫\n\n\n\n\n\nMy desk after organizing everything underneath. So much nicer ☺️\n\n\n\nI moved this year, which gave my the perfect opportunity because I had to take everything off my desk anyway. I knew I had to do it then or else wait until the next time everything was off my desk for some reason. I just used some duct tape, large binder clips with washers so the screws would hold, and these aluminium hooks I found at the dollar store. I made a harness for my power strip out of the duct tape and screwed it and the other things into the bottom of the desk. I borrowed a drill from my landlord and already had the tape, so it all cost me about $10. This is what it looks like underneath:\n\n\n\nUnderneath my desk\n\n\nIn this new apartment I had space for my bookshelf next to my desk, so that box on the bottom shelf in the “after” picture has my router and modem in it. It’s so much better to not be kicking cables all the time."
  },
  {
    "objectID": "blog/kirahowe/2020-12-31-2020-year-in-review.html#puzzle",
    "href": "blog/kirahowe/2020-12-31-2020-year-in-review.html#puzzle",
    "title": "2020 Year In Review",
    "section": "Puzzle",
    "text": "Puzzle\nIn the spirit of celebrating wins, no matter how small, I’m counting this as one, too: I finished a big puzzle! I needed to find a lot of new hobbies that don’t involve screens this year, so I bought a puzzle. It turns out it was pretty hard on my neck looking down for long periods, so I’m not sure if I’ll do any more, but I really liked having something to keep my hands busy while I thought about other stuff or talked on the phone.\n\n\n\nMy completed puzzle in 2020"
  },
  {
    "objectID": "blog/kirahowe/2020-12-31-2020-year-in-review.html#remote-community",
    "href": "blog/kirahowe/2020-12-31-2020-year-in-review.html#remote-community",
    "title": "2020 Year In Review",
    "section": "Remote Community",
    "text": "Remote Community\nOne silver lining of the pandemic is that it has made it really easy to connect with new people I never would have met before. The communities I participate in only on my computer have become a really important part of my life. A couple are religious (or ex-religious) communities that I found through my spiritual pursuits. I’ve been able to find and connect with people with really interesting and eye-opening perspectives that I don’t think I would have ever met in real life.\nI also signed up for a “virtual” co-working community a couple of months ago and it’s been a really great way to add some structure to my days, which otherwise all feel like a giant blur. It’s mostly a bunch of other self-employed people who already had this great community before the pandemic and moved it online once it became obvious there’s no end in sight. I’m looking forward to finding creative ways to keep in touch with all the cool new people I’ve met on the internet this year. It seems like it should be really compatible with my non-pandemic-time semi-nomadic lifestyle, so that’s exciting."
  },
  {
    "objectID": "blog/kirahowe/2020-12-31-2020-year-in-review.html#work",
    "href": "blog/kirahowe/2020-12-31-2020-year-in-review.html#work",
    "title": "2020 Year In Review",
    "section": "Work",
    "text": "Work\nWork is still going well for me. I’ve been very lucky to be able to continue working throughout the pandemic and I still love the team I work with. We have some of the usual issues software teams do, but overall the people I work with are genuinely kind and talented, which it seems is a lot to ask in the tech industry these days. They’re easy to get along with and approach work and life the same way I do – not too seriously and with priorities straight. There were a few days I was just too sad and broken to work and everyone was very supportive, understanding, and helpful. All employers say they care about their staff, but this is the first place I’ve worked where I think that’s actually true. I plan on continuing with this team for now, at least through next year.\nI’ve been spending Friday afternoons mentoring at a local web development bootcamp, Lighthouse Labs, for a few years now, but this year I decided to stop. Because of the pandemic everything moved online, which partly contributed to my decision. They did a really good job building tools to facilitate virtual learning and mentoring, but in the end I found the online format really challenging and draining, so I decided I had to step away. I’d like to replace this work with something else over the course of next year. I’m not sure what yet, but I know I enjoy teaching new developers and have learned a lot about how to do that over the years."
  },
  {
    "objectID": "blog/kirahowe/2020-12-31-2020-year-in-review.html#travel",
    "href": "blog/kirahowe/2020-12-31-2020-year-in-review.html#travel",
    "title": "2020 Year In Review",
    "section": "Travel",
    "text": "Travel\nI spent February and part of March in the French Antilles, which was a great choice. I rented a big house with a few friends; there were three of us for the whole month and a couple others who joined for less time. We had 6 people there at its busiest! I really love doing trips like this and can’t wait to do more once it’s safe to travel again.\nThe highlight for me was hiking to the top of Mount Pelée. It was really steep and way above my skill level, but I survived and it was a cool view from the top.\n\n\n\nView from the crater of a volcano, Mount Pelée, Martinique. The little hut is the second refuge on the Aileron trail.\n\n\nThere were a lot of other highlights, mostly involving beaches. Overall the trip was amazing, except for one week when I got brutally sick with some sort of mystery disease. I took a covid antibody test in the summer which said it was “unlikely” I ever had it, so it was probably something else. A local nurse reckoned maybe just a nasty flu. I’ll never know for sure now, but anyway, I also survived that and the rest of the trip was perfect. Lounging around turquoise Caribbean beaches, noshing on French pastries all day, and hanging out with my friends makes for a pretty prefect winter getaway for me.\nObviously the rest of my plans for the year were dashed, and now I’m just waiting out the pandemic like everyone else. I’m planning on doing some more local trips next year, assuming the pandemic abates enough to allow it."
  },
  {
    "objectID": "blog/kirahowe/2020-12-31-2020-year-in-review.html#moving",
    "href": "blog/kirahowe/2020-12-31-2020-year-in-review.html#moving",
    "title": "2020 Year In Review",
    "section": "Moving",
    "text": "Moving\nI moved again this summer. I move a lot. It was a bit stressful moving during the pandemic, but in the end I got all my stuff here and I really love my new apartment. I gave up my old lease in January before everything got crazy, and honestly I don’t know if I would have chosen to move if I knew what was coming, but I’m really happy I did.\nI also got rid of my car this year so now I walk everywhere or sometimes use Communauto, the car-sharing service here. One of the best things about my new apartment is the location. Everything I need is only a couple minutes walk away. I really love city living. I daydream all the time about moving back to the East Coast, where I’m from. It’s so idyllic and peaceful there, but I really don’t like needing to drive literally everywhere. But we’ll see. Probably someday. Right now I’m pretty excited to be in Montreal for the post-pandemic years. It was already a really fun city with so many cool things to do before the pandemic, and after this whole mess settles I think it’ll only be better. There are millions of cool people with two years or more of pent up creativity and missed celebrations to work through. I’m kind of excited to stick around for it."
  },
  {
    "objectID": "blog/kirahowe/2020-12-31-2020-year-in-review.html#goals",
    "href": "blog/kirahowe/2020-12-31-2020-year-in-review.html#goals",
    "title": "2020 Year In Review",
    "section": "Goals",
    "text": "Goals\nAt the beginning of the year I made a few goals for myself. It’s the first time I did that but it worked out well, so I think I’ll do it again. These were my goals for 2020:\n\nStop using Google: I did this. I’ll probably write a separate post about the tools I’m using now, but in the end it really wasn’t as big of a deal as I thought it would be. There are a lot of great services out there that are pretty much a drop in replacement.\nStart blogging: I did this, too! I’m not really sure yet what the point is, but I’ve always enjoyed writing and sharing my thoughts, so I decided to just start blogging instead of continuing to ruminate over what to even blog about because I realized I probably would never answer that question. I thought I would write mostly about technical stuff, but it turns out most of the topics that are interesting to me aren’t really technical ones. My most popular post was a technical guide, though, so maybe that’s a hint I should continue down that road.\nLearn about effective altruism: I heard about this charity entrepreneurship program late last year and very nearly applied to do it for the summer of 2020. Turns out it would have been postponed anyway, but I’ve rushed into enough stuff that hasn’t worked out in the past that I stopped myself and decided to look into it a bit and decide if I might want to apply for 2021 after learning some more. I also feel like I’m past the age where I can just throw away everything I know and keep starting over. The urge is still strong, but this current iteration of my life is going pretty well so far, and uprooting it all would be a bigger deal than it was when I was 20.\n\nAnyway, I did Peter Singer’s effective altruism course online as well as a course about evaluating social programs from edX. I learned a lot of really interesting things, but in the end I decided leaving my career in software to pursue charity entrepreneurship isn’t the right move for me in 2021. I am thinking about different entrepreneurial projects that would increase my impact that I could merge with my existing career, though. I also did become convinced that I should be donating way more of my big tech paycheques than I was previously. I gave away $8,150 this year and my lifestyle didn’t suffer at all. I know this has been a really hard year for a lot of people and I’m not trying to be flippant about that amount of money, but I also know a lot of people who make a lot of money and think they’re still not rich enough to be philanthropic, which isn’t true. If I can convince some of those people to be more charitable I can have a bigger impact than I can just giving away my own money, so that’s why I talk about it."
  },
  {
    "objectID": "blog/kirahowe/2020-12-31-2020-year-in-review.html#spirituality",
    "href": "blog/kirahowe/2020-12-31-2020-year-in-review.html#spirituality",
    "title": "2020 Year In Review",
    "section": "Spirituality",
    "text": "Spirituality\nI got a spiritual director last year, but this year I started doing the Ignatian spiritual exercises with her. I really like having some structure to guide my spiritual journey. Without a schedule to stick to it’s really easy for me to go days or longer without really checking in with myself or the divine. I like having a regular meditation/reflection/prayer time as a part of my routine. I’m increasingly finding it helps keep me focused and motivated, which was a literal lifeline this year.\nThis has become the biggest part of my spiritual life now, but I have still been in touch with several religious communities through the pandemic. I’ve met a lot of really amazing people with a kind of faith that I find very reasonable, but I still find myself less and less keen to participate in religious organizations the more I experiment with them. I know any organization led by people will have problems, but man the problems in the church are really in a class of their own. I feel like I can’t officially join the Christian tribe in good conscience until there’s a general movement toward repentance and reconciliation, and I’m not really interested in getting involved as a reformer, which I feel pretty strongly is the only role I could have in a church and not feel like I was betraying my ethics.\nAnyway, I’m continuing with the spiritual exercises in my pursuit of transcendence, and I’m keeping an open mind about the possibility of religious community thanks to some very loving and open minded believers I’ve met online this year."
  },
  {
    "objectID": "blog/kirahowe/2020-12-31-2020-year-in-review.html#relationships",
    "href": "blog/kirahowe/2020-12-31-2020-year-in-review.html#relationships",
    "title": "2020 Year In Review",
    "section": "Relationships",
    "text": "Relationships\nIn September I got out of a longish, long distance relationship I was trying to make work, and now I’m single for the first time since I was 15. So, basically the first time in my life. This was a really shitty year to have to learn how to be single, but I’m happy with my progress so far. I’m discovering all kinds of things about myself that were either really easy to ignore or just covered up by the fact that I’ve always shared my life with someone else. I’m really grateful for the relationships I’ve had, but being alone is a useful experience, too."
  },
  {
    "objectID": "blog/kirahowe/2020-12-31-2020-year-in-review.html#overview",
    "href": "blog/kirahowe/2020-12-31-2020-year-in-review.html#overview",
    "title": "2020 Year In Review",
    "section": "Overview",
    "text": "Overview\nOverall this year was very hard and dark for me, but I made it! And there were still lots of things that went well.\n\nI’m grateful for my health and that I and everyone I know made it through the year, though I wasn’t always sure that would be the case\nI’m lucky to have a great job that I love most of the time and lucky to have great coworkers\nI achieved my goals and feel motivated to pick one or two things to slowly chip away at over next year\nI’ve found a lot of value in seeking the transcendent, but religion is still very hard for me. The ultimate catch 22. It’s simultaneously the richest source of transcendental wisdom and the most unappealing format imaginable to present it in.\n\nI’m hoping next year is better than this one. Stay safe and Happy New Year everyone."
  },
  {
    "objectID": "clojure/print_object/remove_extraneous.html",
    "href": "clojure/print_object/remove_extraneous.html",
    "title": "Clean object printing by removing extraneous",
    "section": "",
    "text": "The Clojure default for printing objects is noisy. Clojure’s print-method for Object delegates to clojure.core/print-object\n\n(defmethod print-method Object [x ^java.io.Writer w]\n  (#'clojure.core/print-object x w))\n\n\n#object [MultiFn]\n\n\n(Object.)\n\n\n#object [Object]\n\nThe syntax is #object[CLASS-NAME HASH toString())] and as you can see, the toString of an Object is CLASS-NAME@HASH. For most objects this becomes quite a long string.\n\n(async/chan)\n\n\n#object [ManyToManyChannel]\n\n\n\n\nObjection!\n\n\nFunctions are printed as objects\n\n(fn [x] x)\n\n\n#fn [fn]\n\nIt’s quite easy to miss the fact that it is a function as we are looking for a tiny little fn in a sea of text. If, like me, you are fond of the odd lambda calculus excursion, things get even more hectic.\n\n((fn [x] (fn [v] ((x x) v))) (fn [y] y))\n\n\n#fn [fn$fn]\n\nYikes! what an eyesore. This is not an academic issue specific to lambda calculus. Any function created from inside a function is helpfully identifiable through the fn$fn nesting. We create these quite regularly, and they are often printed in stack traces. I’m sure you have seen them when you map an inline function across a seq, and there is a bug in the anonymous function.\n\n(defn caesar-cipher [s]\n  (mapv (fn add2 [x] (+ 2 x)) s))\n\n\n(try (caesar-cipher \"hello world\")\n     (catch Exception ex\n       (vec (take 4 (.getStackTrace ex)))))\n\n\n[[clojure.lang.Numbers add \"Numbers.java\" 155]\n [clojure.lang.Numbers add \"Numbers.java\" 3747]\n [clojure.print_object.remove_extraneous$caesar_cipher$add2__76516 invoke \"NO_SOURCE_FILE\" 50]\n [clojure.core$mapv$fn__8569 invoke \"core.clj\" 7059]]\n\nSee that part caesar_cipher$add2? That is very useful information. It tells us that the exception was inside add2, which is inside caesar-cipher. The stack trace doesn’t print functions as objects, but it illustrates that the thing that we care about is that they are a function, what their name is, and whether they were created from inside another function.\nLet’s return to printing a function as an object. An easy improvement is to demunge from Java names to Clojure names. Demunging converts _ to - and $ to /, and munged characters like + which is PLUS in Java.\n\n(defn class-name\n  [x]\n  (-&gt; x class .getName Compiler/demunge))\n\n\n(class-name ((fn [] (fn [y] y))))\n\n\n\"clojure.print-object.remove-extraneous/eval76522/fn--76523/fn--76524\"\n\nNext, we don’t need the eval identities.\n\n(defn remove-extraneous\n  \"Clojure compiles with unique names that include things like `/eval32352/` and `--4321`.\n  These are rarely useful when printing a function.\n  They can still be accessed via (class x) or similar.\"\n  [s]\n  (-&gt; s\n      (str/replace #\"/eval\\d+/\" \"/\")\n      (str/replace #\"--\\d+(/|$)\" \"$1\")))\n\n\n(remove-extraneous (class-name ((fn [] (fn [y] y)))))\n\n\n\"clojure.print-object.remove-extraneous/fn/fn\"\n\nMuch nicer. I can actually read that! I’m not particularly fond of the long namespace shown as the name is either defined in this namespace, referred, or part of clojure.core. The multiple slashes form invalid symbols which annoy me; I prefer using / only for namespace/name separation and $ as the name level delimiter: my.namespace/my$nested$name.\n\n(defn format-class-name ^String [s]\n  (let [[ns-str & names] (-&gt; (remove-extraneous s)\n                             (str/split #\"/\"))]\n    (if (and ns-str names)\n      (str (str/join \"$\" names))\n      (-&gt; s (str/split #\"\\.\") (last)))))\n\n\n(format-class-name (remove-extraneous (class-name ((fn [] (fn [y] y))))))\n\n\n\"fn$fn\"\n\nSo short, so sweet. If it’s a function, why call it an object?\n\n(defn object-str ^String [x]\n  (str (if (fn? x) \"#fn\" \"#object\")\n       \" [\" (format-class-name (class-name x)) \"]\"))\n\n\n(object-str ((fn [] (fn [y] y))))\n\n\n\"#fn [fn$fn]\"\n\n\n(object-str (async/chan))\n\n\n\"#object [ManyToManyChannel]\"\n\nThis is really all I care to know about when printing objects and functions, and it matters inside notebooks, where we want to print things, eval things that return objects and functions, and datafy complex objects that contain other objects. To print things without knowing if they are objects, functions, or data, we can extend Clojure’s print-method.\n\n(defmethod print-method Object [x ^Writer w]\n  (.write w (object-str x)))\n\n\n#object [MultiFn]\n\n\n((fn [] (fn [y] y)))\n\n\n#fn [fn$fn]\n\n\n(async/chan)\n\n\n#object [ManyToManyChannel]\n\nYou can require this namespace from other notebooks to turn on this nice, concise mode of object printing.\nHappy notebooking!\n\nsource: src/clojure/print_object/remove_extraneous.clj"
  },
  {
    "objectID": "clojure/tree_seq/depth_first_search.html",
    "href": "clojure/tree_seq/depth_first_search.html",
    "title": "Depth-first search in Clojure (tree-seq)",
    "section": "",
    "text": "eight queens on a chessboard\n\n\nA classic puzzle involves placing eight queens on a chessboard so that no two are attacking each other.\nToday, we search out such arrangements, in Clojure.\n\nSince no solution has two queens on the same rank, a nice way to represent the board with data is as a vector of numbers, each element of the vector a column index for the queen on that rank.\nFor example, the vector [0 2] would be a board with two queens, one in the corner and another a knight’s move away.\n\n(def board [0 2])\n\nWe can visualize boards by converting these vectors into so-called FEN strings, which can be converted into images by a web service provided by the caring strangers at chessboardimage.com.\nFirst, we obtain the elements of the FEN string as a sequence.\n\n(for [i board] (str i \"q\" (- 7 i)))\n\n\n(\"0q7\" \"2q5\")\n\nFEN strings do not allow zeros (I do not make the rules).\n\n(for [i board] (.replace (str i \"q\" (- 7 i)) \"0\" \"\"))\n\n\n(\"q7\" \"2q5\")\n\nEach rank is delimited with a slash.\n\n(-&gt;&gt; (for [i board] (.replace (str i \"q\" (- 7 i)) \"0\" \"\"))\n     (clojure.string/join \"/\"))\n\n\n\"q7/2q5\"\n\nThat goes straight into the chessboardimage.com URL\n\n(-&gt;&gt; (for [i board] (.replace (str i \"q\" (- 7 i)) \"0\" \"\"))\n     (clojure.string/join \"/\")\n     (format \"https://chessboardimage.com/%s.png\"))\n\n\n\"https://chessboardimage.com/q7/2q5.png\"\n\n\n\n\ntwo queens on a chessboard\n\n\nThat is the body of a function that converts a board into an image\n\n(defn board-&gt;image\n  [board]\n  (-&gt;&gt; (for [i board] (.replace (str i \"q\" (- 7 i)) \"0\" \"\"))\n       (clojure.string/join \"/\")\n       (format \"https://chessboardimage.com/%s.png\")))\n\n\nTo solve the puzzle, we build a tree of candidate solution boards, the children of each node being boards with a new queen added on the next rank to each square not under attack.\nTo find the squares under attack, we begin by computing the board’s ranks.\n\n(map-indexed vector board)\n\n\n([0 0] [1 2])\n\nEach queen attacks up to three squares on the next rank, so for each slope m in -1, 0, 1 and each queen’s rank and index, we produce three indexes under attack (y=mx+b).\n\n(for [m [-1 0 1]\n      [rank i] (map-indexed vector board)]\n  (+ i (* m (- (count board) rank))))\n\n\n(-2 1 0 2 2 3)\n\nTo compute the candidate squares, we take the set of valid indexes and remove those under attack.\n\n(-&gt;&gt; (for [m [-1 0 1]\n           [rank i] (map-indexed vector board)]\n       (+ i (* m (- (count board) rank))))\n     (apply disj (set (range 8))))\n\n\n#{7 4 6 5}\n\nFrom those we produce a sequence of child boards.\n\n(-&gt;&gt; (for [m [-1 0 1]\n           [rank i] (map-indexed vector board)]\n       (+ i (* m (- (count board) rank))))\n     (apply disj (set (range 8)))\n     (map #(conj board %)))\n\n\n([0 2 7] [0 2 4] [0 2 6] [0 2 5])\n\nThat is the body of a function that takes a board, and produces child boards in the tree of candidate solutions.\n\n(defn board-&gt;children\n  [board]\n  (-&gt;&gt; (for [m [-1 0 1]\n             [rank i] (map-indexed vector board)]\n         (+ i (* m (- (count board) rank))))\n       (apply disj (set (range 8)))\n       (map #(conj board %))))\n\n\nWe can enumerate all candidate boards with Clojure’s tree-seq; a function of three arguments, the first is a predicate that is true for nodes with children.\nIn our case, we keep adding queens as long as a board has fewer than eight queens.\n\n(def boards (tree-seq #(&lt; (count %) 8) ... ...))\n\nThe second argument to tree-seq is a function that given a node, produces a sequence of children.\nWe just wrote that function (board-&gt;children).\n\n(def boards (tree-seq #(&lt; (count %) 8) board-&gt;children ...))\n\nThe third argument to tree-seq is the root of the tree, an empty board [] will do.\n\n(def boards (tree-seq #(&lt; (count %) 8) board-&gt;children []))\n\nThe solutions to the puzzle are those boards with 8 queens on them.\n\n(def solutions (filter #(= (count %) 8) boards))\n\nOf which, there are this many…\n\n(count solutions)\n\n\n92\n\nThe forty-second such solution\n\n(nth solutions 42)\n\n\n[3 0 4 7 1 6 2 5]\n\nAs an image\n\n(board-&gt;image (nth solutions 42))\n\n\n\"https://chessboardimage.com/3q4/q7/4q3/7q/1q6/6q1/2q5/5q2.png\"\n\n\n\n\neight queens on a chessboard\n\n\n🙇\n\nsource: src/clojure/tree_seq/depth_first_search.clj"
  },
  {
    "objectID": "games/macros_matter.html",
    "href": "games/macros_matter.html",
    "title": "Macros, Matter, & Malleability",
    "section": "",
    "text": "What if we embedded live UI and JavaScript logic directly into a Clojure namespace? Sounds wild? Let’s see how.\nClay renders Hiccup views, Scittle executes ClojureScript in the browser, and Reagent enables components as functions. kind/hiccup is how we annotate forms to be rendered as HTML via Clay.\nCheck out this mini-app for manipulating the Civitas logo.\n\n(kind/hiccup\n  [:div\n   '(defonce state (atom {}))\n   '(declare reset explode)\n   [:div#app {:style {:width \"100%\"}}]\n   ['(fn []\n       [:div\n        [:em \"Click and drag the hexagons\"]\n        [:div\n         [:button {:on-click #'reset} \"reset\"]\n         [:button {:style {:color \"red\"} :on-click #'explode} \"explode\"]]])]])\n\n\nFun right?\nNotice that Clay accepts normal hiccup, but further treats forms as code, and function forms as components. We’ll get to the implementations of reset, explode, and the view setup later. But first I want to introduce you to the killer feature for this kind of code; Macros! Not just any macro, but the ultimate macro, sneeze.\n\n(defmacro sneeze\n  \"Generates Hiccup with a quasiquote-like templating syntax,\n  enabling content insertion using unquote (~) and unquote-splicing (~@).\"\n  [& forms]\n  `(kind/hiccup ~(backtick/quote-fn identity forms)))\n\nThis macro sneeze behaves just like quote but respects unquote and unquote-splicing. It also suggests that Clay treat the result as Hiccup, which further means that forms will be treated as Scittle. So it’s a convenient way to write hiccup that contains code, without quoting, and being able to mix in Clojure values with ~ and ~@.\n\n(sneeze\n  (defn my-component []\n    [:strong ~(str \"Wow, so random \" (rand))])\n  [:div [#'my-component]])\n\n\nThis is weird right, why do we need ~? Well, when we define my-component we are writing symbolic code. This is going to be interpreted in the browser, not in Clojure. We can conveniently insert calculations made in Clojure into our UI code. It’s like Scittle just inherited macros! That’s exciting… in a way JavaScript has inherited macros.\nSpeaking of JavaScript, we need to bring in the MatterJS. MatterJS handles the physics simulation and rendering for our mini-app.\n\n(kind/hiccup\n  [:script {:src \"https://cdnjs.cloudflare.com/ajax/libs/matter-js/0.20.0/matter.min.js\"}])\n\n\nO.K. so here’s the code for the hexagons, notice toward the end the use of ~ to reuse Clojure code inside our Scittle code.\n\n(sneeze\n  ;; Set up a MatterJS simulation to render to the `app` div.\n  (def app (js/document.getElementById \"app\"))\n  (def client-width (.-clientWidth app))\n  (def engine (js/Matter.Engine.create (clj-&gt;js {:gravity {:y 0}})))\n  (def world-width 600)\n  (def w2 (/ world-width 2.0))\n  (def render (js/Matter.Render.create (clj-&gt;js {:element app\n                                                 :engine  engine\n                                                 :options {:wireframes false\n                                                           :background \"rgba(0,0,128,0.05)\"\n                                                           :hasBounds  true\n                                                           :width      client-width\n                                                           :height     client-width}})))\n\n  ;; Bounds create a fixed coordinate system, similar to a view-box in SVG.\n  (set! (.. render -bounds -min -x) 0)\n  (set! (.. render -bounds -min -y) 0)\n  (set! (.. render -bounds -max -x) world-width)\n  (set! (.. render -bounds -max -y) world-width)\n  (def mouse (js/Matter.Mouse.create (.-canvas render)))\n  (let [scale (/ world-width client-width)]\n    (js/Matter.Mouse.setScale mouse (clj-&gt;js {:x scale\n                                              :y scale})))\n  (def mouse-constraint (js/Matter.MouseConstraint.create engine (clj-&gt;js {:mouse mouse})))\n  (js/Matter.World.add (.-world engine) mouse-constraint)\n  (js/Matter.Render.run render)\n  (def runner (js/Matter.Runner.create))\n  (js/Matter.Runner.run runner engine)\n\n  ;; Handle when the browser window dimensions change\n  (js/window.addEventListener\n    \"resize\"\n    (fn []\n      (let [w (.-clientWidth app)]\n        (-&gt; render .-options .-width (set! w))\n        (-&gt; render .-options .-height (set! w))\n        (-&gt; render .-canvas .-width (set! w))\n        (-&gt; render .-canvas .-height (set! w))\n        (let [scale (/ world-width w)]\n          (js/Matter.Mouse.setScale mouse (clj-&gt;js {:x scale\n                                                    :y scale})))\n        (js/Matter.Render.setPixelRatio render js/window.devicePixelRatio))))\n\n  ;; Add some walls to keep everything inside the view\n  (defn create-boundaries [width height thickness]\n    (let [options (clj-&gt;js {:isStatic    true\n                            :restitution 0.9\n                            :friction    0.1})\n          x-mid (/ width 2.0)\n          y-mid (/ height 2.0)\n          t2 (/ thickness 2.0)]\n      (for [[x y rw rh] [[(- 0 t2) y-mid thickness height]\n                         [(+ width t2) y-mid thickness height]\n                         [x-mid (- 0 t2) width thickness]\n                         [x-mid (+ height t2) width thickness]]]\n        (js/Matter.Bodies.rectangle x y rw rh options))))\n  (js/Matter.World.add (.-world engine)\n                       (clj-&gt;js (create-boundaries world-width world-width 500)))\n\n  ;; The Civitas logo consists of hexagons\n  (defn make-hexagon [x y radius color]\n    (js/Matter.Bodies.polygon x y 6 radius\n                              (clj-&gt;js {:restitution 0.9\n                                        :friction    0.1\n                                        :render      {:fillStyle color}})))\n  ;; Notice that we can make use of the colors from a different, Clojure namespace\n  (let [hexagons (for [[x y c] ~(mapv conj (geometry/hex 100) db/get-colors)]\n                   (make-hexagon (+ w2 x) (+ w2 y) 50 c))]\n    (js/Matter.World.add (.-world engine) (clj-&gt;js hexagons))\n    (swap! state assoc :hexagons hexagons))\n\n  ;; These functions are attached to the on-click of the buttons\n  (defn reset []\n    (doseq [[hex [x y]] (map vector (:hexagons @state) ~(vec (geometry/hex 100)))]\n      (js/Matter.Body.setAngle hex 0)\n      (js/Matter.Body.setPosition hex (clj-&gt;js {:x (+ w2 x), :y (+ w2 y)}))))\n  (defn explode []\n    (doseq [hex (:hexagons @state)]\n      (js/Matter.Body.setVelocity hex (clj-&gt;js {:x (- (rand 50) 25),\n                                                :y (- (rand 50) 25)})))))\n\n\nI’ll be the first to admit that this is a zany way to write code. But it’s a lot of fun, powerful, concise, and best of all is there is no setup. Everything is here in this one Clojure namespace. No build steps. I send my namespace to Clay and get a HTML page with Scittle baked in. It blends macros, UI, and JavaScript into a single file. For learning, tinkering, and demos, it’s a joy.\n\n\n\nHexagons escaping\n\n\n\nsource: src/games/macros_matter.clj"
  },
  {
    "objectID": "math/stats/central_limit_theorem_convergence.html",
    "href": "math/stats/central_limit_theorem_convergence.html",
    "title": "Convergence of Random Events",
    "section": "",
    "text": "Life is full of random events.\nWe learn that multiple coin flips are “independent events” – no matter whether the past flip was heads or tails, the next flip is 50/50. (So why do they show the last few results at the routlette table? Hint: Don’t play routlette.) We learn that about half of babies are male and half female, so chances are 50/50 that your new little sibling will be a boy or a girl.\nI found the answer to “Of my 8 children, what are the chances that 4 are girls and 4 are boys?” counterintuitive. The central limit theorem is crucial to intuition around this question.\nWhen I initially encountered the Monte Hall problem, the correct answer wasn’t obvious or intuitive, but the mathemetical explanation is surprisingly understandable. We’ll try here to make the central limit theorem more understandable as well.\nStart with a single random event – value drawn from [0.0, 1.0)\n\n(rand)\n\n\n0.14714012133885368\n\nOne way to combine random events is to take the average:\n\n(defn avg [nums]\n  (/ (reduce + nums) (count nums)))\n\n\n(avg [0.0 1.0])\n\n\n0.5\n\nLet’s try taking the average of several events together:\n\n(avg [(rand) (rand)])\n\n\n0.049103826940243234\n\n\n(avg [(rand) (rand) (rand)])\n\n\n0.6454052417531707\n\nThis is getting repetitive. We can make the computer repeat for us:\n\n(avg (repeatedly 3 rand))\n\n\n0.3892095127497079\n\nThe more events that you average, the closer the result comes to 0.5:\n\n(avg (repeatedly 30 rand))\n\n\n0.4396393407766508\n\n\n(avg (repeatedly 300 rand))\n\n\n0.4983862310682874\n\nLet’s try taking several events together:\n\n(defn event []\n  (rand))\n\n\n(event)\n\n\n0.055383178655307064\n\n\n(defn combined-event [number-of-events]\n  (avg (repeatedly number-of-events event)))\n\n\n(combined-event 1)\n\n\n0.6321607502963356\n\n\n(combined-event 2)\n\n\n0.39438933421619443\n\n\n(combined-event 5)\n\n\n0.7329159199113382\n\nLet’s look at a series of multiple of these combined event\n\n(repeatedly 5 #(combined-event 2))\n\n\n(0.6281660597171602\n 0.08763265079324511\n 0.5581406159359021\n 0.5760742318310117\n 0.4897381387514771)\n\n\n(repeatedly 5 #(combined-event 5))\n\n\n(0.4906326647425699\n 0.40173611159359285\n 0.6967996663469802\n 0.48492573702747954\n 0.3339162878912393)\n\n\n(repeatedly 5 #(combined-event 10))\n\n\n(0.5812111455940323\n 0.5307895209918554\n 0.5040732484482829\n 0.4602317029713345\n 0.3921309450439193)\n\nAs we combine a larger number of events, the values cluster more closely to the middle of the original distribution.\nAnd regardless of the shape of the original event distribution, the result of combining more and more events will approach the normal distribution – it’s a unique function toward which these combinations always converge.\nThis is true for both continuous variables (like (rand)) or discrete variables (like dice (rand-nth [1 2 3 4 5 6])), and it’s true even for oddly shaped distributions. When you combine enough of them, they take on the character of the bell-shaped curve.\nLearn More at 3Blue1Brown - But what is the Central Limit Theorem?\n\nsource: src/math/stats/central_limit_theorem_convergence.clj"
  },
  {
    "objectID": "math/stats/quantquestions/what_are_the_odds/the_hidden_geometry_of_dice.html",
    "href": "math/stats/quantquestions/what_are_the_odds/the_hidden_geometry_of_dice.html",
    "title": "The Hidden Geometry of Dice",
    "section": "",
    "text": "Welcome to What Are the Odds? The show where we answer life’s important questions, like can I outsmart a six-sided die? Today we’re starting small. Two rolls of the dice and one burning question. No magic formulas, just curiosity, some patient counting, and a faint hope that math is on our side. Let’s roll.\n\nPop quiz: You roll a fair 6-sided die twice. Calculate the probability that the value of the first roll is strictly less than the value of the second roll.\n\nAs I always like to say to my niece, “the secret to answering any probability question is to enumerate the outcomes and count the ones we care about.”\n\\(P(Interesting) = InterestingOutcomes / TotalOutcomes\\)\nRolling 1 die once has 6 outcomes: 1 2 3 4 5 6.\nRolling 1 die twice gives us a combination of outcomes, let’s write out a few.\n[1 1] [1 2] '... [1 6]\n[2 1] [2 2] '...\nFollowing this pattern would produce 6 rows of 6 columns, so there must be 36 outcomes. We write down just enough of the pattern to figure out the best way to count it. Now we count how many of those meet the criteria.\n[1 1 :no] [1 2 :yes] '...\n[2 1 :no] [2 2 :no] [2 3 :yes] '...\nLogically we should see 5 yeses on the first row, then 4, 3, 2, 1, and 0, which we can ignore. Add them all up and we get 15.\nSo the answer to the question is 15/36 which reduces to 5/12, dividing top and bottom by the greatest common divisor 3.\nYou might be thinking that it’s not practical to enumerate everything all the time, I should use the formulas of probability. That’s true, those are marvelous. However, in my experience it is also easy to go wrong reasoning from formulas. It’s harder to go wrong starting with a counting problem, then improving your method of counting. You end up in the same place, but more confident in the answer.\nThe full enumeration of our simple 2 roll question as a counting problem is just big enough to be too tedious to use only counting.\n\n(let [roll [1 2 3 4 5 6]]\n  (for [i roll]\n    (for [j roll]\n      [i j])))\n\n\n(([1 1] [1 2] [1 3] [1 4] [1 5] [1 6])\n ([2 1] [2 2] [2 3] [2 4] [2 5] [2 6])\n ([3 1] [3 2] [3 3] [3 4] [3 5] [3 6])\n ([4 1] [4 2] [4 3] [4 4] [4 5] [4 6])\n ([5 1] [5 2] [5 3] [5 4] [5 5] [5 6])\n ([6 1] [6 2] [6 3] [6 4] [6 5] [6 6]))\n\nIdentifying the pattern is enough to realize the answer\n\n(+ 5 4 3 2 1)\n\n\n15\n\nWhat a marvelous pattern it is! Predictable, but not flat. Smooth, but not boring. Recursive, and not obvious.\n\n[1 3 6 10 15 21 28 36 45 55 66 78 91 105 120 136 153 171 190 210]\n\nThere’s something special about this sequence. Aren’t those numbers just… pleasing in some way?\nThis sequence is called the triangular numbers.\n            .\n           . .\n          . . .\n         . . . .\nYou can find the first 10 or so numbers in your head, and with some paper many more quite quickly.\n\n\n\nSo many dots\n\n\nThere is a formula for calculating the nth triangular number: \\(T_n = 1 + 2 + 3 + \\dots + n = \\frac{n(n + 1)}{2}\\)\nThe 20th triangular number is (20x21)/2 = (400+20)/2 = 210. Isn’t it wonderful how there’s so many different ways to find the same answer in math?\nThere is something curious about the formula; it divides by 2 but only produces integers. How can we be certain we will only ever get an integer? So mysterious. n(n+1) is always even! Let’s think about that a bit more, if n is odd, then n+1 is even. If n is even, then n+1 is odd. One of the multiples is always even, meaning that 2 is a factor, so the multiple must always have a factor 2, and be even.\nIt’s easy now to imagine if we had a 1000 sided dice what the answer would be. But be careful! For a 1000 side die, we want the 999nth triangular number: \\((999 \\times 1000)/2 = (1000000-1000)/2 = 500000-500 = 499500\\) and the total outcomes would be 1000x1000, so the answer would be 0.4995. It’s comforting to see that for a large range, we land closer to 50%.\nThe point is that once we know what we are counting, it feels more obvious that we used the right formula to count it.\nTriangular numbers show up in many situations, my favorite is that they can be used to lay out hexagons. The code that draws Clojure Civitas hexagons is based on the triangular number formula.\n\nTriangular numbers also show up in the number of pairs, handshakes, edges in a complete graph, diagonals sum to triangular numbers, square numbers as sums of consecutive odd numbers, differences of triangulars, acceleration frames, smooth transitions, spacing. Such a beautiful pattern that can be found in so many situations!\nUntil next time, may your dice be fair and your outcomes interesting.\n\nsource: src/math/stats/quantquestions/what_are_the_odds/the_hidden_geometry_of_dice.clj"
  },
  {
    "objectID": "civitas/authors.html",
    "href": "civitas/authors.html",
    "title": "Authors",
    "section": "",
    "text": "You belong here!\nThank you for sharing your ideas.\nAlex CoyleSciclojAlex MillerClojure.coreChris HouserDaniel SlutskySciclojElango CheranEmil BengtssonEthan MillerSciclojHaroldTechAscentKira HoweSciclojMatt KleinsmithClojure CampSam UmbachClojure CampSean CorfieldClojure CampSiyoung ByunSciclojTim SchaferClojure CampTimothy PratleyHummijoinrScicloj\n\nsource: src/civitas/authors.clj"
  },
  {
    "objectID": "civitas/explorer.html",
    "href": "civitas/explorer.html",
    "title": "Explorer",
    "section": "",
    "text": "We need a database of Clojure learning resources.\nOfficial Clojure DocumentationClojure for the Brave and TrueTransducers ExplainedClojureScript GuideReagent Documentationre-frame: A React FrameworkLuminus Web FrameworkTablecloth: Dataframe LibraryClay Documentationtech.ml Machine Learningdeps.edn ReferenceCIDER for Emacsshadow-cljs Build ToolKaocha Test RunnerSciCloj CommunityClojureCamp EventsClojureTV YouTubeClojurians SlackPracticalli TutorialsJVM Performance GuideComponent LibrarynREPL ProtocolDatomic DatabaseXTDB Documentation\n\n\nidtitleurlformattopicleveldepends-onclj-docsOfficial Clojure Documentationhttps://clojure.org/guides/getting_startedreference[:core]\n0brave-clojureClojure for the Brave and Truehttps://www.braveclojure.com/interactive-book[:core :core/fp]\n1transducersTransducers Explainedhttps://www.youtube.com/watch?v=6mTbuzafcIIvideo[:core :core/fp]\n2[\"clj-docs\"]\nreagent-docsReagent Documentationhttps://reagent-project.github.io/library-docs[:web :web/frontend]\n1re-framere-frame: A React Frameworkhttps://day8.github.io/re-frame/library-docs[:web :web/frontend]\n2[\"reagent-docs\"]\nluminusLuminus Web Frameworkhttps://luminusweb.com/framework[:web :web/backend]\n2tableclothTablecloth: Dataframe Libraryhttps://github.com/scicloj/tableclothlibrary-docs[:data :data/analysis]\n1clayClay Documentationhttps://scicloj.github.io/clay/publishing-tool[:data]\n2tech.mltech.ml Machine Learninghttps://github.com/techascent/tech.mllibrary-docs[:data :data/ml]\n3deps-edndeps.edn Referencehttps://clojure.org/reference/deps_and_clireference[:tooling]\n0ciderCIDER for Emacshttps://docs.cider.mx/tool-docs[:tooling :tooling/repl]\n1shadow-cljsshadow-cljs Build Toolhttps://shadow-cljs.github.io/docs/UsersGuide.htmltool-docs[:tooling :tooling/build]\n2sciclojSciCloj Communityhttps://scicloj.github.io/community[:community :community/orgs]\n0clojure-campClojureCamp Eventshttps://clojurecamp.berlin/community[:community :community/events]\n1clojure-tvClojureTV YouTubehttps://www.youtube.com/user/ClojureTVvideo-channel[:community :community/learning]\n0clojuriansClojurians Slackhttp://clojurians.net/community[:community :community/chat]\n0practicalliPracticalli Tutorialshttps://practical.li/tutorials[:community :community/learning]\n1jvm-tuningJVM Performance Guidehttps://clojure.org/reference/jvm_programmingguide[:systems :systems/production]\n3componentComponent Libraryhttps://github.com/stuartsierra/componentlibrary-docs[:systems :systems/design]\n2nreplnREPL Protocolhttps://nrepl.org/protocol[:systems :systems/tooling]\n2datomicDatomic Databasehttps://docs.datomic.com/cloud/database[:systems :systems/data :data/db]\n3clojurescriptClojureScript Guidehttps://clojurescript.org/reference[:core :web :tooling]\n1kaochaKaocha Test Runnerhttps://github.com/lambdaisland/kaochatool-docs[:tooling :tooling/testing]\n2xtdbXTDB Documentationhttps://xtdb.com/database[:systems :systems/data :data/db]\n3\n\n\n\nsource: src/civitas/explorer.clj"
  },
  {
    "objectID": "core/async/flow/example/before_his_wings_melted.html",
    "href": "core/async/flow/example/before_his_wings_melted.html",
    "title": "What He Saw Before His Wings Melted",
    "section": "",
    "text": "Long before he flew too high, before the wax gave way and the world remembered only his fall, Icarus flew low. They often leave out this part of his misadventures, when curiosity, not hubris, guided his wings. He flew not to ascend to Olympus, but rather to get a good view of the lesser known Asynctopolis.\nA city pulsing with signals, stitched together by invisible threads. From above, its patterns unfolded like a diagram. Flows of information, agents in silent collaboration, each unaware of the others, yet perfectly aligned.\nThis is what he saw."
  },
  {
    "objectID": "core/async/flow/example/before_his_wings_melted.html#asynctopolis-from-the-clouds",
    "href": "core/async/flow/example/before_his_wings_melted.html#asynctopolis-from-the-clouds",
    "title": "What He Saw Before His Wings Melted",
    "section": "Asynctopolis from the Clouds",
    "text": "Asynctopolis from the Clouds\n\n(def asynctopolis (flow/create-flow asynctopolis/config))\n\n\n(show/flow-svg asynctopolis nil {:show-chans   false\n                                 :with-content false})\n\nTallystrixChrononClaxxusRandomius\nHe circled the skyline. He watched the channels breathe. And slowly, he spiraled down, drawn not by ambition, but fascination— closer to each process, each transformation, each role in the great asynchronous allegiance.\nAs he flew lower he saw that processes are connected via channels.\n\n(show/flow-svg asynctopolis nil {:chans-as-ports true\n                                 :with-content   false})\n\nTallystrixstatpokealertChrononoutClaxxusinRandomiusout\nAre channels attached to a process, or are they part of it? You can choose to visualize them as distinct connectors, or as embedded roles within each process. Both perspectives reveal useful insights.\n\n(show/flow-svg asynctopolis nil {:chans-as-ports false\n                                 :with-content   false})\n\nTallystrixstatpokealertChrononoutClaxxusinRandomiusout\nWanting to see more, Icarus swooped even lower to survey the processes.\n\n(show/proc-table asynctopolis)\n\n\n\n\n\n\n\n\n\n\n\n\nprocess\nstart params\nin chans\nout chans\n\n\n\n\nTallystrix\n\n\n\nmin: 1\n\n\nMin value, alert if lower\n\n\n\n\nmax: 10\n\n\nMax value, alert if higher\n\n\n\n\n\nstat: Channel to receive stat values\n\n\npoke: Channel to poke when it is time to report a window of data to the log\n\n\n\n\nalert: Notify of value out of range {:val value, :error :high|:low\n\n\n\n\nChronon\n\n\n\nwait: 3000\n\n\nTime to wait between pokes\n\n\n\n\n\n\n\n\nout: Poke channel, will send true when the alarm goes off\n\n\n\n\nClaxxus\n\n\n\nprefix: Alert:\n\n\nLog message prefix\n\n\n\n\n\nin: Channel to receive messages\n\n\n\n\n\n\n\nRandomius\n\n\n\nmin: 0\n\n\nMin value to generate\n\n\n\n\nmax: 12\n\n\nMax value to generate\n\n\n\n\nwait: 500\n\n\nTime in ms to wait between generating\n\n\n\n\n\n\n\n\nout: Output channel for stats\n\n\n\n\n\n\n\nWith a clearer understanding of the processes, he pondered how these processes are connected.\n\n(show/conn-table asynctopolis)\n\n\n\n\n\n\nsource\ntarget\n\n\n\n\nRandomius_out\nTallystrix_stat\n\n\nChronon_out\nTallystrix_poke\n\n\nTallystrix_alert\nClaxxus_in\n\n\n\n\n\nIn doing so he realized there are also 2 global channels, report and error:\n\n(show/flow-svg asynctopolis nil {:chans-as-ports    false\n                                 :with-content      false\n                                 :show-global-chans true})\n\nTallystrixstatpokealertChrononoutClaxxusinRandomiusoutreporterror\nAny process can put messages on report and error."
  },
  {
    "objectID": "core/async/flow/example/before_his_wings_melted.html#street-level",
    "href": "core/async/flow/example/before_his_wings_melted.html#street-level",
    "title": "What He Saw Before His Wings Melted",
    "section": "Street Level",
    "text": "Street Level\nReaching street level, he called out start! The flow responded, handing him report and error channels in a map.\n\n(def chs (flow/start asynctopolis))\n\n\n\n\n\n\n\nOUT\n\n\n\nRandomius initialing\nTallystrix initializing\nChronon initializing\nClaxxus initializing\n\n\n\nBut still, nothing stirred. So he yelled resume!\n\n(flow/resume asynctopolis)\n\n\ntrue\n\n\n(def report-chan (:report-chan chs))\n\n\n(async/poll! report-chan)\n\n\n\n\n\n\n\nTHREAD OUT\n\n\n\nTallystrix transitioning :clojure.core.async.flow/resume\nRandomius transitioning :clojure.core.async.flow/resume\nTalon, set flight!\nSQUARK: 2\nRandomius transform 2 from :stat to :out\nChronon transitioning :clojure.core.async.flow/resume\nChronon running\nClaxxus transitioning :clojure.core.async.flow/resume\nTallystrix transforming :stat 2\n\n\n\n\nnil\n\n\n(flow/inject asynctopolis [:Tallystrix :poke] [true])\n\n\n\n\n\n\n\nTHREAD OUT\n\n\n\nChronon transforms :alarm true to :out\n\n\n\n\n#object [FutureTask]\n\n\n(flow/inject asynctopolis [:Tallystrix :stat] [\"abc1000\"])\n\n\n#object [FutureTask]\n\n\n(show/flow-svg asynctopolis chs {:chans-as-ports false\n                                 :with-content   false})\n\n\n\n\n\n\n\nTHREAD OUT\n\n\n\nTallystrix transforming :poke true\nTallystrix transforming :stat abc1000\nTallystrix transforming :poke true\n\n\n\nTallystrixstatpokealertChrononoutClaxxusinRandomiusout\nTallystrix takes only numbers, \"abc1000\" was not acceptable."
  },
  {
    "objectID": "core/async/flow/example/before_his_wings_melted.html#conclusion",
    "href": "core/async/flow/example/before_his_wings_melted.html#conclusion",
    "title": "What He Saw Before His Wings Melted",
    "section": "Conclusion",
    "text": "Conclusion\n\n(flow/stop asynctopolis)\n\n\n\n\n\n\n\nTHREAD OUT\n\n\n\nRandomius transitioning \n\n\n\ntrue\n\n\n(Thread/sleep 1)\n\n\n\n\n\n\n\nTHREAD OUT\n\n\n\n:clojure.core.async.flow/stop\nTalon, rest!\nChronon transitioning :clojure.core.async.flow/stop\nChronon rests.\nClaxxus transitioning :clojure.core.async.flow/stop\nTallystrix transitioning :clojure.core.async.flow/stop\n\n\n\n\nnil\n\nIcarus realized that Flow is a library for building concurrent, event-driven systems out of simple, communication-free functions. Processes connect through channels. You define the structure as a directed graph. Flow takes care of orchestration. Flows are data-driven, easy to inspect, reason about and visualize. Then he wondered just how high could he fly?\nHappy flowing, and keep your feathers waxed!\n\nsource: src/core/async/flow/example/before_his_wings_melted.clj"
  },
  {
    "objectID": "internationalization/transliteration2.html",
    "href": "internationalization/transliteration2.html",
    "title": "More on transliteration",
    "section": "",
    "text": "In the last post on transliteration, I introduced the idea of transliteration as implemented in programming, and pointed out that the process of transforming text is more general. In that regard, the implementation that works for one use case will work for another. Now, the question is what is the most efficient and appropriate implementation?\nI talked about a prefix tree as easy for storing the sub-/strings to match on. However, in my pure Clojure implementation of a prefix tree, which is implemented using nested maps, the performance is slow. Very slow! But that’s not a reflection of Clojure, which is a language that is very practical and optimizes what it can. And the ethos of Clojure programming follows the maxim in programming, stemming from early Unix, of “make it work, make it right, make it fast”. As such, we should think about how to make this fast.\nTim asked me why this text transformation couldn’t have been implemented in a regex, and doing so would certainly make it fast. For example, to transliterate Tamil language text in Latin script into the Tamil script, my existing implementation would look like:\n\n(def s \"vaNakkam. padippavarkaLukku n-anRi.\")\n\n\n(def expected \"வணக்கம். படிப்பவர்களுக்கு நன்றி.\")\n\n\n(cvt/romanized-&gt;தமிழ் s)\n\n\n\"வணக்கம். படிப்பவர்களுக்கு நன்றி.\"\n\n\n(assert (= expected (cvt/romanized-&gt;தமிழ் s)))\n\n\nnil\n\nThat transliteration is converting Latin script into Tamil script in a somewhat predictable and intuitive way, such that: a -&gt; அ, aa -&gt; ஆ, …, k -&gt; க், ng -&gt; ங், etc. Tim’s point is that you can detect the input substrings using the regex, and then feed the matching substring occurrences into a replacement map to get the translation. His previous pseudocode in JS looked like this:\nlet text = \"this is a test\";\nconst replacementMap = { 'th': 'X', 't': 'Y' };\n\nlet result = text.replace(/th|t/g, (match) =&gt; {\n                                               return replacementMap[match];\n                                               });\n\nconsole.log(result);\nHe is taking into account the caveat that some of the substrings will overlap or be a superstring of other substrings, and therefore, order matters so that the right “rule” (match + replace) is triggered.\nThis should work. Let’s try it. In the “romanized-&gt;தமிழ்” function, where the word “romanized” really should be “Latin” for the name of the script, the conversions are more or less defined here: Let’s just reuse it!\n\ncvt/romanized-தமிழ்-phoneme-map\n\n\n{\"d\" \"ட்\",\n \"n\" \"ன்\",\n \"ee\" \"ஏ\",\n \"z\" \"ழ்\",\n \"w\" \"ந்\",\n \"aa\" \"ஆ\",\n \"ii\" \"ஈ\",\n \"s\" \"ச்\",\n \"uu\" \"ஊ\",\n \"e\" \"எ\",\n \"zh\" \"ழ்\",\n \"ch\" \"ச்\",\n \"q\" \"ஃ\",\n \"L\" \"ள்\",\n \"p\" \"ப்\",\n \"oo\" \"ஓ\",\n \"nth\" \"ந்த்\",\n \"v\" \"வ்\",\n \"mb\" \"ம்ப்\",\n \"E\" \"ஏ\",\n \"R\" \"ற்\",\n \"a\" \"அ\",\n \"t\" \"ட்\",\n \"ai\" \"ஐ\",\n \"U\" \"ஊ\",\n \"ng\" \"ங்\",\n \"O\" \"ஓ\",\n \"i\" \"இ\",\n \"k\" \"க்\",\n \"b\" \"ப்\",\n \"r\" \"ர்\",\n \"y\" \"ய்\",\n \"g\" \"க்\",\n \"l\" \"ல்\",\n \"N\" \"ண்\",\n \"u\" \"உ\",\n \"A\" \"ஆ\",\n \"I\" \"ஈ\",\n \"m\" \"ம்\",\n \"th\" \"த்\",\n \"nj\" \"ஞ்\",\n \"o\" \"ஒ\",\n \"au\" \"ஔ\",\n \"nr\" \"ன்ற்\",\n \"nd\" \"ண்ட்\",\n \"n-\" \"ந்\"}\n\nNow to handle the caveat. As you can see, \"t\" is a substring of \"th\", and both are keys in the map. We effectively have to do a topological sort or some other graph traversal based on which keys are substrings of which other ones. In this particular case, a shortcut that is a huge hack (because it cannot possibly be generalizable) would be to sort the match strings in order of longest to shortest en route to constructing our regex string:\n\n(-&gt;&gt; (keys cvt/romanized-தமிழ்-phoneme-map)\n     (sort-by count)\n     reverse)\n\n\n(\"nth\"\n \"n-\"\n \"nd\"\n \"nr\"\n \"au\"\n \"nj\"\n \"th\"\n \"ng\"\n \"ai\"\n \"mb\"\n \"oo\"\n \"ch\"\n \"zh\"\n \"uu\"\n \"ii\"\n \"aa\"\n \"ee\"\n \"o\"\n \"m\"\n \"I\"\n \"A\"\n \"u\"\n \"N\"\n \"l\"\n \"g\"\n \"y\"\n \"r\"\n \"b\"\n \"k\"\n \"i\"\n \"O\"\n \"U\"\n \"t\"\n \"a\"\n \"R\"\n \"E\"\n \"v\"\n \"p\"\n \"L\"\n \"q\"\n \"e\"\n \"s\"\n \"w\"\n \"z\"\n \"n\"\n \"d\")\n\nOur regex string will end up looking like:\n\n(-&gt;&gt; (keys cvt/romanized-தமிழ்-phoneme-map)\n     (sort-by count)\n     reverse\n     (interpose \\|)\n     (apply str))\n\n\n\"nth|n-|nd|nr|au|nj|th|ng|ai|mb|oo|ch|zh|uu|ii|aa|ee|o|m|I|A|u|N|l|g|y|r|b|k|i|O|U|t|a|R|E|v|p|L|q|e|s|w|z|n|d\"\n\nOur regex would be formed by feeding it to re-pattern:\n\n(def regex (re-pattern (-&gt;&gt; (keys cvt/romanized-தமிழ்-phoneme-map)\n                            (sort-by count)\n                            reverse\n                            (interpose \\|)\n                            (apply str))))\n\nWe can do segmentation on the input string based on the transliteration/transformation substring match keys:\n\n(re-seq regex s)\n\n\n(\"v\"\n \"a\"\n \"N\"\n \"a\"\n \"k\"\n \"k\"\n \"a\"\n \"m\"\n \"p\"\n \"a\"\n \"d\"\n \"i\"\n \"p\"\n \"p\"\n \"a\"\n \"v\"\n \"a\"\n \"r\"\n \"k\"\n \"a\"\n \"L\"\n \"u\"\n \"k\"\n \"k\"\n \"u\"\n \"n-\"\n \"a\"\n \"n\"\n \"R\"\n \"i\")\n\nWe can’t naively just transform the strings that match, however. Ex: you would lose the whitespace and punctuation in this example.\n\n(-&gt;&gt; (re-seq regex s)\n     (map cvt/romanized-தமிழ்-phoneme-map)\n     fmt/phonemes-&gt;str)\n\n\n\"வணக்கம்படிப்பவர்களுக்குநன்றி\"\n\nSo we need to adjust our regex to be smart enough to have a “default branch” that matches the next character if nothing else matches. We do this by appending the match all shortcut . to the end of the giant pattern alternation:\n\n(def regex (re-pattern (str (-&gt;&gt; (keys cvt/romanized-தமிழ்-phoneme-map)\n                                 (sort-by count)\n                                 reverse\n                                 (interpose \\|)\n                                 (apply str))\n                            \"|.\")))\n\nNow, we get non-matching characters in the output\n\n(-&gt;&gt; (re-seq regex s)\n     (map #(or (cvt/romanized-தமிழ்-phoneme-map %) %))\n     fmt/phonemes-&gt;str)\n\n\n\"வணக்கம். படிப்பவர்களுக்கு நன்றி.\"\n\nAnd for that matter, since the . regex alternation pattern matches a single character anyways, and you’re always doing a lookup on what is returned by the regex, we can remove any 1-character length strings from the regex pattern without change in functionality:\n\n(def regex (re-pattern (str (-&gt;&gt; (keys cvt/romanized-தமிழ்-phoneme-map)\n                                 (sort-by count)\n                                 reverse\n                                 (remove #(= 1 (count %)))\n                                 (interpose \\|)\n                                 (apply str))\n                            \"|.\")))\n\nCheck that the output is the same:\n\n(-&gt;&gt; (re-seq regex s)\n     (map #(or (cvt/romanized-தமிழ்-phoneme-map %) %))\n     fmt/phonemes-&gt;str)\n\n\n\"வணக்கம். படிப்பவர்களுக்கு நன்றி.\"\n\nLet’s see that the new regex is faster than the slightly older regex, and that they are indeed faster than the unoptimized pure Clojure prefix tree implementation.\n\n(def regex1 (re-pattern (str (-&gt;&gt; (keys cvt/romanized-தமிழ்-phoneme-map)\n                                 (sort-by count)\n                                 reverse\n                                 (interpose \\|)\n                                 (apply str))\n                            \"|.\")))\n\n\n(def regex2 (re-pattern (str (-&gt;&gt; (keys cvt/romanized-தமிழ்-phoneme-map)\n                                 (sort-by count)\n                                 reverse\n                                 (remove #(= 1 (count %)))\n                                 (interpose \\|)\n                                 (apply str))\n                            \"|.\")))\n\n\n(def NUM-REPS 100)\n\n\n(time (dotimes [_ NUM-REPS]\n        (cvt/romanized-&gt;தமிழ் s)))\n\n\n\n\n\n\n\nOUT\n\n\n\n\"Elapsed time: 252.839032 msecs\"\n\n\n\n\nnil\n\n\n(time (dotimes [_ NUM-REPS]\n        (-&gt;&gt; (re-seq regex1 s)\n             (map #(or (cvt/romanized-தமிழ்-phoneme-map %) %))\n             fmt/phonemes-&gt;str)))\n\n\n\n\n\n\n\nOUT\n\n\n\n\"Elapsed time: 137.877035 msecs\"\n\n\n\n\nnil\n\n\n(time (dotimes [_ NUM-REPS]\n        (-&gt;&gt; (re-seq regex2 s)\n             (map #(or (cvt/romanized-தமிழ்-phoneme-map %) %))\n             fmt/phonemes-&gt;str)))\n\n\n\n\n\n\n\nOUT\n\n\n\n\"Elapsed time: 98.051366 msecs\"\n\n\n\n\nnil\n\nWell, this is surprising. I assumed that the regex implementation would be significantly faster. Let’s try to investigate.\nMaybe the difference is less than we thought because fmt/phonemes-&gt;str is suspiciously inefficient (and also based on the prefix tree code). So what if we strike that out from the above expressions that were timed?\n\n(time (dotimes [_ NUM-REPS]\n        (-&gt;&gt; (re-seq regex2 s)\n             (map #(or (cvt/romanized-தமிழ்-phoneme-map %) %))\n             str/join)))\n\n\n\n\n\n\n\nOUT\n\n\n\n\"Elapsed time: 1.63476 msecs\"\n\n\n\n\nnil\n\nSo fmt/phonemes-&gt;str is the culprit. And the implementation of it uses prefix tree code, which is ripe for optimization, perhaps similar to what we just proved here?\n\nsource: src/internationalization/transliteration2.clj"
  },
  {
    "objectID": "code_interview/beating/with_stupid_stuff/z_combinator_gambit.html",
    "href": "code_interview/beating/with_stupid_stuff/z_combinator_gambit.html",
    "title": "The Z-Combinator Gambit",
    "section": "",
    "text": "Welcome back code champs, number ninjas, and data divers to our first episode of Beating Code Interviews with Stupid Stuff. People often send me emails asking, “How can I use lambda calculus to impress people?” Today, we find out.\n\n\n\nProgrammer staring at Z-combinator\n\n\nI have an interview with ZCorp lined up in 5 minutes, and our challenge is to only use anonymous functions. No defn, no loops, and definitely no self-reference. I’ll allow myself the occasional def for brevity, but beyond that, we’ll be running on pure lambda calculus.\n20 minutes later\n\nHey, sorry to keep you waiting. I just got out of a more important meeting. I’m kind of a big deal here at ZCorp. Why don’t you tell me a little bit about yourself?\n\nBorn of binary, raised on algorithms, I walk the path of lambda…\n\nRiiiight… Let’s just start with the warm-up problem. Show me how you would reverse a list.\n\nAh, the timeless list reversal. Deceptively simple, perilously deep. We must first define our purpose.\n\n(fn [SELF LIST])\n\n\n#object [fn]\n\n\nWe’re just writing a function, and it only needs to take a list…\n\nNot just any function, my friend, but one that knows itself. To know yourself is to find your fixed point.\n\n(def REV\n  (fn [SELF LIST]\n    (if (empty? LIST)\n      []\n      (conj (SELF SELF (rest LIST))\n            (first LIST)))))\n\n\n(REV REV [1 2 3 4 5])\n\n\n[5 4 3 2 1]\n\nSELF is an input to itself, the logic of reversal.\n\nOk let’s just move on to the next problem, creating a Fibonacci sequence.\n\nOh no, our definition of reverse is intertwined with recursion. Let’s factor that out:\nWe need to lift our SELF\n\n(def REV'\n  (fn [SELF]\n    (fn [LIST]\n      (if (empty? LIST)\n        []\n        (conj (SELF (rest LIST))\n              (first LIST))))))\n\n\n((REV' REV') [1 2 3 4 5])\n\n\n\n\n\n\n\nclass code_interview.beating.with_stupid_stuff.z_combinator_gambit\\(REV_SINGLEQUOTE_\\)fn__72887 cannot be cast to class clojure.lang.IPersistentCollection (code_interview.beating.with_stupid_stuff.z_combinator_gambit\\(REV_SINGLEQUOTE_\\)fn__72887 is in unnamed module of loader clojure.lang.DynamicClassLoader @7162c3fe; clojure.lang.IPersistentCollection is in unnamed module of loader ‘app’)\n\n\n\n\n\n                                                     clojure.core/eval    core.clj: 3232\n                                                                   ...                 \ncode-interview.beating.with-stupid-stuff.z-combinator-gambit/eval72890  REPL Input:     \n  code-interview.beating.with-stupid-stuff.z-combinator-gambit/REV'/fn  REPL Input:     \n                                                     clojure.core/conj    core.clj:   84\njava.lang.ClassCastException: class code_interview.beating.with_stupid_stuff.z_combinator_gambit$REV_SINGLEQUOTE_$fn__72887 cannot be cast to class clojure.lang.IPersistentCollection (code_interview.beating.with_stupid_stuff.z_combinator_gambit$REV_SINGLEQUOTE_$fn__72887 is in unnamed module of loader clojure.lang.DynamicClassLoader @7162c3fe; clojure.lang.IPersistentCollection is in unnamed module of loader 'app')\n\n\n\n\n\nOh, no… SELF doesn’t take LIST, it’s a function that returns a function that operates on LIST, and the argument to SELF is… SELF. Therefore, we need to give it (SELF SELF).\n\n(def REV''\n  (fn [SELF]\n    (fn [LIST]\n      (if (empty? LIST)\n        []\n        (conj ((SELF SELF) (rest LIST))\n              (first LIST))))))\n\n\n((REV'' REV'') [1 2 3 4 5])\n\n\n[5 4 3 2 1]\n\n\nThat’s a confusing way to write it\n\nQuite right, because it’s not obvious what (SELF SELF) is. We need to extract it out. What we want is:\n\n(def REV-LOGIC\n  (fn [SELF]\n    (fn [LIST]\n      (if (empty? LIST)\n        []\n        (conj (SELF (rest LIST))\n              (first LIST))))))\n\n\nBelieve me when I say that is not what I meant…\n\nOh, right. Now SELF = (SELF SELF).\n\nNot what I meant, and also that sounds impossible.\n\nBut identity is the identity of itself:\n\n(identity 1)\n\n\n1\n\n\n((identity identity) 1)\n\n\n1\n\n\nO.K. sure, but that’s a special case.\n\n\n(((identity identity) (identity identity)) 1)\n\n\n1\n\n\nThis is an identity crisis.\n\nWe just need to find the right conditions for (SELF SELF) = SELF.\n\n(REV-LOGIC REV-LOGIC)\n\n\n#object [REV-LOGIC$fn]\n\n\nWell, it’s a function! That much is clear…\n\n\n((REV-LOGIC REV-LOGIC) [1 2 3 4 5])\n\n\n\n\n\n\n\nclass code_interview.beating.with_stupid_stuff.z_combinator_gambit\\(REV_LOGIC\\)fn__72897 cannot be cast to class clojure.lang.IPersistentCollection (code_interview.beating.with_stupid_stuff.z_combinator_gambit\\(REV_LOGIC\\)fn__72897 is in unnamed module of loader clojure.lang.DynamicClassLoader @16b59202; clojure.lang.IPersistentCollection is in unnamed module of loader ‘app’)\n\n\n\n\n\n                                                        clojure.core/eval    core.clj: 3232\n                                                                      ...                 \n   code-interview.beating.with-stupid-stuff.z-combinator-gambit/eval72908  REPL Input:     \ncode-interview.beating.with-stupid-stuff.z-combinator-gambit/REV-LOGIC/fn  REPL Input:     \n                                                        clojure.core/conj    core.clj:   84\njava.lang.ClassCastException: class code_interview.beating.with_stupid_stuff.z_combinator_gambit$REV_LOGIC$fn__72897 cannot be cast to class clojure.lang.IPersistentCollection (code_interview.beating.with_stupid_stuff.z_combinator_gambit$REV_LOGIC$fn__72897 is in unnamed module of loader clojure.lang.DynamicClassLoader @16b59202; clojure.lang.IPersistentCollection is in unnamed module of loader 'app')\n\n\n\n\n\nBut it doesn’t work, because (REV-LOGIC REV-LOGIC) =/= REV-LOGIC. Let’s try something easier:\n\n(def FIX\n  (fn [LOGIC]\n    ;; return something like identity where self application does not change it\n    #_FIXED))\n\nFIX takes the logic function, and makes a function such that (FIXED (FIX LOGIC)) = FIXED\n(FIXED FIXED) =&gt; FIXED which means that ((FIX LOGIC) (FIX LOGIC)) = (FIX LOGIC)\n\nRight, that sounds way easier… shaking head in disbelief\n\nExactly! Because we just reverse it: (FIX F) = ((FIX F) (FIX F))\n\nWhy did you call it FIX?\n\nWell, it was broken before right?\n\nI’m starting to think that you are the broken one.\n\n\n(def FIX\n  (fn [LOGIC]\n    ((FIX LOGIC) (FIX LOGIC))))\n\nBut FIX can still see itself. We need to parameterize the use of FIXED\n\n(def FIX\n  (fn [LOGIC]\n    ((fn [FIXED]\n       (LOGIC (FIXED FIXED)))\n     (fn [FIXED]\n       (LOGIC (FIXED FIXED))))))\n\nThere, I fixed it.\n\nWhat is fixed?\n\nFIXED is (FIXED FIXED), obviously.\n\nObviously. raises hands in dispair\n\nBecause (FIX F) = ((FIX F) (FIX F)), it was your idea to refactor remember?\n\n(FIX REV-LOGIC)\n\n\n\n\n\n\n\njava.lang.StackOverflowError\n\n\n\n\n\ncode-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn  REPL Input:  (repeats 1,024 times)\njava.lang.StackOverflowError:\n\n\n\n\n\n\nEverything looks to be inside out now.\n\nOh, you are right, we can’t pass (FIXED FIXED) as an argument because it will be evaluated first. Thanks for the tip.\n\nCan we fix it? slaps self\n\nInstead of calling (FIXED FIXED) we need a function that will create (FIXED FIXED) when it’s needed, after LOGIC gets called. LOGIC needs to take itself as it’s argument, so the function we pass to LOGIC should look very much like LOGIC, but of course without any actual logic in it.\n\nThat actually sounds logical.\n\nLOGIC is a function of itself, returning a function that acts on a value:\n(LOGIC (fn SELF [VALUE]\n         ((FIXED FIXED) VALUE)))\n\ndidn’t you say that (FIXED FIXED) = FIXED?\n\nYes but only after we FIX it. Fixing it requires us to go from FIXED to (FIXED FIXED) remember?\n\nAh sure…\n\nSo while we are fixing logic, let’s replace (LOGIC (FIXED FIXED)) with our deferring function.\n\n(def FIX\n  (fn [LOGIC]\n    ((fn [FIXED]\n       (LOGIC (fn SELF [VALUE]\n                ((FIXED FIXED) VALUE))))\n     (fn [FIXED]\n       (LOGIC (fn SELF [VALUE]\n                ((FIXED FIXED) VALUE)))))))\n\nDid you know this is called continuation passing style?\n\nCSP?\n\nNo, that’s communicating subprocesses.\n\nThat’s confusing.\n\nIsn’t it!? Fortunately, we are about to be unconfused.\n\n(FIX REV-LOGIC)\n\n\n#object [REV-LOGIC$fn]\n\n\nAt least it didn’t blow up this time…\n\n\n((FIX REV-LOGIC) [1 2 3 4 5])\n\n\n[5 4 3 2 1]\n\n\nNice, that’s the right answer.\n\nEven nicer is that our fixed logic behaves like identity now:\n\n((REV-LOGIC (FIX REV-LOGIC)) [1 2 3 4 5])\n\n\n[5 4 3 2 1]\n\n\n((REV-LOGIC (REV-LOGIC (FIX REV-LOGIC))) [1 2 3 4 5])\n\n\n[5 4 3 2 1]\n\n\nI can’t believe something so ridiculous actually works.\n\nYes it is ridiculous to have all those silly names. Let’s fix that:\n\n(def Z\n  (fn [F]\n    ((fn [X]\n       (F (fn [V] ((X X) V))))\n     (fn [X]\n       (F (fn [V] ((X X) V)))))))\n\nYou are not your variables. Rename them, rebind them. Your essence is invariant.\n\n((Z REV-LOGIC) [1 2 3 4 5])\n\n\n[5 4 3 2 1]\n\n\nWait, we are meant to be doing Fibonacci, remember?\n\nWe are factoring out our LOGIC.\n\nIt looks to me like you doubled the code, that’s not great refactoring. Using single letters make it totally unreadable.\n\nHmmm, there does seem to be a lot of doubling. We can factor out a function for f =&gt; (f f).\n\n(def REPLICATE \"Omega, the self-devouring serpent\"\n  (fn [F]\n    (F F)))\n\nThe replication of identity is itself.\n\n((REPLICATE identity) 1)\n\n\n1\n\nBut test not the serpent lightly\n\n(REPLICATE REPLICATE)\n\n\n\n\n\n\n\njava.lang.StackOverflowError\n\n\n\n\n\ncode-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE  REPL Input:  (repeats 512 times)\njava.lang.StackOverflowError:\n\n\n\n\n\nThe replication of replication is eternal. Now we can clean up that duplication.\n\n(def Z\n  (fn [LOGIC]\n    (REPLICATE (fn [X]\n                 (LOGIC (fn [V] ((X X) V)))))))\n\n\n((Z REV-LOGIC) [1 2 3 4 5])\n\n\n[5 4 3 2 1]\n\n\nThat’s not really any clearer…\n\nVery well, we can keep extracting.\n\n(def DEFER \"Eta, the patient one\"\n  (fn [LOGIC]\n    (fn [VALUE]\n      ((REPLICATE LOGIC) VALUE))))\n\nIf the infinite is deferred, is it infinite?\n\n(def FOLD \"Zeta, weaver of logic, bringer of finitude\"\n  (fn [LOGIC]\n    (REPLICATE (fn [SELF]\n                 (LOGIC (DEFER SELF))))))\n\nOMEGA diverges, ZETA folds, LOGIC writes QED.\n\n((FOLD REV-LOGIC) [1 2 3 4 5])\n\n\n[5 4 3 2 1]\n\nThat’s much nicer, I’m so glad you suggested using longer names.\n\nCan we write Fibonacci, please?\n\nOh, that’s easy now!\n\n(def FIB-LOGIC\n  (fn [SELF]\n    (fn [[B A :as FIBS]]\n      (if (&gt; B 10)\n        FIBS\n        (SELF (concat [(+ A B) B] FIBS))))))\n\n\n((FOLD FIB-LOGIC) [1 1])\n\n\n(13 8 8 5 5 3 3 2 2 1 1 1)\n\n\nThat’s all backward!!\n\nOh, my mistake\n\n((FOLD REV-LOGIC) ((FOLD FIB-LOGIC) [1 1]))\n\n\n[1 1 1 2 2 3 3 5 5 8 8 13]\n\n\nYou can’t be serious… This is ridiculous. We’ll be here forever if you keep this up.\n\nI love that idea! An infinite sequence is exactly what we need…\n\n(def FIB-LOGIC-FOREVER\n  (fn [SELF]\n    (fn [A]\n      (fn [B]\n        (lazy-seq\n          (cons A ((SELF B) (+ A B))))))))\n\n\n(take 20 (((FOLD FIB-LOGIC-FOREVER) 1) 1))\n\n\n(1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765)\n\nThat’s so nice.\n\nOh look at the time! I have a more important meeting to go to! disconnects\n\nOuch, Rough. ZCorp never got back to me, so let’s update the scoreboard as a loss.\n\n\n\n\n\nInterviews\nWins\nGGs\n\n\n\n\n1\n0\n0\n\n\n\n\n\nThat’s all for today. Until next time, keep on coding.\n\nsource: src/code_interview/beating/with_stupid_stuff/z_combinator_gambit.clj"
  },
  {
    "objectID": "cesium/geovis.html",
    "href": "cesium/geovis.html",
    "title": "Working with Cesium",
    "section": "",
    "text": "This is a short port of a more sophisticated cljs application that leverages CesiumJS for geospatial visualization, animation, and various interactive 3d projections. After seeing other civitas posts, I decided to try to port over a subset of the functionality in a “lightweight” package, combined with some analysis of open data (in this case, fires in Oregon), and then build up an interactive view/animation of the result.\nClay affords a nice platform for doing this, and scittle can be bent to our will to allow fairly sophisticated cljs/js stuff to be used directly (0 install). We will discuss alternate methods of accomplishing this later in a more efficient manner, but as an experimentation with clay and scittle and cesium, it’s not bad!\n\n(ns cesium.geovis\n  (:require [scicloj.kindly.v4.kind :as kind]\n            [tablecloth.api :as tc]\n            [charred.api :as charred]\n            [clojure.java.io :as jio]))"
  },
  {
    "objectID": "cesium/geovis.html#interactive-globe-renders-below",
    "href": "cesium/geovis.html#interactive-globe-renders-below",
    "title": "Working with Cesium",
    "section": "Interactive Globe Renders Below",
    "text": "Interactive Globe Renders Below"
  },
  {
    "objectID": "cesium/geovis.html#stadia-tiles-work-in-dev-but-not-production-intended",
    "href": "cesium/geovis.html#stadia-tiles-work-in-dev-but-not-production-intended",
    "title": "Working with Cesium",
    "section": "Stadia Tiles Work In Dev But Not Production (Intended)",
    "text": "Stadia Tiles Work In Dev But Not Production (Intended)\nMissing tiles occurs more commonly with the (very nice) series of Stadia tilesets. To add to the confusion, they are explicitly designed to work if you are working on a local development environment, e.g. if you cloned the clojure civitas repository and loaded this example locally instead of going through the clojure civitas github pages site, all of the Stadia tiles will work flawlessly. This is due to the circa 2023 move toward a funded tile hosting service, per https://github.com/CesiumGS/cesium/pull/11485 Since then, Stadia now hosts all the Stamen maptiles, and has terms of service per https://docs.stadiamaps.com/authentication/#authentication . In the case of local development, they allow requests from localhost, but will require an api or an authenticated domain, which requires registering with their service.\nAt the time of publication, I missed this change, and so we have a change in tileset and presentation to account.\n\n\n\nStadia Notes"
  },
  {
    "objectID": "cesium/geovis.html#geojson-for-complex-polygonal-layers-state-boundaries",
    "href": "cesium/geovis.html#geojson-for-complex-polygonal-layers-state-boundaries",
    "title": "Working with Cesium",
    "section": "GeoJSON For Complex Polygonal Layers (State Boundaries)",
    "text": "GeoJSON For Complex Polygonal Layers (State Boundaries)\nSince not every layer has state boundaries baked in, I added a layer from open source state boundaries via GeoJSON. We get the added benefit of having states recognized as named entities in Cesium, so clicking on a state boundary will pop up some information about the entity (in this case, the name).\nThis layer can be toggled using the “Toggle States” button. With some base layers, it may look better to have it toggled off since the current translucent grey polygon fill may collide with interesting visual features.\n\nSide Note - Clay Local Files vs. Quarto\nNormally, we can just reference files that are local to our notebook’s folder, like images and script tags, and Clay will pick them up just fine. When we go to publish on the Quarto web site, Clay will emit a baked document in .qmd format, wherein only the references to assets in use will be picked up and copied over as static assets.\nAs a consequence of how this Quarto site builds stuff, if we want to have our topojson file available for our CesiumJS app to pull locally, we have to reference it somewhere to indicate it should be copied to the static site (or we stick it in a global resources file etc.).\nThis work-around applies to any resource we want to have inside a webapp like geojson or other data, since Quarto isn’t going to know that. We can communicate our need by adding some reference to the doc, like a download link using the hiccup below.\n\n(kind/hiccup\n [:a {:href \"ne_10m_us_states.topojson\"\n      :download \"ne_10m_us_states.topojson\"}\n  \"ne_10m_us_states.topojson\"])\n\nne_10m_us_states.topojson\n\n\nGeospatial Entities\nThis is a common idiom in CesiumJS. There is a natural correspondence between geospatial entities and interactive analysis. Cesium enables workflows for interactive selection and viewing; we can tap into these flows with cljs and make even more interesting stuff."
  },
  {
    "objectID": "cesium/geovis.html#ui",
    "href": "cesium/geovis.html#ui",
    "title": "Working with Cesium",
    "section": "UI",
    "text": "UI\nAt this point, we can play around with the UI a bit to see what cesium offers out of the box. Feel free to play with any of the layers in Layer Picker control in the upper right corner.\nIt might be nice to have some additional information like cities and streets. We can click on the layer picker in upper right, and pick the ‘Bing Aerial Maps With Labels’ layer, or any of the other road maps.\nOnce that’s done, we’ll zoom in to Oregon in the northwest corner of the US. This is where our data lives, so our fires will show up animating around here as simple arcs popping up from the earth over time, corresponding to the presence of a fire.\nIf we hit play at this point, we might find a view that looks like this:\n\n\n\nsome fires\n\n\nWe can pause the view using either the Stop button or the Cesium UI button in the bottom left Clock widget. Since fires are also entities, we can click on one and get some information.\nIf you are running locally (or in the future, if I pony up for an API key from Stadia) then you can get a view of their Stamen Toner map like this one:\n\n\n\ntoner layer\n\n\nWe change projections with the upper right corner UI control. Clicking on the wireframe globe lets us choose either a 2d planar overhead projection, or a 2.5 Columbus view. Let’s use that.\nFor reference if we had access to the Stamen Toner layer, this is one more view:\n\n\n\n2.5d toner layer"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Posts",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Author\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nMermaid.js\n\n\n\n\n\nExplain complex concepts with mermaid.js\n\n\n\n\n\nSep 5, 2025\n\n\nEmil Bengtsson\n\n\n\n\n\n\n\n\n\n\n\n\nClojure Support for Popular Data Tools: A Data Engineer’s Perspective, and a New Clojure API for Snowflake\n\n\n\n\n\n\n\n\n\n\n\nSep 4, 2025\n\n\nAlex Coyle\n\n\n\n\n\n\n\n\n\n\n\n\nTwo Columns, One Namespace: Clojure to PDF\n\n\n\n\n\nTransform your Clojure code into a beautiful, journal-style PDF, complete with math, charts, and images.\n\n\n\n\n\nSep 3, 2025\n\n\nTimothy Pratley\n\n\n\n\n\n\n\n\n\n\n\n\nExploring Time Series Data Visualization\n\n\n\n\n\nA simple exploration to create time-series data visualization\n\n\n\n\n\nAug 30, 2025\n\n\nSiyoung Byun\n\n\n\n\n\n\n\n\n\n\n\n\nWhy Building My Blog is More Fun Than Filling It\n\n\n\n\n\nOn the joy of building, the challenge of writing, and how to make blogging more fun and productive for Clojure developers.\n\n\n\n\n\nAug 19, 2025\n\n\nTimothy Pratley\n\n\n\n\n\n\n\n\n\n\n\n\nWorking with Cesium\n\n\n\n\n\nLooking at leveraging cesium for geospatial visualization.\n\n\n\n\n\nAug 13, 2025\n\n\njoinr\n\n\n\n\n\n\n\n\n\n\n\n\nThe Sandwich Approach to ClojureScript Development\n\n\n\n\n\nA lightweight way to cook with Clay and Scittle\n\n\n\n\n\nAug 13, 2025\n\n\nTimothy Pratley\n\n\n\n\n\n\n\n\n\n\n\n\nDepth-first search in Clojure (tree-seq)\n\n\n\n\n\nStep-by-step development of a depth-first search, using tree-seq, to solve a classic puzzle.\n\n\n\n\n\nAug 11, 2025\n\n\nHarold\n\n\n\n\n\n\n\n\n\n\n\n\nI’ll take a side of REPL with that\n\n\n\n\n\nSelective interaction with a persistent REPL sidebar inside your Clay documents\n\n\n\n\n\nAug 5, 2025\n\n\nTimothy Pratley\n\n\n\n\n\n\n\n\n\n\n\n\nMacroexpand 2025 by Scicloj\n\n\n\n\n\nMacroexpand 2025: A pair of conferences by Scicloj: Macroexpand-Noj and Macroexpand-Deep. Call for proposals is open!\n\n\n\n\n\nAug 4, 2025\n\n\nDaniel Slutsky, Siyoung Byun\n\n\n\n\n\n\n\n\n\n\n\n\nMacros, Matter, & Malleability\n\n\n\n\n\nHow to add UI components and ClojureScript to your Clojure namespace\n\n\n\n\n\nAug 1, 2025\n\n\nTimothy Pratley\n\n\n\n\n\n\n\n\n\n\n\n\nPresenting your namespace\n\n\n\n\n\nDid you know your blog post can be a slideshow?\n\n\n\n\n\nJul 30, 2025\n\n\nTimothy Pratley\n\n\n\n\n\n\n\n\n\n\n\n\nCollections as grids with borders\n\n\n\n\n\n\n\n\n\n\n\nJul 20, 2025\n\n\nTimothy Pratley\n\n\n\n\n\n\n\n\n\n\n\n\nSimulating 1-D Convection in Clojure — From Equations to Arrays\n\n\n\n\n\nA quick exploration to simulate a classic fluid dynamics equation in Clojure using Java arrays.\n\n\n\n\n\nJul 15, 2025\n\n\nSiyoung Byun\n\n\n\n\n\n\n\n\n\n\n\n\nBeginning to build a browser game\n\n\n\n\n\n\n\n\n\n\n\nJul 9, 2025\n\n\nMatt Kleinsmith\n\n\n\n\n\n\n\n\n\n\n\n\nConvergence to Normal Distribution, independent of original distribution\n\n\n\n\n\n\n\n\n\n\n\nJun 27, 2025\n\n\nSam Umbach\n\n\n\n\n\n\n\n\n\n\n\n\nConvergence of Random Events\n\n\n\n\n\n\n\n\n\n\n\nJun 25, 2025\n\n\nSam Umbach, Timothy Pratley\n\n\n\n\n\n\n\n\n\n\n\n\nTransforming Datasets to Stack Charts\n\n\n\n\n\nA couple of quick ideas about visualizing data, especially with regard to comparison.\n\n\n\n\n\nJun 24, 2025\n\n\nHarold\n\n\n\n\n\n\n\n\n\n\n\n\nMore on transliteration\n\n\n\n\n\n\n\n\n\n\n\nJun 22, 2025\n\n\nElango Cheran\n\n\n\n\n\n\n\n\n\n\n\n\nFive Pirates Treasure Splitting\n\n\n\n\n\nSharing ideas and pirate treasure with ClojureCivitas.\n\n\n\n\n\nJun 18, 2025\n\n\nTimothy Pratley\n\n\n\n\n\n\n\n\n\n\n\n\nAbout Transliteration\n\n\n\n\n\n\n\n\n\n\n\nJun 8, 2025\n\n\nElango Cheran\n\n\n\n\n\n\n\n\n\n\n\n\nThe Hidden Geometry of Dice\n\n\n\n\n\nA simple probability puzzle turns into a journey through triangular numbers and tessellated hexagons.\n\n\n\n\n\nJun 5, 2025\n\n\nTimothy Pratley\n\n\n\n\n\n\n\n\n\n\n\n\nWhat if… we were taught transducers first?\n\n\n\n\n\n\n\n\n\n\n\nMay 31, 2025\n\n\nSean Corfield\n\n\n\n\n\n\n\n\n\n\n\n\nThe Hallway Track: SciNoj Light #1 Data Analysis Stories\n\n\n\n\n\n\n\n\n\n\n\nMay 28, 2025\n\n\nTimothy Pratley\n\n\n\n\n\n\n\n\n\n\n\n\nFactorization of Eratosthenes\n\n\n\n\n\n\n\n\n\n\n\nMay 28, 2025\n\n\nTim Schafer\n\n\n\n\n\n\n\n\n\n\n\n\nClean object printing by removing extraneous\n\n\n\n\n\n\n\n\n\n\n\nMay 26, 2025\n\n\nTimothy Pratley\n\n\n\n\n\n\n\n\n\n\n\n\nThe Z-Combinator Gambit\n\n\n\n\n\n\n\n\n\n\n\nMay 25, 2025\n\n\nChris Houser, Timothy Pratley\n\n\n\n\n\n\n\n\n\n\n\n\nNoj Reload Executable\n\n\n\n\n\n\n\n\n\n\n\nMay 6, 2025\n\n\nTimothy Pratley\n\n\n\n\n\n\n\n\n\n\n\n\nWhat He Saw Before His Wings Melted\n\n\n\n\n\n\n\n\n\n\n\nMay 1, 2025\n\n\nDaniel Slutsky, Timothy Pratley\n\n\n\n\n\n\n\n\n\n\n\n\nStats and Signals in the Flow of Asynctopolis\n\n\n\n\n\n\n\n\n\n\n\nMay 1, 2025\n\n\nAlex Miller, Timothy Pratley\n\n\n\n\n\n\n\n\n\n\n\n\nMy Dream Static Website Generator\n\n\n\n\n\n\n\n\n\n\n\nApr 28, 2021\n\n\nKira Howe\n\n\n\n\n\n\n\n\n\n\n\n\nThere Is So Much Low Hanging Fruit In Web Development\n\n\n\n\n\n\n\n\n\n\n\nApr 24, 2021\n\n\nKira Howe\n\n\n\n\n\n\n\n\n\n\n\n\nEthics Are Missing From Software Development\n\n\n\n\n\n\n\n\n\n\n\nMar 10, 2021\n\n\nKira Howe\n\n\n\n\n\n\n\n\n\n\n\n\nBuilding A Fast Command Line App With Clojure\n\n\n\n\n\n\n\n\n\n\n\nFeb 18, 2021\n\n\nKira Howe\n\n\n\n\n\n\n\n\n\n\n\n\nI Need People\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2021\n\n\nKira Howe\n\n\n\n\n\n\n\n\n\n\n\n\nAmerica Is A Scam\n\n\n\n\n\n\n\n\n\n\n\nJan 30, 2021\n\n\nKira Howe\n\n\n\n\n\n\n\n\n\n\n\n\nBecoming A Software Developer\n\n\n\n\n\n\n\n\n\n\n\nJan 19, 2021\n\n\nKira Howe\n\n\n\n\n\n\n\n\n\n\n\n\nWhat I Use Now Instead Of Google\n\n\n\n\n\n\n\n\n\n\n\nJan 5, 2021\n\n\nKira Howe\n\n\n\n\n\n\n\n\n\n\n\n\n2020 Year In Review\n\n\n\n\n\n\n\n\n\n\n\nDec 31, 2020\n\n\nKira Howe\n\n\n\n\n\n\n\n\n\n\n\n\nHow To Set Up Codecov For a Clojure Deps Project\n\n\n\n\n\n\n\n\n\n\n\nDec 30, 2020\n\n\nKira Howe\n\n\n\n\n\n\n\n\n\n\n\n\nHow To Set Up Your Own Nextcloud Server\n\n\n\n\n\n\n\n\n\n\n\nDec 19, 2020\n\n\nKira Howe\n\n\n\n\n\n\n\n\n\n\n\n\nBarCamp Philly 2020\n\n\nA stellar example of virtual conferencing done well\n\n\n\n\n\n\n\n\nDec 7, 2020\n\n\nKira Howe\n\n\n\n\n\n\n\n\n\n\n\n\nChristianese For Outsiders\n\n\n\n\n\n\n\n\n\n\n\nOct 30, 2020\n\n\nKira Howe\n\n\n\n\n\n\n\n\n\n\n\n\nJournalism Is Important\n\n\n\n\n\n\n\n\n\n\n\nOct 15, 2020\n\n\nKira Howe\n\n\n\n\n\n\n\n\n\n\n\n\nAn Atheist Tries Religion\n\n\n\n\n\n\n\n\n\n\n\nSep 16, 2020\n\n\nKira Howe\n\n\n\n\n\n\n\n\n\n\n\n\nThe Life You Can Save\n\n\n\n\n\n\n\n\n\n\n\nSep 2, 2020\n\n\nKira Howe\n\n\n\n\n\n\n\n\n\n\n\n\nWhy Are Websites So Complicated Now?\n\n\n\n\n\n\n\n\n\n\n\nAug 3, 2020\n\n\nKira Howe\n\n\n\n\n\n\n\n\n\n\n\n\nSearching for Sunday\n\n\n\n\n\n\n\n\n\n\n\nDec 10, 2019\n\n\nKira Howe\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "scicloj/clay/mermaid.html",
    "href": "scicloj/clay/mermaid.html",
    "title": "Mermaid.js",
    "section": "",
    "text": "(kind/mermaid \"flowchart LR\n Concept --&gt; easy{Easy to understand?}\n easy --&gt;|Yes| Understanding\n easy --&gt;|No| Diagram\n easy --&gt;|No| wall(Wall of text)\n Diagram --&gt; Understanding\n wall --&gt;|Didn't get it| Concept\n wall --&gt;|Finally| Understanding\")\n\nflowchart LR\n Concept --&gt; easy{Easy to understand?}\n easy --&gt;|Yes| Understanding\n easy --&gt;|No| Diagram\n easy --&gt;|No| wall(Wall of text)\n Diagram --&gt; Understanding\n wall --&gt;|Didn't get it| Concept\n wall --&gt;|Finally| Understanding\nWith mermaid.js you can now use words to generate a picture. One of the trickier aspects in explaining complex ideas/concepts, is the infliction point where words start to pile up towards dizzying heights and you lose sight of what what you wanted to communicate.\n\nsource: src/scicloj/clay/mermaid.clj"
  },
  {
    "objectID": "scicloj/clay/mermaid.html#a-picture-is-worth-a-thousand-words",
    "href": "scicloj/clay/mermaid.html#a-picture-is-worth-a-thousand-words",
    "title": "Mermaid.js",
    "section": "",
    "text": "(kind/mermaid \"flowchart LR\n Concept --&gt; easy{Easy to understand?}\n easy --&gt;|Yes| Understanding\n easy --&gt;|No| Diagram\n easy --&gt;|No| wall(Wall of text)\n Diagram --&gt; Understanding\n wall --&gt;|Didn't get it| Concept\n wall --&gt;|Finally| Understanding\")\n\nflowchart LR\n Concept --&gt; easy{Easy to understand?}\n easy --&gt;|Yes| Understanding\n easy --&gt;|No| Diagram\n easy --&gt;|No| wall(Wall of text)\n Diagram --&gt; Understanding\n wall --&gt;|Didn't get it| Concept\n wall --&gt;|Finally| Understanding\nWith mermaid.js you can now use words to generate a picture. One of the trickier aspects in explaining complex ideas/concepts, is the infliction point where words start to pile up towards dizzying heights and you lose sight of what what you wanted to communicate.\n\nsource: src/scicloj/clay/mermaid.clj"
  },
  {
    "objectID": "scicloj/tableplot/ideas/stacking.html",
    "href": "scicloj/tableplot/ideas/stacking.html",
    "title": "Transforming Datasets to Stack Charts",
    "section": "",
    "text": "With observed data, presumably from two runs of some experiment…\n\n(def ds0\n  (ds/-&gt;dataset \"https://gist.githubusercontent.com/harold/18ba174c6c34e7d1c5d8d0954b48327c/raw\"\n                {:file-type :csv}))\n\n\n(def ds1\n  (ds/-&gt;dataset \"https://gist.githubusercontent.com/harold/008bbcd477bf51b47548d680107a6195/raw\"\n                {:file-type :csv}))\n\nWell, what have we got?\n\nds0\n\n\nhttps://gist.githubusercontent.com/harold/18ba174c6c34e7d1c5d8d0954b48327c/raw [500 1]:\n\n\n\ny\n\n\n\n\n-0.09138541\n\n\n0.73573478\n\n\n0.66637442\n\n\n1.42894310\n\n\n1.17985915\n\n\n2.10245096\n\n\n2.35628501\n\n\n1.65951387\n\n\n2.66932952\n\n\n1.96287689\n\n\n…\n\n\n6.30911743\n\n\n6.65394635\n\n\n5.88407917\n\n\n6.59312352\n\n\n6.32078823\n\n\n5.78220740\n\n\n6.11383638\n\n\n6.62701870\n\n\n6.29688536\n\n\n5.87255145\n\n\n6.34171349\n\n\n\n\nA few hundred numbers… Hm…\n\nds1\n\n\nhttps://gist.githubusercontent.com/harold/008bbcd477bf51b47548d680107a6195/raw [500 1]:\n\n\n\ny\n\n\n\n\n1.23590349\n\n\n0.97176804\n\n\n1.44779983\n\n\n2.09836076\n\n\n2.39260885\n\n\n2.33861635\n\n\n2.55252144\n\n\n2.75108032\n\n\n3.42274612\n\n\n3.13478376\n\n\n…\n\n\n22.45761328\n\n\n22.35632666\n\n\n21.93285307\n\n\n22.24006990\n\n\n22.51064120\n\n\n22.38858256\n\n\n22.53949283\n\n\n22.57957379\n\n\n22.31971585\n\n\n22.69953383\n\n\n22.23848485\n\n\n\n\nThis neglects the hundreds of thousands of years invested in evolving a visual system…\n\n(-&gt; ds0\n    (plotly/base {:=title \"Run 0\"})\n    (plotly/layer-point {:=y \"y\"}))\n\n\n\n(-&gt; ds1\n    (plotly/base {:=title \"Run 1\"})\n    (plotly/layer-point {:=y \"y\"}))\n\n\nBetter; however, our aim is to compare them… Which is higher?\n\n(-&gt; (ds/concat (assoc ds0 :v \"Run 0\")\n               (assoc ds1 :v \"Run 1\"))\n    (plotly/base {:=title \"Comparison Between Runs\"})\n    (plotly/layer-point {:=y \"y\"\n                         :=color :v}))\n\n\nNow it’s up to the viewer to decide whether they like higher numbers or not.\n\nThere are a couple of interesting ideas in that last bit of code:\n\nassoc a constant onto a ds creates a constant column\n:=color takes care of grouping the results and the downstream display\n\nNeat.\n\nsource: src/scicloj/tableplot/ideas/stacking.clj"
  },
  {
    "objectID": "scicloj/cfd/intro/linear_1d_convection_with_array.html",
    "href": "scicloj/cfd/intro/linear_1d_convection_with_array.html",
    "title": "Simulating 1-D Convection in Clojure — From Equations to Arrays",
    "section": "",
    "text": "Earlier this year I gave a talk at the first online Scinoj Light Conference, sharing a ongoing project to port Computational Fluid Dynamics(CFD) learning materials from Python to Clojure.\nIn this post, I’ll demonstrate a simple one-dimensional linear convection simulation implemented in Clojure using Java primitive arrays. This example shows a glimpse into the porting effort, with a focus on expressing numerical simulations using only built-in Clojure functions."
  },
  {
    "objectID": "scicloj/cfd/intro/linear_1d_convection_with_array.html#the-equation",
    "href": "scicloj/cfd/intro/linear_1d_convection_with_array.html#the-equation",
    "title": "Simulating 1-D Convection in Clojure — From Equations to Arrays",
    "section": "The Equation",
    "text": "The Equation\n(This section won’t take up too much of your time…)\nWe’re going to simulate the 1-D linear convection equation:\n\\[\\frac{\\partial u }{\\partial t} + c \\frac{\\partial u}{\\partial x} = 0\\]\nThis explains how the flow velocity u changes over time t and position x, with c which is the wave speed.\nInstead of focusing on the physical interpretation(since I am no expert), the main focus on this post will be its implementation side - expressing it numerically and coding it in Clojure!\nUsing a finite-difference scheme, the discretized form becomes:\n\\[\\frac{u_i^{n+1} - u_i^n}{\\Delta t} + c \\frac{u_i^n - u_{i-1}^n}{\\Delta x} = 0\\]\nThen, solving for u_i^{n+1} gives:\n\\[u_i^{n+1} = n_i^n - c \\frac{\\Delta t}{\\Delta x}(u_i^n - u_{i-1}^n)\\]"
  },
  {
    "objectID": "scicloj/cfd/intro/linear_1d_convection_with_array.html#initial-setup",
    "href": "scicloj/cfd/intro/linear_1d_convection_with_array.html#initial-setup",
    "title": "Simulating 1-D Convection in Clojure — From Equations to Arrays",
    "section": "Initial Setup",
    "text": "Initial Setup\nWe begin by defining initial simulation parameters to start:\n\nnx: number of sliced steps for spatial point x from x-start and x-end\nnt: number of time steps we want to propagate\ndx: each sliced x calculated from dx = (x-end - x-start) / (nx - 1)\ndt: sliced each time step\nc: speed of wave\n\n\n(def init-params\n  {:x-start 0\n   :x-end   2\n   :nx      41\n   :nt      25\n   :dx      (/ (- 2 0) (dec 41))\n   :dt      0.025\n   :c       1})\n\n\nCreating the x Grid\nWith the given init-params we defined earlier, we create a float-array of spatial points x:\n\n(def array-x (let [{:keys [nx x-start x-end]} init-params\n                   arr  (float-array nx)\n                   step (/ (- x-end x-start) (dec nx))]\n               (dotimes [i nx]\n                 (aset arr i (float (* i step))))\n               arr))\n\n\n[0.0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6,\n 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0, 1.05, 1.1, 1.15, 1.2,\n 1.25, 1.3, 1.35, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7, 1.75, 1.8,\n 1.85, 1.9, 1.95, 2.0]\n\n\n\nDefining Initial Flow Velocity Condition\nThe initial flow velocity(when t = 0) is 2 when x ∈ [0.5, 1.0], and is 1 elsewhere:\n\n(def init-cond-fn #(float (if (and (&gt;= % 0.5) (&lt;= % 1.0)) 2 1)))\n\n\n(def array-u\n  (let [nx (:nx init-params)\n        u  (float-array nx)]\n    (dotimes [i nx]\n      (let [x-i (aget array-x i)\n            u-i (init-cond-fn x-i)]\n        (aset u i u-i)))\n    u))\n\n\n(def init-array-u (float-array array-u))\n\n\n[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0,\n 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,\n 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]\n\nWe can visualize this initial u:\n\n\n\nWait, Why dotimes?\nSince we’re working with mutable Java arrays(float-array), dotimes is an efficient choice here. Because it gives direct, index-based iteration. And it pairs naturally with aget and aset for reading and writing array values."
  },
  {
    "objectID": "scicloj/cfd/intro/linear_1d_convection_with_array.html#implementing-and-the-simulation",
    "href": "scicloj/cfd/intro/linear_1d_convection_with_array.html#implementing-and-the-simulation",
    "title": "Simulating 1-D Convection in Clojure — From Equations to Arrays",
    "section": "Implementing and the Simulation",
    "text": "Implementing and the Simulation\nWith the initial setup complete, we now apply the discretized convection equation at each time step.\n\nStep Function\nGiven the previous time step’s array-u and the init-params, We compute and mutate the flow velocity in-place:\n\n(defn mutate-linear-convection-u\n  [array-u {:keys [nx c dx dt]}]\n  (let [u_i (float-array array-u)]\n    (dotimes [i (- nx 2)]\n      (let [idx     (inc i)\n            un-i    (aget u_i idx)\n            un-i-1  (aget u_i i)\n            new-u-i (float (- un-i (* c (/ dt dx) (- un-i un-i-1))))]\n        (aset array-u idx new-u-i))))\n  array-u)\n\n\n\nTime Integration\nWe run the step function nt times to run our simulation over time.\n\n(defn simulate!\n  [array-u {:keys [nt] :as init-params}]\n  (loop [n 0]\n    (if (= n nt)\n      array-u\n      (do (mutate-linear-convection-u array-u init-params) (recur (inc n))))))\n\nFinally, we visualize the resulting array-u:\n\n(simulate! array-u init-params)\n\n\n[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0000007,\n 1.0000097, 1.0000782, 1.0004553, 1.0020387, 1.0073167, 1.0216427,\n 1.0538762, 1.1147615, 1.2121781, 1.3450189, 1.4999992, 1.6549712,\n 1.7877436, 1.8847833, 1.9440854, 1.9710407, 1.9710407, 1.9440854,\n 1.8847833, 1.7877436, 1.6549712, 1.4999992, 1.3450189, 1.2121781,\n 1.1147615, 1.0538762, 1.0216427, 1.0073167, 1.0]\n\n\nThe plot shows how the flow velocity shifts from left to right over time, while also becoming smoother. Nice!"
  },
  {
    "objectID": "scicloj/cfd/intro/linear_1d_convection_with_array.html#the-summary",
    "href": "scicloj/cfd/intro/linear_1d_convection_with_array.html#the-summary",
    "title": "Simulating 1-D Convection in Clojure — From Equations to Arrays",
    "section": "The Summary",
    "text": "The Summary\nThis Simple example demonstrates a simulation process using low-level Java primitive arrays in Clojure.\nChoosing this approach provided mutable, non-persistent data structures. While this deviates from idiomatic Clojure, it offers significant performance benefits for big-size numerical simulations. However, it comes with trade-offs; by opting for mutability, we give up the guarantees of immutability and structural sharing, making the code less safe and more error-prone.\nAs the porting project continues, we plan to evolve the design to better align with idiomatic Clojure principles. Stay tuned!\n\nsource: src/scicloj/cfd/intro/linear_1d_convection_with_array.clj"
  },
  {
    "objectID": "scicloj/noj/intro/getting-started-noj.html",
    "href": "scicloj/noj/intro/getting-started-noj.html",
    "title": "Noj Reload Executable",
    "section": "",
    "text": "Transcript of Noj Reload Executable\nHello code champs, number ninjas and data divers!\nImagine being able to experiment with Clojure without needing to install tooling, set up editors, or even know about deps.edn Sounds like a dream, right? Well, dream no more—meet Noj’s new Code Reload Executable!\n\n\n\nNoj\n\n\nWe can skip the Clojure tooling and editor setup, but we do need to install the recommended Adoptive Java. Now we download the latest Noj jar from the Scicloj Noj GitHub releases page. Let’s check the jar is in the Downloads directory, and that we have java installed by executing java -version.\nLaunch Noj using java -jar and the path to the jar file. Pro tip, if you press tab while typing a path, it will autocomplete. Noj is running, it created a directory called notebooks, and it recommends we create a Clojure file there.\nI’ll create my file with Notepad, being careful to create a .clj file rather than a text file. When I saved that file, a browser window opened. Let’s put them side by side. Every time I save the file, the notebook updates.\nIf I’m interested in one particular top-level form, I can narrow the output by adding ,, anywhere in the form. And removing it renders the full notebook. And check this out—comments are rendered as Markdown. How cool is that? What an easy way to get coding!\nNoj isn’t just a notebook—it’s a fully featured data science environment. It includes interesting datasets that can be queried and the results shown as tables or even better as charts.\nNoj makes experimenting with Clojure easier than ever. No setup headaches, no complicated tooling—just pure coding joy.\nUntil next time, Keep on coding"
  },
  {
    "objectID": "conferences/scinoj_light_1/notes/hallway_track.html",
    "href": "conferences/scinoj_light_1/notes/hallway_track.html",
    "title": "The Hallway Track: SciNoj Light #1 Data Analysis Stories",
    "section": "",
    "text": "The SciNoj Light #1 Conference brought together Clojure enthusiasts, data scientists, and researchers for an engaging exploration of data analysis stories. The event fostered a collaborative, informal atmosphere where participants exchanged ideas across disciplines from cognitive psychology to urban planning.\nIf you missed it, you can view the talks on the conference sessions playlist. The conference website has detailed information about the talks and speakers. Links to the notebook code presented are on the sessions page, and available as data in the info.edn file.\nThe concluding talk on lane reductions stood out as my favorite because it blended data-driven insights with relatable, human-interest storytelling. As a cyclist, I immediately connected with how lane reductions and protected bike lanes are impactful to my safety. The talk’s compelling visuals, grounded in real case studies, made the story very tangible. Heather’s personal perspective as a car-free parent added emotional weight. She illustrated how community advocacy and smart urban design saves lives, and makes more livable spaces. The mix of passion, rigor, and optimism left me inspired; data analysis can drive tangible, life-improving change.\n\n\n\nBike lane improvements reduce crashes\n\n\nA major focus of the conference was the development of Clojure’s data science Noj toolkit. This suite of libraries demonstrated how Clojure combines functional programming elegance with practical performance. Speakers highlighted Noj’s interoperability with Python and Java ecosystems while emphasizing its advantages for reproducible and maintainable workflows. The community’s collaborative energy was evident throughout.\n\n\n\nNoj core components\n\n\nArtificial intelligence emerged as a recurring theme, with several talks exploring hybrid approaches to enhance reliability. One discussion centered on Retrieval-Augmented Generation (RAG) systems, where combining large language models with Clojure’s logic programming capabilities could improve accuracy in structured domains like government Q&A. Another session delved into probabilistic programming with Inferme, illustrating Bayesian methods for modeling uncertainty. These technical deep dives were balanced by ethical considerations and reflections on technology’s societal implications.\nScientific applications showcased Clojure’s versatility. One talk explored simulating fluid dynamics. Another focused on forecasting tropical cyclone paths using physics-informed machine learning. Cognitive science experiments were also featured, using collaborative games and puzzles to study human planning behavior, and brain wave monitors. The conference also highlighted social impact work, such as data-driven advocacy for safer street designs, proving that technical tools can drive urban change.\nWhat stood out to me was how effectively the SciCloj community uses Clojure notebooks for collaborative work. Presenters shared their research through executable notebooks that cleanly combined code, visualizations and explanations. It’s a practical pattern broadly applicable for sharing ideas and knowledge.\nThroughout the event, a sense of optimism prevailed about Clojure’s untapped potential. While acknowledging gaps in ML tooling compared to Python, speakers demonstrated that Clojure’s functional rigor and JVM scalability make it a good fit for data science. Attendee discussions envisioned collaborating further on logic-guided AI and semantic web ontologies. There was a recurring theme of bridging the gap between academic theory and real-world engineering. SciNoj Light ultimately painted a picture of Clojure not just as a language, but as a catalyst for interdisciplinary innovation.\n\nYou can have the cake of Clojure’s immutable persistent data structures and eat it too;\nGet your answers fast and make your customers happy.\n— Harold\n\nA big thank you to the organizers! The event was an overwhelming success with high quality presentations and valuable discussions. I’m looking forward to the next SciNoj, it’s a rare and valuable blend of science, technology, community and code.\nBelow are my notes about the sessions and conversations from the conference.\n\nPre-conference interview\nEngaging to have a taste of what’s to come, got me really enthusiastic about the coming event. Game as a Research Tool: “Tik Tik” is a controlled environment for studying human cognition and collaboration. Combines cognitive psychology, game design, and data analysis.\n\n\n1.1: Hello\nCommunity-driven event. Informal, interactive, and welcoming. Focus on Clojure for data workflows. Tools and libraries have matured, and the conference shares these advancements. Zulip is the main forum, attendees are encouraged to engage via structured topic threads. The macroexpand session invites ideas for expanding Clojure adoption in various fields. Hosts encourage questions, jokes, and relaxed participation. Sets the tone for an inclusive, engaging, and slightly nerdy gathering of Clojure enthusiasts.\n\n\n1.2: An intro to the Noj toolkit\nNoj is a Clojure-based data science toolkit integrating libraries for data analysis, visualization, and machine learning. Designed for functional, efficient data processing with compatibility across libraries (e.g., Tablecloth, FastMath, Metamorph). Inspired by tools like R’s dplyr/ggplot and Python’s pandas/Plotly, but with a Clojure-centric approach. Tablecloth for tabular data manipulation (similar to pandas/dplyr). TablePlot grammar-of-graphics-inspired visualization (like ggplot). FastMath stats and statistical modeling (logistic regression and more). Metamorph for machine learning workflows. Worked example of predicting success in Kickstarter projects. Data loading/cleaning, exploratory analysis (grouping, aggregation, bar plots), predictive modeling, evaluation (train/test split, accuracy checks). Functional & Immutable, Noj leverages Clojure’s strengths. Efficient columnar storage with zero-copy operations.\n\n\n1.3: Probability and statistics - Daniel Slutsky\nGenerating pseudo-random numbers using seeds for reproducibility in research. Simulating dice rolls to explore distributions. Used histograms and scatter plots to visualize distributions. Computed mean, standard deviation and z-scores for comparison. Bayesian inference for probabilistic models with parameters. Conditioned models on observed data to infer posterior distributions. Highlighted constraints and efficient sampling algorithms. Avoid lazy sequences for large simulations; consider dtype-next or transducers. Visualization matters, histograms and scatter plots reveal patterns. Probabilistic programming models uncertainty and updates beliefs with data. Balanced foundational stats with advanced topics, emphasizing Clojure’s tools for data science.\n\n\n1.4: Customer churn analysis, LLMs & logic programming - Siavash Mohammady\nCustomers leaving significantly impacts revenue. Exploring factors like course format, teacher experience, and registration patterns. High churn in early months, newer teachers correlated with higher churn. User prompt → NLP entity recognition → LLM generates high-level DSL → Clara rule engine translates to low-level DSL → Execution. Mentorship for new teachers can reduce churn. Pairing LLMs abstract reasoning with logic engines concrete execution optimizes complex data tasks. A forward-looking talk blending data science, AI, and Clojure, emphasizing doing less.\n\n\n1.5: Linear Foundations & Nonlinear Frontiers - Jelena Losic\nLinear systems rely on superposition, the whole is the sum of parts. Vector spaces, linear regression, Fourier analysis. Real-world systems are often nonlinear. Linear methods fail when data lies on curved manifolds or exhibits complex interactions. Techniques like t-SNE, UMAP, and autoencoders handle nonlinearity by preserving structures or learning manifold geometry. Nonlinear systems can be deterministic yet unpredictable. Nonlinear methods unlock richer patterns but sacrifice interpretability and require more data. Dimensionality reduction illustrates the trade-off between simplicity and accuracy. Embeddings leverage linear algebra but rely on nonlinear transformations for deeper semantics.\n\n\n1.6: RAGgedy Ann’s Big Adventure - Paula Gearon\nVectors represent concepts in multidimensional space. Embeddings convert text into vectors, capturing meaning. Similarity between vectors is measurable. Neural networks process inputs through weighted connections and activation functions. Transformers contextualize words in sentences. Combining LLMs with vector databases to reduce hallucinations. Augmenting queries with retrieved context. LLMs are built from modular math operations. Vector databases enable semantic search. RAG improves accuracy by grounding LLM outputs in verified data.\n\n\n1.7: Parliamentary Questions - RAG Evaluation - Eoin Carney\nCan RAG effectively answer parliamentary style questions using Irish government data? 10k publicly available Irish parliamentary questions and answers. Compared sentence-based chunking with full document retrieval. Tested multiple LLMs for generation and evaluation. Retrieval Matters More Than Prompting. Smaller, precise chunks of 3–5 sentences improved precision over full document retrieval. Direct answer retrieval outperformed matching questions to answers. Deterministic metrics like word overlap failed to capture nuance. LLM as judge worked better for correctness. Clay notebook visualization helped explore vector embeddings interactively. Government answers should be plain and factual. LLMs are oddly well-suited for that.\n\n\n1.8 - Discussion: RAGs and Structured Knowledge\nShared experiences using Clojure for AI projects. Exploring logic programming as a superset of reasoning techniques and unifying them with embeddings and vector logic. Foundational ontologies and their role in structuring knowledge for AI, particularly in medical domains. The conversation fluidly shifted from technical to philosophical and practical.\n\n\n1.9: Noj Deep Dive - Harold & Daniel Slutsky\nUsing Clojure for functional data science, contrasting it with Python tools like Pandas. The focus is on immutability, performance, and leveraging Clojure’s strengths for data processing. Tech.ml.dataset for tabular data processing. Columnar storage for efficiency and integrates with other libraries in the ecosystem. Layered Architecture. Hamfisted high-performance, immutable collections optimized for JVM memory/CPU. Dtype-next array random access and lazy, non-caching transformations. Tablecloth high-level tabular data tools built atop these foundations. Challenges and solutions for integrating with Python via libpython-clj and stdlang. Hamfisted and Dtype-next enable Clojure to match Java/Python performance while retaining functional idioms. 20x speedup in lazy sequences. Columnar storage in TMD reduces memory overhead. Libraries like FastMath, MetamorphML, and Tableplot extend the stack. Real-world applications in consulting and open-source collaboration. Frequent shoutouts to contributors and emphasis on community input via Zulip. If you think data science needs software engineering, you’re right. A blend of technical rigor, community spirit, and practical focus on building scalable, functional data tools.\n\n\n1.10: Brain data in Clojure - Lorelai Lyons\nEthical and Historical Context of Brain-Computer Interfaces. Morally questionable history of neuroscience. Need for ethical considerations in modern BCIs. The goal is to bridge the gap between continuous human thought and discrete computing. Neurons generate electrical signals that can be recorded and digitized. EEG measures brainwave frequencies via electrodes placed on the scalp. EEG data from a motor imagery study. Applied filters to isolate frequency bands. Developing a low-cost binary file system for efficient EEG data storage. Exploring brain-controlled interfaces for creative applications. Consumer EEG devices make brain data collection feasible for programmers. BCIs require collaboration across neuroscience, hardware, and software. Mixed technical depth with ethical reflection.\n\n\n2.1: 1D Viscous Fluid Flow Data Analysis, Burgers’ Equation - Siyoung Byun\nFluid dynamics is complex, involving variables like friction, pressure, and momentum. CFD uses computational methods to simulate fluid behavior, crucial for fields like aerospace, healthcare, and astrophysics. Astrophysics simulations of binary star collisions use CFD. Burgers’ Equation combines nonlinear convection (steepening fluid motion) and viscosity (smoothing/diffusion). Demonstrated via simulations of a shock in a 1D fluid, visualized over time. Used mutable Java arrays for performance. Extending to 2D/3D simulations and incorporate the Navier-Stokes equations for full fluid dynamics. Visualization Matters. Plotting data is critical for interpreting simulations. Siyoung emphasizes the learning process and invites collaboration. Technical but accessible, viscosity effects are explained with analogies. Passion for both astrophysics, fluid dynamics and Clojure shines through. Simulations of white dwarf collisions brought home the realization that star interactions are fluid. Korean ondol floor heating as an analogy for convection.\n\n\n2.2: UK Electricity Demand Time Series Forecasting - Anton Lobach\nThe Taylor dataset contains electricity demand in Wales/England. Extract day of week, minute of day, weekend flag. Ridge regression regularized linear regression to prevent overfitting. Use rolling origin cross-validation. Root Mean Squared Error to measure forecast accuracy. Clojure has expressive, modular workflows with strong data processing capabilities. Seasonality matters. Minute-of-day was the most predictive feature. Ridge regression achieved reasonable accuracy. Split data into train/test sets before exploratory analysis to avoid bias. Use rolling windows for temporal data. The tutorial is available as an interactive notebook.\n\n\n2.3: Tropical cyclone trajectory modelling - K Ram Narayan, Naimish Mani B\nAccurate trajectory forecasting is crucial for disaster preparedness, evacuation planning, and minimizing loss of life and property. Forecasting relies on a mix of satellite data, computer simulations, and aircraft reconnaissance. Using SINDy (Sparse Identification of Nonlinear Dynamics), to extract governing equations from cyclone trajectory data to predict future paths. Global cyclone track dataset. Satellite imagery used to compute wind velocity and shear via optical flow. Incorporates cyclone dynamics to refine SINDy’s candidate equations. Cyclone movement is driven by steering winds, Coriolis force, beta drift, and interactions with pressure systems. Collect trajectory and satellite data. Construct a candidate library of possible dynamical terms. Use Lasso regression to sparsely select the most relevant terms. Derive interpretable differential equations for forecasting. SINDy achieved a 43.71 km mean absolute error, acceptable in cyclone forecasting. Outperformed by gradient boosting, and random forest in single-step prediction but excels in full trajectory forecasting. Bay of Bengal cyclones curve unpredictably due to land effects. Bridges meteorology, physics, and machine learning for cyclone prediction.\n\n\n2.4: Studying planning with a novel video game - Cvetomir Dimov\nPlanning is a fundamental cognitive ability used in everyday tasks. “Tik Tik” game is designed to study planning. Players control a fireball and an ice cube that must collaborate to navigate obstacles and reach targets. A custom program was developed to generate and solve game levels, identifying optimal paths and measuring problem difficulty. Goal is to understand what incentivizes planning. Difficulty influenced by the number of barriers and their intersections. Problem difficulty predictors were the minimum moves needed and the number of possible paths up to the optimal length. Study 1 high dropout rates, large individual differences in planning ability. Study 2 time limits and stricter move limits reduced dropouts and reinforced planning incentives. Tight constraints encourage planning. Problem difficulty can be systematically manipulated for cognitive research. Demonstrations of the game and solver make abstract concepts tangible. Credits multiple software tools, emphasizing a community-driven approach to research.\n\n\n2.5: Building a Data Science Ecosystem in Clojure - Kira Howe\nInspiration from the Tidyverse (R). A cohesive ecosystem with shared design principles on data and composable tools. Standardized data structures and streamline workflows. Fragmented tools create glue code overhead. Immutable data and pure functions enable reproducibility. JVM handles large-scale data efficiently. Engineering culture emphasis on stability and interoperability. Explosive data growth demands scalable, deterministic tools. Noj as a Clojure based ecosystem inspired by Tidyverse but optimized for scalability and engineering. Simplify onboarding through Jupyter support and Clojure in a box. Need for Shiny-like tools for rapid prototyping. Emphasized grassroots community building and learning together. Data quality should be a philosophy, not an afterthought.\n\n\n2.6: Macroexpand-1\nWays to broaden Clojure’s impact beyond its traditional domains by fostering interdisciplinary collaboration. Need to make Clojure more accessible and visible in fields like data science, education, and specialized industries. Improve tooling, documentation, and community outreach. Developer intuitive libraries, enhancing interoperability with other languages. Lowering barriers for newcomers. Importance of geospatial analysis and modern programming practices. Sustainable community efforts and cross-disciplinary knowledge sharing.\n\n\n2.7: The Impact of Lane Reductions - Heather Moore-Farley\nReducing car lanes, protected bike lanes, and pedestrian crossings decrease traffic injuries and fatalities. California’s crash data used to visualize collision hotspots to push for safer street redesigns. High injury corridors 6% of streets cause 60% of severe/fatal crashes. Correlated lane reductions, protected bike lanes, and raised bus stops led to fewer crashes over time. Local groups use data to advocate for safer streets. Police reported crash data has missing ages, locations and underreporting driver fault. Heather shares her lived experience as a car-free parent in Oakland, tying data to safety. Design solutions and community action work. Advocating for upcoming redesigns. A compelling mix of data science, urbanism, and grassroots advocacy. Number crunching can drive tangible change."
  },
  {
    "objectID": "pages.html",
    "href": "pages.html",
    "title": "Pages",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n      \n        Author\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nExplorer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAuthors\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "scicloj/cfd/data_viz/interactive_visualization.html",
    "href": "scicloj/cfd/data_viz/interactive_visualization.html",
    "title": "Exploring Time Series Data Visualization",
    "section": "",
    "text": "In my earlier post, I demonstrated how to implement a linear fluid dynamics simulation (linear convection equation) using primitive Java arrays in a one-dimensional setting. The example showed how the flow velocity array gets recalculated and overwritten during each loop iteration, with each loop representing a time step in our simulation.\nWhile some readers might be satisfied with just seeing the final result, others are likely curious the process that produces the final outcome. What if we could watch this process in real-time? What patterns emerge as the simulation progresses?\nThis time, I want to show how to create a simple, but more engaging and interactive visualization. Instead of simply overwriting arrays as we iterate through our simulation loop, we will accumulate each result into a sequence.\nOnce gain, we’ll use the 1-D linear convection equation from fluid dynamics as our playground (and reuse some code from the previous post). The main focus of this post is on creating interactive plots that make simulation results more visually interesting, so we won’t dive too deep into physical implications (though the visual results might just inspire you to explore that side too! 😉)."
  },
  {
    "objectID": "scicloj/cfd/data_viz/interactive_visualization.html#simulation-code",
    "href": "scicloj/cfd/data_viz/interactive_visualization.html#simulation-code",
    "title": "Exploring Time Series Data Visualization",
    "section": "Simulation Code",
    "text": "Simulation Code\nHere is a simulation function we will use to accumulate the results:\n\n(defn simulate-accumulate!\n  \"Simulate linear convection for given a given numer of times(nt) and accumulate\n  all intermediate states.\n\n  Args:\n  - array-u: initial velocity field as a mutable array\n             (note: we're reusing some codes from the previous post)\n  - params: a config map with required keys: nt, nx, c, dx, and dt\n\n  Returns a vector of (nt + 1) velocity field vectors, where each vector represents\n  the velocity field at a specific time step.\"\n  [array-u {:keys [nt]\n            :as   params}]\n  (loop [n    0\n         !cum (transient [(vec array-u)])]\n    (if (= n nt)\n      (persistent! !cum)\n      (recur (inc n) (conj! !cum (vec (lin-conv/mutate-linear-convection-u array-u params)))))))\n\nThen we run the simulation and store the accumulated results:\n\n(def accumulated-u (simulate-accumulate! initial-arr-u init-params))"
  },
  {
    "objectID": "scicloj/cfd/data_viz/interactive_visualization.html#data-visualization",
    "href": "scicloj/cfd/data_viz/interactive_visualization.html#data-visualization",
    "title": "Exploring Time Series Data Visualization",
    "section": "Data Visualization",
    "text": "Data Visualization\nWe have a vector of numbers representing velocity values. With certain conditions, we want to visualize how these numbers change over time. We will use Vega-Lite’s line plots for our visualization.\nFirst, we need a function that transforms accumulated results into Vega-Lite data format by flattening time-series velocity fields into individual data points with time step indices:\n\n(defn accumulated-u-&gt;vega-data-values [{:keys [array-x accumulated-u]}]\n  (apply concat\n    (map-indexed\n      (fn [idx u-i]\n        (map #(hash-map :idx idx :x % :y %2) array-x u-i))\n      accumulated-u)))\n\n\nMulti-Series Overlay Plot\nIn this first visualization, we show the simulation results as changes over time in one plot. Since showing all 101 time steps in one plot may not be very useful, we take every 10th result, and overlay each of those line plots into a single one.\nThe plotting data is grouped by idx(time step), which produces a multi-series colored line plot.\n\n(let [[init-u & rest-u] accumulated-u\n      plot-data (-&gt;&gt; rest-u\n                     (partition-all 10)\n                     (map last)\n                     (into [init-u])\n                     (assoc plot-params :accumulated-u)\n                     (accumulated-u-&gt;vega-data-values))]\n  (kind/vega-lite (merge default-plot-width-height-map\n                         {:data     {:values plot-data}\n                          :mark     \"line\"\n                          :encoding {:x     {:field \"x\" :type \"quantitative\" :title \"X\"}\n                                     :y     {:field \"y\" :type \"quantitative\" :title \"Flow Velocity\" :scale {:domain default-y-domain}}\n                                     :color {:field \"idx\" :type \"nominal\" :legend nil}}})))\n\n\n\n\nInteractive Time Step Plot\nIn this second visualization, the plot includes an interactive slider that allows you to select a particular time step(idx) to visualize the velocity field at that specific moment.\nThis interactive slider is implemented using Vega-Lite’s parameter binding feature.\n\n(let [select-dt-name \"selectedDt\"\n      initial-dt     0\n      dt-step        1\n      dt-field       \"idx\"]\n  (kind/vega-lite (merge\n                   default-plot-width-height-map\n                   {:data      {:values (accumulated-u-&gt;vega-data-values plot-params)}\n                    :transform [{:filter (str \"datum.\" dt-field \" == \" select-dt-name)}]\n                    :params    [{:name  select-dt-name\n                                 :value initial-dt\n                                 :bind  {:input \"range\"\n                                         :name  \"Time interval idx: \"\n                                         :min   initial-dt\n                                         :max   (:nt plot-params)\n                                         :step  dt-step}}]\n                    :mark      \"line\"\n                    :encoding  {:x {:field \"x\"\n                                    :type  \"quantitative\"\n                                    :title \"X\"}\n                                :y {:field \"y\"\n                                    :type  \"quantitative\"\n                                    :title \"Flow Velocity\"\n                                    :scale {:domain default-y-domain}}}})))"
  },
  {
    "objectID": "scicloj/cfd/data_viz/interactive_visualization.html#wrapping-up",
    "href": "scicloj/cfd/data_viz/interactive_visualization.html#wrapping-up",
    "title": "Exploring Time Series Data Visualization",
    "section": "Wrapping Up",
    "text": "Wrapping Up\nWhat started as simple primitive Java array manipulation has evolved into something much more engaging! By accumulating our simulation states instead of overwriting those, we’ve made some progress to create interactive visualizations to be able to describe the temporal dynamics of our fluid dynamics simulation.\nThis exploration originally began while I was preparing a talk for the SciCloj Light conference, where I wanted to explore better storytelling through data visualization.\nSo far, I’ve only scratched the surface of what’s possible. Beyond Vega-Lite, many other visualization tools offer diverse options to be creative and make data come alive. I believe interactive visualizations can transform dry numbers into compelling stories.\nI’ll continue exploring these possibilities and share more discoveries along the way if I find any! ✨\n\nsource: src/scicloj/cfd/data_viz/interactive_visualization.clj"
  },
  {
    "objectID": "scicloj/macroexpand/macroexpand_2025.html",
    "href": "scicloj/macroexpand/macroexpand_2025.html",
    "title": "Macroexpand 2025 by Scicloj",
    "section": "",
    "text": "Since 2019, Scicloj has played a key role in supporting Clojure growth to new domains. In particular, it has nurtured a love for data science, scientific computing, and specialized use cases in Clojure-growing into a strong and supportive community.\nOne of many highlights of the journey is Noj, a toolkit designed to streamline data science workflows in Clojure. Its development wouldn’t have been possible without the amazing contribution from the community, and it remains an active and evolving project.\nSince last year, we’ve taken meaningful steps forward: not only by continuing to support Scicloj’s rich ecosystem of open-source data science projects, but also by connecting with newcomers. Our first online conference, Scinoj Light, held in May 2025, brought together diverse data analysis stories and community building sessions to show the charm of Clojure in data science. We have received much positive feedback and many favorable reactions from the attendees.\nNow, building on that momentum, we’re excited to announce Macroexpand 2025, taking place in October 2025 — a pair of online conferences designed further to deepen and broaden our community: Macroexpand-Noj and Macroexpand-Deep."
  },
  {
    "objectID": "scicloj/macroexpand/macroexpand_2025.html#expanding-community-and-support-through-macroexpand",
    "href": "scicloj/macroexpand/macroexpand_2025.html#expanding-community-and-support-through-macroexpand",
    "title": "Macroexpand 2025 by Scicloj",
    "section": "",
    "text": "Since 2019, Scicloj has played a key role in supporting Clojure growth to new domains. In particular, it has nurtured a love for data science, scientific computing, and specialized use cases in Clojure-growing into a strong and supportive community.\nOne of many highlights of the journey is Noj, a toolkit designed to streamline data science workflows in Clojure. Its development wouldn’t have been possible without the amazing contribution from the community, and it remains an active and evolving project.\nSince last year, we’ve taken meaningful steps forward: not only by continuing to support Scicloj’s rich ecosystem of open-source data science projects, but also by connecting with newcomers. Our first online conference, Scinoj Light, held in May 2025, brought together diverse data analysis stories and community building sessions to show the charm of Clojure in data science. We have received much positive feedback and many favorable reactions from the attendees.\nNow, building on that momentum, we’re excited to announce Macroexpand 2025, taking place in October 2025 — a pair of online conferences designed further to deepen and broaden our community: Macroexpand-Noj and Macroexpand-Deep."
  },
  {
    "objectID": "scicloj/macroexpand/macroexpand_2025.html#macroexpand-noj",
    "href": "scicloj/macroexpand/macroexpand_2025.html#macroexpand-noj",
    "title": "Macroexpand 2025 by Scicloj",
    "section": "Macroexpand-Noj",
    "text": "Macroexpand-Noj\nMacroexpand-Noj centers around the growth and application of the Noj toolkit in real-world data science. It will feature talks that showcase practical projects, highlight new tools and libraries in the ecosystem, and share efforts around documentation, theoretical insights, and methodology. Whether you’re a newcomer or an experienced Clojurian, our goal is that you find sessions that help you learn, explore, and contribute.\nWe will include follow-ups from Scinoj Light, practical use cases of Noj in data workflows, and discussions of newly emerging features that strengthen the Clojure data science experience."
  },
  {
    "objectID": "scicloj/macroexpand/macroexpand_2025.html#macroexpand-deep",
    "href": "scicloj/macroexpand/macroexpand_2025.html#macroexpand-deep",
    "title": "Macroexpand 2025 by Scicloj",
    "section": "Macroexpand-Deep",
    "text": "Macroexpand-Deep\nMacroexpand-Deep is the first Scicloj conference dedicated to AI system research and applications in Clojure. By “AI systems”, we generally mean systems that combine deep learning networks with other components, though broader interpretations are welcome and encouraged.\nThe conference will explore how to build systems using large language models and vector embeddings, experiment with algorithms in specific domains, and train custom neural network architectures, and study the behavior of trained networks. We will also cover the creation and improvement of supporting tools and infrastructure that enable this kind of work in Clojure."
  },
  {
    "objectID": "scicloj/macroexpand/macroexpand_2025.html#call-for-proposals-share-your-work",
    "href": "scicloj/macroexpand/macroexpand_2025.html#call-for-proposals-share-your-work",
    "title": "Macroexpand 2025 by Scicloj",
    "section": "📢 Call for Proposals: Share Your Work!",
    "text": "📢 Call for Proposals: Share Your Work!\nWe’re now inviting proposals for talks at Macroexpand 2025!\nWhether you’re working on a new idea, experimenting with a prototype, building tools, exploring data, writing documentation, or reflecting on your process, we would like to hear from you!\nYou don’t need to have everything figured out. If you’re unsure whether your idea is “ready” or how to shape your talk, we’re here to help you brainstorm, refine, and prepare. We believe that learning, progress, and curiosity are worth sharing and valuable at any stage.\nWe also encourage first-time speakers and newcomers to Clojure to join. The community is supportive, and we’ll be happy to help every step of the way.\n➡️ Learn more and submit your idea via the Speakers page."
  },
  {
    "objectID": "scicloj/macroexpand/macroexpand_2025.html#our-vision-for-macroexpand-2025",
    "href": "scicloj/macroexpand/macroexpand_2025.html#our-vision-for-macroexpand-2025",
    "title": "Macroexpand 2025 by Scicloj",
    "section": "Our Vision for Macroexpand 2025",
    "text": "Our Vision for Macroexpand 2025\nMacroexpand is a space for sharing real progress—whether you’re improving documentation, exploring new ideas, building tools, or reporting on experiments. We aim to support projects at all stages and in all forms: from early prototypes to mature tools.\nIf you’re interested, have an idea, or just want to chat—we’d love to hear from you. Feel free to reach out!. Let’s explore together ✨\n\nsource: src/scicloj/macroexpand/macroexpand_2025.clj"
  },
  {
    "objectID": "scicloj/kindly_render/visualize_colls.html",
    "href": "scicloj/kindly_render/visualize_colls.html",
    "title": "Collections as grids with borders",
    "section": "",
    "text": "A key idea of Lisp is that all syntax is a list\n\n()\n\n\n()\n\nRich innovated by introducing collection literals\n\n[]\n\n\n[]\n\n\n{}\n\n\n{}\n\n\n#{}\n\n\n#{}\n\nData is well represented by these collections\n\n(def data\n  {:numbers [2 9 -1]\n   :sets    #{\"hello\" \"world\"}\n   :mix     [1 \"hello world\" (kind/hiccup [:div \"hello\" [:strong \"world\"] \"hiccup\"])]\n   :nest    {:markdown             (kind/md \"hello **markdown**\")\n             :number               9999\n             :nothing-is-something #{nil #{} 0}}\n   :dataset (tc/dataset {:x (range 3)\n                         :y [:A :B :C]})})\n\nIn a notebook, we like to visualize values. Often those visualizations summarize the data in some way.\n\nThe collection represents something\nThe collection organizes some things\nWe are interested in the collection itself\n\nIn website design, everything is a grid. Grids organize and align content, achieving visual hierarchy. Can we apply this idea to data structures? Let’s start with a vector:\n\n(def v [1 2 3 4 5 6 7 8 9])\n\n\nv\n\n\n[1 2 3 4 5 6 7 8 9]\n\nPretty printing the vector is a fine choice, but what if we made it a grid?\n\n(defn content [x columns]\n  (kind/hiccup\n    (into [:div {:style {:display               :grid\n                         :grid-template-columns (str \"repeat(\" columns \", auto)\")\n                         :align-items           :center\n                         :justify-content       :center\n                         :text-align            :center\n                         :padding               \"10px\"}}]\n          x)))\n\n\n(defn vis [x opt]\n  (kind/hiccup\n    [:div {:style {:display               \"grid\"\n                   :grid-template-columns \"auto auto auto\"\n                   :gap                   \"0.25em\"\n                   :align-items           \"center\"\n                   :justify-content       \"center\"}}\n     [:div {:style {:padding     \"0 0.25em\"\n                    :font-weight :bold\n                    :align-self  (when opt \"start\")\n                    :align-items (when-not opt \"stretch\")}}\n      \"[\"]\n     (content x 1)\n     [:div {:style {:padding     \"0.25em\"\n                    :font-weight :bold\n                    :align-self  (when opt \"end\")\n                    :align-items (when-not opt \"stretch\")}}\n      \"]\"]]))\n\nIn some situations this feels better, especially when nesting visualizations. But it does raise the question of where the braces belong.\n\n(vis v false)\n\n[123456789]\n\n(vis v true)\n\n[123456789]\nAnother idea is to use borders to indicate collections.\n\n(defn vis2 [x]\n  (kind/hiccup\n    [:div {:style {:border-left  \"2px solid blue\"\n                   :border-right \"2px solid blue\"}}\n     (content x 1)]))\n\n\n(vis2 v)\n\n123456789\nBorders can be stylized with images\n\n(defn svg [& body]\n  (kind/hiccup\n    (into [:svg {:xmlns        \"http://www.w3.org/2000/svg\"\n                 :width        100\n                 :height       100\n                 :viewBox      [-100 -100 200 200]\n                 :stroke       :currentColor\n                 :fill         :none\n                 :stroke-width 4}\n           body])))\n\n\n(defn border-style [x]\n  {:border              \"30px solid transparent\"\n   :border-image-slice  \"30\"\n   :border-image-source (str \"url('data:image/svg+xml;utf8,\"\n                             (hiccup/html {:mode :xml} x)\n                             \"')\")\n   :border-image-repeat \"round\"})\n\nWe can create a curly brace shape to use as the border\n\n(def curly-brace-path\n  \"M -10 -40 Q -20 -40, -20 -10, -20 0, -30 0 -20 0, -20 10, -20 40, -10 40\")\n\n\n(def map-svg\n  (svg (for [r [0 90 180 270]]\n         [:path {:transform (str \"rotate(\" r \") translate(-30) \")\n                 :d         curly-brace-path}])))\n\n\nmap-svg\n\n\n\n(def map-style\n  (border-style map-svg))\n\n\n(defn vis3 [style columns x]\n  (kind/hiccup [:div {:style style} (content x columns)]))\n\nWe now have a style that can be used to indicate something is a map\n\n(vis3 map-style 2 (vec (repeat 10 [:div \"hahaha\"])))\n\nhahahahahahahahahahahahahahahahahahahahahahahahahahahahahaha\nUsually we’d put this in a CSS rule, I’m just illustrating what it would look like.\n\n(def set-svg\n  (svg\n    [:line {:x1 -80 :y1 -20 :x2 -80 :y2 20}]\n    [:line {:x1 -70 :y1 -20 :x2 -70 :y2 20}]\n    [:line {:x1 -90 :y1 10 :x2 -60 :y2 10}]\n    [:line {:x1 -90 :y1 -10 :x2 -60 :y2 -10}]\n    (for [r [0 90 180 270]]\n      [:path {:transform (str \"rotate(\" r \") translate(-30) \")\n              :d         curly-brace-path}])))\n\nA set could have a hash on the left\n\nset-svg\n\n\n\n(def set-style (border-style set-svg))\n\n\n(vis3 set-style 1 (vec (repeat 10 [:div \"hahaha\"])))\n\nhahahahahahahahahahahahahahahahahahahahahahahahahahahahahaha\nSets could instead have a Venn inspired border\n\n(def set2-svg\n  (svg\n    (for [r [0 90 180 270]]\n      [:g {:transform (str \"rotate(\" r \")\")}\n       [:ellipse {:cx -60 :cy -15 :rx 12 :ry 25}]\n       [:ellipse {:cx -60 :cy 15 :rx 12 :ry 25}]])))\n\n\nset2-svg\n\n\n\n(def set2-style (border-style set2-svg))\n\n\n(vis3 set2-style 1 (vec (repeat 10 [:div \"hahaha\"])))\n\nhahahahahahahahahahahahahahahahahahahahahahahahahahahahahaha\nBut I think it’s better to use the more obvious # hash.\n\n(def sequence-svg\n  (svg\n    (for [r [0 90 180 270]]\n      [:g {:transform (str \"rotate(\" r \")\")}\n       [:circle {:r 75}]])))\n\n\nsequence-svg\n\n\nParenthesis style border for sequences\n\n(def sequence-style (border-style sequence-svg))\n\n\n(vis3 sequence-style 1 (vec (repeat 10 [:div \"hahaha\"])))\n\nhahahahahahahahahahahahahahahahahahahahahahahahahahahahahaha\n\n(def vector-svg\n  (svg\n    (for [r [0 90 180 270]]\n      [:g {:transform (str \"rotate(\" r \")\")}\n       [:path {:d \"M -65 -65 v 10 \"}]\n       [:path {:d \"M -65 65 v -10 \"}]\n       [:path {:d \"M -65 -30 H -75 V 30 H -65\"}]])))\n\n\nvector-svg\n\n\nAnd rectangular brace style border for vectors\n\n(def vector-style (border-style vector-svg))\n\n\n(vis3 vector-style 1 (vec (repeat 10 [:div \"hahaha\"])))\n\nhahahahahahahahahahahahahahahahahahahahahahahahahahahahahaha\nNesting collections\n\n(vis3 map-style 2\n      [:some-key (vis3 vector-style 1 v)\n       :some-other (vis3 set-style 1 (repeat 5 (vis3 sequence-style 1 [\"ha\" \"ha\" \"ha\"])))])\n\nsome-key123456789some-otherhahahahahahahahahahahahahahaha\nI think this scheme achieves a visually stylized appearance. It maintains the expected hierarchy. And it is fairly obvious what collections are represented.\nWhat do you think?\n\nsource: src/scicloj/kindly_render/visualize_colls.clj"
  },
  {
    "objectID": "scicloj/clay/presenting_presentations-revealjs.html#how-to-make-a-slideshow",
    "href": "scicloj/clay/presenting_presentations-revealjs.html#how-to-make-a-slideshow",
    "title": "Presenting your namespace",
    "section": "How to make a slideshow",
    "text": "How to make a slideshow\nAdd a little metadata to your namespace 🪄\n^{:clay {:format [:quarto :revealjs]}\n(ns my.awesome.idea)\n..."
  },
  {
    "objectID": "scicloj/clay/presenting_presentations-revealjs.html#the-slides",
    "href": "scicloj/clay/presenting_presentations-revealjs.html#the-slides",
    "title": "Presenting your namespace",
    "section": "The slides",
    "text": "The slides\nWrite comments\n;; Markdown **in my comments**\nCode\n\n(+ 1 2)\n\n\n3\n\nand headings\n;; Each heading is a slide"
  },
  {
    "objectID": "scicloj/clay/presenting_presentations-revealjs.html#turn-data-into-html",
    "href": "scicloj/clay/presenting_presentations-revealjs.html#turn-data-into-html",
    "title": "Presenting your namespace",
    "section": "Turn data into HTML",
    "text": "Turn data into HTML\n\n(kind/hiccup\n  [:svg {:width \"100%\"}\n   [:circle {:r 40 :cx 50 :cy 50 :fill \"lightblue\"}]\n   [:circle {:r 20 :cx 50 :cy 50 :fill \"lightgreen\"}]])"
  },
  {
    "objectID": "scicloj/clay/presenting_presentations-revealjs.html#powerful-visualizations",
    "href": "scicloj/clay/presenting_presentations-revealjs.html#powerful-visualizations",
    "title": "Presenting your namespace",
    "section": "Powerful visualizations",
    "text": "Powerful visualizations\n\n(-&gt; (rdatasets/datasets-iris)\n    (plotly/layer-point\n      {:=x :sepal-length\n       :=y :sepal-width}))"
  },
  {
    "objectID": "scicloj/clay/presenting_presentations-revealjs.html#thats-it",
    "href": "scicloj/clay/presenting_presentations-revealjs.html#thats-it",
    "title": "Presenting your namespace",
    "section": "That’s it!",
    "text": "That’s it!\nCreate src/your/idea.clj as a Clojure namespace\nSubmit a PR to the ClojureCivitas repo\nVoilà — you’ve published your presentation.\n🌱\nWhy not turn your next idea into a slideshow?\n\nsource: src/scicloj/clay/presenting_presentations.clj"
  },
  {
    "objectID": "scicloj/clay/uncompiled_clojurescript.html",
    "href": "scicloj/clay/uncompiled_clojurescript.html",
    "title": "The Sandwich Approach to ClojureScript Development",
    "section": "",
    "text": "Imagine you’re making breakfast for your significant other one morning, you just cracked the eggs into a frypan and they call out “poached please”. What do you do? No need to start over, just add some water. That’s the spirit of hot reload; keep your state and adjust the functions.\nThis kind of fluid adaptation is exactly what we want in our development workflow. Let’s see how to cook up that experience with two key ingredients."
  },
  {
    "objectID": "scicloj/clay/uncompiled_clojurescript.html#the-main-ingredient-scittle",
    "href": "scicloj/clay/uncompiled_clojurescript.html#the-main-ingredient-scittle",
    "title": "The Sandwich Approach to ClojureScript Development",
    "section": "The Main Ingredient: Scittle",
    "text": "The Main Ingredient: Scittle\nScittle by the amazing borkdude is a ClojureScript interpreter that runs in the browser. No build step, no config, just static files. That makes it perfect to include in Clay notebooks like this one.\nWhen you’re hungry, do you always cook a gourmet meal? Sometimes you just want to make a quick sandwich. Grab what you need, slap it together, and start eating. No prep work, no cleanup. That’s Scittle. Quick, simple, satisfying ClojureScript without the ceremony. Sometimes you don’t need the full kitchen setup with build tools and configurations.\nClay lets us interleave plain Hiccup with Reagent/Scittle components:\n\n(kind/hiccup\n [:div [:strong \"Hello from Hiccup (Clojure)\"]\n  ['(fn []\n      [:em \"Hello from Scittle/Reagent (ClojureScript)\"])]])\n\nHello from Hiccup (Clojure)\nBut because Clay serves HTML, re-evaluating this namespace normally reloads the whole page. Wouldn’t it be great to get a Figwheel/shadow-cljs style experience where code updates in place?\n\n\n\n\n\n\nNote\n\n\n\nHot Reloading injects only the modified code into the running application without restarting it entirely. This allows you to preserve state and treat the browser like a REPL."
  },
  {
    "objectID": "scicloj/clay/uncompiled_clojurescript.html#the-inspiration-hot-reload-scittle",
    "href": "scicloj/clay/uncompiled_clojurescript.html#the-inspiration-hot-reload-scittle",
    "title": "The Sandwich Approach to ClojureScript Development",
    "section": "The Inspiration: Hot Reload Scittle",
    "text": "The Inspiration: Hot Reload Scittle\nChris McCormick showed us something clever with cljs-josh: Scittle code can be hot-reloaded. Here’s his demo:\n\nWe’ll take that idea but do it the Clay way, using Clay’s live reload to manage our pages."
  },
  {
    "objectID": "scicloj/clay/uncompiled_clojurescript.html#clay-can-hot-reload-scittle",
    "href": "scicloj/clay/uncompiled_clojurescript.html#clay-can-hot-reload-scittle",
    "title": "The Sandwich Approach to ClojureScript Development",
    "section": "Clay Can Hot Reload Scittle",
    "text": "Clay Can Hot Reload Scittle\nHere’s the code in our ClojureScript file:\nuncompiled.cljs:\n\n(ns scicloj.clay.uncompiled\n  (:require [reagent.dom :as rdom]))\n\n(rdom/render\n [:div \"Hello from a ClojureScript file (uncompiled.cljs)\"]\n (js/document.getElementById \"app\"))\n\nWe need a target div for uncompiled.cljs to render into, and we load it via Scittle:\n\n(kind/hiccup\n [:div#app\n  [:script {:type \"application/x-scittle\"\n            :src \"uncompiled.cljs\"}]])"
  },
  {
    "objectID": "scicloj/clay/uncompiled_clojurescript.html#turn-up-the-heat",
    "href": "scicloj/clay/uncompiled_clojurescript.html#turn-up-the-heat",
    "title": "The Sandwich Approach to ClojureScript Development",
    "section": "Turn Up the Heat",
    "text": "Turn Up the Heat\nTime to get cooking! Clay needs :live-reload true to simmer. You can fire it up from the command line, via editor integration, or drop this in your REPL:\n(require '[scicloj.clay.v2.snippets :as snippets])\n(snippets/watch! {})\nNow whenever you save a .cljs file, the change is injected into the current Clay page without a full reload.\nIf you prefer editor integration, bind a key to call scicloj.clay.v2.server/scittle-eval-string! on the current form.\n\n\n\n\n\n\nTip\n\n\n\nTo take full advantage of hot reload with Reagent, use defonce for app state. This preserves atoms/ratoms across code swaps."
  },
  {
    "objectID": "scicloj/clay/uncompiled_clojurescript.html#a-taste-test",
    "href": "scicloj/clay/uncompiled_clojurescript.html#a-taste-test",
    "title": "The Sandwich Approach to ClojureScript Development",
    "section": "A Taste Test",
    "text": "A Taste Test\nLet’s walk through a small example to see hot reload in action. I recommend copying these snippets into uncompiled2.cljs and saving as you go. First, we’ll set up our ingredients (app state):\n(ns scicloj.clay.uncompiled2\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]))\n\n(defonce app-state    ; &lt;- defonce preserves state during reload\n  (r/atom {:style \"scrambled\"\n           :eggs 2}))\nNext, we’ll create a simple component to display our breakfast order:\n(defn breakfast-order []\n  [:div\n   [:h3 \"Breakfast Order\"]\n   [:p \"Style: \" (:style @app-state)]\n   [:p \"Eggs: \" (:eggs @app-state)]])\n\n(rdom/render\n  [breakfast-order]\n  (js/document.getElementById \"app2\"))\nWe want to be able to change cooking styles.\n(defn cycle-style []\n  (swap! app-state update :style\n         {\"scrambled\" \"fried\"\n          \"fried\" \"poached\"\n          \"poached\" \"scrambled\"}))\nAnd while we’re at it, let’s add controls for the number of eggs:\n(defn add-egg []\n  (swap! app-state update :eggs inc))\n\n(defn remove-egg []\n  (swap! app-state update :eggs #(max 1 (dec %))))\nNow we can update our component to use these functions.\n(defn breakfast-order []\n  [:div\n   [:h3 \"Breakfast Order\"]\n   [:div\n    [:p \"Style: \" [:strong (:style @app-state)]]\n    [:button {:onClick cycle-style} \"Change Style\"]]\n   [:div\n    [:p \"Eggs: \" (:eggs @app-state)]\n    [:button {:onClick remove-egg\n              :disabled (= 1 (:eggs @app-state))} \"−\"]\n    [:button {:onClick add-egg} \"+\"]]\n   [:div\n    (case (:style @app-state)\n      \"poached\" \"Water added for poaching...\"\n      \"fried\" \"Turn n burn!\"\n      \"scrambled\" \"Whisking away...\")]])\nIf you are running this locally, notice how we keep the same state while adding new features. Each time we save the ClojureScript file, our app updates but keeps its current state.\nHere’s the final result of our cooking:\n\n(kind/hiccup\n [:div#app2\n  [:script {:type \"application/x-scittle\"\n            :src \"uncompiled2.cljs\"}]])\n\n\nWe replaced functions on the fly while our state lives on. The new code creates a fresh experience without losing where we were. Just like adding water to the pan."
  },
  {
    "objectID": "scicloj/clay/uncompiled_clojurescript.html#gotchas",
    "href": "scicloj/clay/uncompiled_clojurescript.html#gotchas",
    "title": "The Sandwich Approach to ClojureScript Development",
    "section": "Gotchas",
    "text": "Gotchas\nLike any recipe, there are a few things to watch out for when cooking with Clay and Scittle. The main one is making sure you have all your ingredients (dependencies) ready.\nChoose one of these three ways to include your dependencies:\n\nLet Clay add them automatically when it sees you need them (like in this post’s first example)\nExplicitly request them by adding :kindly/options {:html/deps [:scittle :reagent]} to your namespace metadata\nReference specific versions as JavaScript resources:\n\n^:kindly/hide-code\n(kindly/hiccup\n [:div\n  [:script {:src \"https://cdn.jsdelivr.net/npm/scittle@0.7.23/dist/scittle.js\"}]\n  [:script {:crossorigin true\n            :src \"https://cdn.jsdelivr.net/npm/react@18/umd/react.production.min.js\"}]\n  [:script {:crossorigin true\n            :src \"https://cdn.jsdelivr.net/npm/react-dom@18/umd/react-dom.production.min.js\"}]\n  [:script {:src \"https://cdn.jsdelivr.net/npm/scittle@0.7.23/dist/scittle.reagent.js\"}]])\nIf you see errors in the browser console like “reagent is not defined” or “Cannot read properties of undefined”, it usually means a dependency isn’t loaded."
  },
  {
    "objectID": "scicloj/clay/uncompiled_clojurescript.html#why-go-light",
    "href": "scicloj/clay/uncompiled_clojurescript.html#why-go-light",
    "title": "The Sandwich Approach to ClojureScript Development",
    "section": "Why Go Light?",
    "text": "Why Go Light?\nA Michelin-star kitchen is a marvel of efficiency. Sous chefs prepping ingredients, line cooks at their stations, everything precisely mise en place. That’s your typical ClojureScript setup. Build tools, asset compilation, development servers, and careful configuration.\nBut sometimes you just want to slap some cold cuts and cheese in a sandwich and start munching. That’s Scittle. Quick, simple, and satisfying. No waiting for the kitchen to warm up, no cleanup afterward. Write some code and see it work.\n\n\n\nSandwich creation workspace"
  },
  {
    "objectID": "scicloj/clay/uncompiled_clojurescript.html#chefs-notes",
    "href": "scicloj/clay/uncompiled_clojurescript.html#chefs-notes",
    "title": "The Sandwich Approach to ClojureScript Development",
    "section": "Chef’s Notes",
    "text": "Chef’s Notes\nClay blends the traditional with the experimental. Write a namespace, get a webpage. Add some Scittle, get interactive components.\nMagic happens when Clay handles changes:\n\nFor your narrative and page structure in Clojure, live reload refreshes the whole page\nFor your Scittle components, hot reload updates only the code, keeping state alive\n\nThis is especially sweet when you’re cooking up mini-games with MatterJS. Tweak physics parameters or game logic, and watch them take effect as soon as you save.\nRemember how we started with those poached eggs? Maybe they were destined for a sandwich all along. That’s the beauty of this approach. Start simple, stay flexible, and build what you need. Clay lets you shape your story with markdown, spice it up with interactive widgets, and adjust the ingredients. That’s the kind of flow that keeps creative coding delicious.\n\nsource: src/scicloj/clay/uncompiled_clojurescript.clj"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Clojure Civitas makes it easy for you to publish Clojure ideas and explorations without the overhead of setting up a new project, blog, or repo. Whether you’re sketching out a quick experiment or writing a deeper post, just fork this repo, create a namespace, write, commit and submit a pull request. This is your shared scratch space."
  },
  {
    "objectID": "about.html#usage",
    "href": "about.html#usage",
    "title": "About",
    "section": "Usage",
    "text": "Usage\n\nFork the Clojure Civitas repository\nAdd your new namespace to src\nWrite code and markdown comments\nSubmit a pull request\nPublished\n\nSee README.md for more information, or browse the existing namespaces in src."
  },
  {
    "objectID": "about.html#rationale",
    "href": "about.html#rationale",
    "title": "About",
    "section": "Rationale",
    "text": "Rationale\nNamespaces with markdown comments are a natural fit for interactive, literate programming. ClojureCivitas makes it easy to experience the pleasure of this style of coding. Build up an idea in your REPL, in your favorite editor, and share it with others.\nProblem: There is incidental complexity in literate programming setup and publishing. Creating a new project, configuring a blog, choosing themes and styling, organizing files, adding analytics, and thinking about SEO all add overhead. This friction gets in the way of creativity, exploration, writing, and sharing. Many people are missing out on the joy of interactive programming as a tool for thought.\nSolution: A clear path for publishing Clojure ideas and explorations.\nHope: As writers share their ideas, readers are encouraged to try literate programming, and share their own insights and experiments.\n\nWhy markdown in code?\nWe value reproducible artifacts. Start with code. Make it work. Then tell the story.\n\n\nMake Publishing Clojure Namespaces Easy\nCreators should only have to care about their code, not setting up projects or hosting workflows. Let’s make a shared, organized platform for short experiments, tutorials, notes, and blog posts.\n\n\nBuild a Database of Knowledge\nCivitas aggregates structured metadata about the content it hosts and links it to other Clojure resources. We can build a connected web of ideas, showing how concepts relate, what builds on what, and where to go next. A hex-grid interface presents these relationships visually. Each notebook can declare prerequisites, alternatives, and follow-ups. This helps learners discover next steps, helps educators design coherent learning paths, and enables the community to improve content over time. The goal is to make the Clojure knowledge ecosystem easier to explore and navigate.\n\n\n\nNon-linear exploration\n\n\nNavigate your own path through interconnected topics.\n\n\n\n\nLiterate by design\n\n\nWrite notebooks and situate them in a broader context by linking ideas.\n\n\n\n\nCommunity supported growth\n\n\nThe best resources rise through collective refinement.\n\n\n\nAn open effort to structure learning resources with meaningful connections.\n\n\nEmbrace Alternatives\nClojure Civitas does not aim to centralize Clojure knowledge. Rather it hopes to amplify existing resources, connect with them, and add a place in between for raw ideas and creative experiments."
  },
  {
    "objectID": "about.html#how-it-works",
    "href": "about.html#how-it-works",
    "title": "About",
    "section": "How it Works",
    "text": "How it Works\n\nMinimal Moderation and Curation\nContent is submitted via Pull Requests, which are reviewed to prevent abuse. A small team of reviewers ensures quick turnaround. Community representatives are available to assist and guide contributors.\n\n\nMetadata Creation\nMetadata is provided by authors. Future improvements may include automated extraction and smarter linking to enrich the knowledge base.\n\n\nAnalytics\nPage view analytics are publicly available. See the Clojure Civitas Analytics Dashboard.\n\n\nTechnical Details\nMade with Clay. See the README.md in the repository for contribution guidelines and technical details."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Clojure Civitas",
    "section": "",
    "text": "About Posts Authors Explorer"
  },
  {
    "objectID": "internationalization/transliteration.html",
    "href": "internationalization/transliteration.html",
    "title": "About Transliteration",
    "section": "",
    "text": "Transliteration is about systematically converting the way in which text encodes language (or information) from one writing system (or convention or format) to another.\nWe most commonly think of this for human languages, when converting the sounds spoken in a language from one writing system to another (ex: Chinese language sounds written as ideographs into English language sounds written in the Latin script).\nThe idea of transliteration can be thought of more generically for computers that need to transform text or even file formats.\n\n(def translit-map\n  \"This map defines a transliteration scheme for transforming text, in this case,\n  from Latin script character sequences (of English words) into emojis.\n\n  We define our transformation mappings in a map. In this way, it looks a lot like an\n  input to the Clojure `replace` function. This map will be used as an input for the prefix tree\n  (a.k.a. trie) data struture used to convert.\"\n  {\"happy\" \"🙂\"\n   \"happier\" \"😀\"\n   \"happiest\" \"😄\"})\n\n\n(def translit-trie\n  \"Create the prefix tree (a.k.a. trie) data structure based on our transliteration mappings\n  map that defines our transliteration.\"\n  (fmt/make-trie translit-map))\n\nA prefix tree is also called a trie. A prefix tree is a way to store a collection of sequences (ex: strings) efficiently when there is a lot of overlapping prefixes among the strings.\nA dictionary for an alphabetic language is a good example of when a prefix tree is efficient in space. Imagine all of the words in a single page of the dictionary. It could look like “cat”, “catamaran”, “catamount”, “category”, “caternary”, etc. It could instead be stored as:\nc - a - t *\n           a - m\n                  a - r - a - n *\n                  o - u - n - t *\n           e\n              g - o - r - y *\n              r - n - a - r - y *\nWhy would we use a prefix tree? Even if the source text patterns in the replacement rules are overlapping, we could perform replacement without a tree if we order the replacement rules by the source text pattern, such that a pattern that contains another pattern is applied earlier. However, to perform this ordering in a globally scalable way would effectively require constructing a prefix tree. Furthermore, a map of rules better models the notion of rules being independent data that are not complected with other rules. Also, as the number of rules increases, there may be performance benefits in terms of lookup in a prefix tree versus attempting to apply all rules in the ruleset sequentially.\nLet’s introspect into our prefix tree. Let’s see which input strings have a\n\n(fmt/in-trie? translit-trie \"hap\")\n\n\nfalse\n\n\n(fmt/in-trie? translit-trie \"happy\")\n\n\ntrue\n\n\n(fmt/in-trie? translit-trie \"happier\")\n\n\ntrue\n\n\n(fmt/in-trie? translit-trie \"happiest\")\n\n\ntrue\n\n\n(fmt/in-trie? translit-trie \"happiest!\")\n\n\nfalse\n\n\n(def s \"Hello, world! Happiness is not being happiest or happier than the rest, but instead just being happy.\")\n\n\n(defn convert\n  \"Use our translit-trie to convert the input string into the output string\"\n  [s]\n  (-&gt;&gt; (fmt/str-&gt;elems translit-trie s)\n       (apply str)))\n\n\n(def converted\n  \"Create the converted string according to our transliteration rules.\"\n  (convert s))\n\n\nconverted\n\n\n\"Hello, world! Happiness is not being 😄 or 😀 than the rest, but instead just being 🙂.\"\n\nIt’s worth noting that a prefix tree, when used to do transliteration conversions, is effectively the finite state machine (FSM) needed to parse and transform.\nFor next time: What if we implicitly did that same conversion by constructing a regular expression (regex) that can match on the input patterns. Could that be equally fast, or faster than our naive Clojure implementation? A regex might work like so:\nlet text = \"this is a test\";\nconst replacementMap = { 'th': 'X', 't': 'Y' };\n\nlet result = text.replace(/th|t/g, (match) =&gt; {\n                                               return replacementMap[match];\n                                               });\n\nconsole.log(result);\n\nsource: src/internationalization/transliteration.clj"
  },
  {
    "objectID": "core/async/flow/example/asynctopolis.html",
    "href": "core/async/flow/example/asynctopolis.html",
    "title": "Stats and Signals in the Flow of Asynctopolis",
    "section": "",
    "text": "Welcome to Asynctopolis, a city where agents act on signals, not orders. Here, unseen agents pass messages, track patterns, and sound alarms when the moment calls. No one oversees the whole city, yet everything flows.\nBeneath it all hums the Core Async Flow, a network of processes working together without ever meeting. Today, you’ll observe the agents of this asynchronous allegiance.\nThis code is adapted from Alex’s stats flow example, used for his video walkthrough.\nIn Asynctopolis, there are often races to print messages, which for the sake of clarity we shall serialize.\nAbove us in the sky flies Talon the Stat Hawk. Sleek, silent, and tireless. With a glint in his eye and wings tipped in probability, he soars into the realm of the unknowable every half second, returning with a fresh stat clutched in his talons. He doesn’t question, he doesn’t falter. He circles over the range from min to max, plucks a random integer, and drops it onto a channel without ceremony.\nBorn of wind and randomness, Talon is no ordinary bird. He executes his mission with the rhythm and the grace of chance incarnate. Talon embodies an ongoing loop. An autonomous creature of purpose, relentless and unthinking. To be a process is to endure. Ever watchful, speaking in channels.\nFly Talon! Collect samples. Let’s see what distribution you bring.\nYou have sampled fairly, Talon.\nTalon operates at the behest of the city’s Generator."
  },
  {
    "objectID": "core/async/flow/example/asynctopolis.html#meet-randomius-maximus-the-generator",
    "href": "core/async/flow/example/asynctopolis.html#meet-randomius-maximus-the-generator",
    "title": "Stats and Signals in the Flow of Asynctopolis",
    "section": "Meet Randomius Maximus, the Generator",
    "text": "Meet Randomius Maximus, the Generator\nIn a stone tower at the edge of the async city lives Randomius Maximus. Robed in numbers, crowned with entropy, keeper of the unceasing stream. He does not wander. He does not speak. He gestures, and Talon flies.\nWith a sweep of his hand, he dispatches his hawk to gather truths from the swirling chaos. Min and Max are his decree. Wait is his tempo. As long as his flow runs, the stats will come.\nTo be a true citizen of Asynctopolis is to be known as a process. To follow the sacred cycle of Vita Processus: Describe your duties. Initialize your station. Transition with order. Transform with purpose.\n\n(defn Randomius\n  \"Source proc for random stats\"\n  ;; describe\n  ([]\n   (println* \"I am Randomius, I take numbers from Talon and send them out.\")\n   {:params {:min  \"Min value to generate\"\n             :max  \"Max value to generate\"\n             :wait \"Time in ms to wait between generating\"}\n    :outs   {:out \"Output channel for stats\"}})\n\n  ;; init\n  ([args]\n   (println* \"Randomius initialing\")\n   (assoc args\n     :clojure.core.async.flow/in-ports {:stat (a/chan 100)}\n     :flying (atom false)))\n\n  ;; transition\n  ([{:keys [min max wait flying clojure.core.async.flow/in-ports] :as state} transition]\n   (println* \"Randomius transitioning\" transition)\n   (case transition\n     :clojure.core.async.flow/resume\n     (do\n       (when (not @flying)\n         (println* \"Talon, set flight!\")\n         (reset! flying true)\n         (future (Talon (:stat in-ports) min max wait flying)))\n       state)\n\n     (:clojure.core.async.flow/pause :clojure.core.async.flow/stop)\n     (do\n       (when @flying\n         (println* \"Talon, rest!\")\n         (reset! flying false))\n       state)))\n\n  ;; transform\n  ([state input-id msg]\n   (println* \"Randomius transform\" msg \"from\" input-id \"to\" :out)\n   [state {:out [msg]}]))\n\nRandomius, describe your duties!\n\n(Randomius)\n\n\n\n\n\n\n\nOUT\n\n\n\nI am Randomius, I take numbers from Talon and send them out.\n\n\n\n\n{:params\n {:min \"Min value to generate\",\n  :max \"Max value to generate\",\n  :wait \"Time in ms to wait between generating\"},\n :outs {:out \"Output channel for stats\"}}\n\nInitialize your station!\n\n(def state\n  (atom (Randomius {:min  10\n                    :max  20\n                    :wait 1})))\n\n\n\n\n\n\n\nOUT\n\n\n\nRandomius initialing\n\n\n\n\n^:kind/println\n@state\n\n\n{:min 10, :max 20, :wait 1, :clojure.core.async.flow/in-ports {:stat #object [ManyToManyChannel]}, :flying #object[clojure.lang.Atom 0xeba12e3 {:status :ready, :val false}]}\n\nTransition with order.\n\n(swap! state Randomius :clojure.core.async.flow/resume)\n\n\n\n\n\n\n\nOUT\n\n\n\nRandomius transitioning :clojure.core.async.flow/resume\nTalon, set flight!\n\n\n\n\n{:min 10,\n :max 20,\n :wait 1,\n :clojure.core.async.flow/in-ports {:stat #object [ManyToManyChannel]},\n :flying #&lt;Atom@eba12e3: false&gt;}\n\nTalon is flying.\n\n(-&gt; (:clojure.core.async.flow/in-ports @state)\n    (:stat)\n    (a/&lt;!!))\n\n\n16\n\nTransform with purpose.\n\n(swap! state\n       (fn [state]\n         (let [[state step] (Randomius state :stat \"I transform, therefore I am\")]\n           (println* step)\n           state)))\n\n\n\n\n\n\n\nOUT\n\n\n\nRandomius transform I transform, therefore I am from :stat to :out\n{:out [I transform, therefore I am]}\n\n\n\n\n{:min 10,\n :max 20,\n :wait 1,\n :clojure.core.async.flow/in-ports {:stat #object [ManyToManyChannel]},\n :flying #&lt;Atom@eba12e3: false&gt;}\n\nI see you wish to send a missive to out. Be wary in the future, send only numbers to those who seek stats.\nWell done, Randomius. You are a true citizen. Now rest.\n\n(swap! state Randomius :clojure.core.async.flow/stop)\n\n\n\n\n\n\n\nOUT\n\n\n\nRandomius transitioning :clojure.core.async.flow/stop\nTalon, rest!\n\n\n\n\n{:min 10,\n :max 20,\n :wait 1,\n :clojure.core.async.flow/in-ports {:stat #object [ManyToManyChannel]},\n :flying #&lt;Atom@eba12e3: false&gt;}"
  },
  {
    "objectID": "core/async/flow/example/asynctopolis.html#meet-tallystrix-the-whispering-aggregator",
    "href": "core/async/flow/example/asynctopolis.html#meet-tallystrix-the-whispering-aggregator",
    "title": "Stats and Signals in the Flow of Asynctopolis",
    "section": "Meet Tallystrix, the Whispering Aggregator",
    "text": "Meet Tallystrix, the Whispering Aggregator\nIn the marble shadows of the Hall of Measures, Tallystrix gathers numbers in her obsidian basin. She listens not to the sky, but to the stat channel, where strange numbers arrive without explanation. She lets them settle, silent and still.\nShe says nothing—until the bell rings. Then, with a tilt of the bowl and a whisper of reckoning, she releases the average to those who asked.\nIf a number is too high or too low, she sends a warning, a flare in the async night.\n\n(defn Tallystrix\n  ;; describe\n  ([]\n   (println* \"I am Tallystrix, I take from stats or poke, and put to alert and notify\")\n   {:params   {:min \"Min value, alert if lower\"\n               :max \"Max value, alert if higher\"}\n    :ins      {:stat \"Channel to receive stat values\"\n               :poke \"Channel to poke when it is time to report a window of data to the log\"}\n    :outs     {:alert \"Notify of value out of range {:val value, :error :high|:low\"}\n    :workload :compute})\n\n  ;; init\n  ([args]\n   (println* \"Tallystrix initializing\")\n   (assoc args :vals []))\n\n  ;; transition\n  ([state transition]\n   (println* \"Tallystrix transitioning\" transition)\n   state)\n\n  ;; transform\n  ([{:keys [min max vals] :as state} input-id msg]\n   (println* \"Tallystrix transforming\" input-id msg)\n   (case input-id\n     :stat (let [state' (assoc state :vals (conj vals msg))\n                 msgs (cond\n                        (&lt; msg min) {:alert [{:val msg, :error :low}]}\n                        (&lt; max msg) {:alert [{:val msg, :error :high}]}\n                        :else nil)]\n             [state' msgs])\n     :poke [(assoc state :vals [])\n            {:clojure.core.async.flow/report (if (empty? vals)\n                                               [{:count 0}]\n                                               [{:avg   (/ (double (reduce + vals)) (count vals))\n                                                 :count (count vals)}])}])))\n\nTallystrix, what messages have you?\n\n(let [state {:min 1 :max 5 :vals []}\n      [state' msgs'] (Tallystrix state :stat 7)]\n  msgs')\n\n\n\n\n\n\n\nOUT\n\n\n\nTallystrix transforming :stat 7\n\n\n\n\n{:alert [{:val 7, :error :high}]}\n\nWell alerted. Your transform is sound."
  },
  {
    "objectID": "core/async/flow/example/asynctopolis.html#meet-chronon-the-scheduler-of-bells",
    "href": "core/async/flow/example/asynctopolis.html#meet-chronon-the-scheduler-of-bells",
    "title": "Stats and Signals in the Flow of Asynctopolis",
    "section": "Meet Chronon, the Scheduler of Bells",
    "text": "Meet Chronon, the Scheduler of Bells\nIn a chamber just outside the Hall of Measures, Chronon stands beside a great brass bell. Every few thousand milliseconds, he raises his staff and strikes it. A chime ripples through the channels and stirs the Aggregator within.\nHe does not wait for thanks. He does not miss a beat. His duty is rhythm. His gift is regularity. And with every ring, the silence grows wiser.\n\n(defn Chronon\n  ;; describe\n  ([]\n   (println* \"I am Chronon, I poke out periodically\")\n   {:params {:wait \"Time to wait between pokes\"}\n    :outs   {:out \"Poke channel, will send true when the alarm goes off\"}})\n\n  ;; init\n  ([args]\n   (println* \"Chronon initializing\")\n   (assoc args\n     :clojure.core.async.flow/in-ports {:alarm (a/chan 10)}\n     :running (atom false)))\n\n  ;; transition\n  ([{:keys [wait running clojure.core.async.flow/in-ports] :as state} transition]\n   (println* \"Chronon transitioning\" transition)\n   (case transition\n     :clojure.core.async.flow/resume\n     (do\n       (when (not @running)\n         (println* \"Chronon running\")\n         (reset! running true)\n         (future (while @running\n                   (if (a/&gt;!! (:alarm in-ports) true)\n                     (Thread/sleep ^long wait)\n                     (reset! running false)))))\n       state)\n\n     (:clojure.core.async.flow/pause :clojure.core.async.flow/stop)\n     (do\n       (when @running\n         (println* \"Chronon rests.\")\n         (reset! running false))\n       state)))\n\n  ;; transform\n  ([state input-id msg]\n   (println* \"Chronon transforms\" input-id msg \"to\" :out)\n   [state {:out [msg]}]))\n\nChronon has no familiar to do his work, and listens only to himself."
  },
  {
    "objectID": "core/async/flow/example/asynctopolis.html#meet-claxxus-the-notifier-the-herald",
    "href": "core/async/flow/example/asynctopolis.html#meet-claxxus-the-notifier-the-herald",
    "title": "Stats and Signals in the Flow of Asynctopolis",
    "section": "Meet Claxxus, the Notifier, the Herald",
    "text": "Meet Claxxus, the Notifier, the Herald\nAt the city’s edge stands Claxxus, cloaked in red and brass, eyes ever on the flame that signals alarm. He does not gather, he does not measure, he only declares.\nWhen Tallystrix sends a flare, Claxxus steps forward to speak. He raises his voice for all to hear: “Out of range!”\n\n(defn Claxxus\n  ;; describe\n  ([]\n   (println* \"I am Claxxus, I shout what I hear from in\")\n   {:params {:prefix \"Log message prefix\"}\n    :ins    {:in \"Channel to receive messages\"}})\n\n  ;; init\n  ([state]\n   (println* \"Claxxus initializing\")\n   state)\n\n  ;; transition\n  ([state transition]\n   (println* \"Claxxus transitioning\" transition)\n   state)\n\n  ;; transform\n  ([{:keys [prefix] :as state} input-id msg]\n   (println* \"Claxxus transforming\" input-id msg)\n   (println* prefix msg)\n   [state nil]))\n\nCursed to know only how to shout.\n\n(Claxxus {:prefix \"ERROR:\"} :in \"Out of range!\")\n\n\n\n\n\n\n\nOUT\n\n\n\nClaxxus transforming :in Out of range!\nERROR: Out of range!\n\n\n\n\n[{:prefix \"ERROR:\"} nil]"
  },
  {
    "objectID": "core/async/flow/example/asynctopolis.html#the-asynchronous-allegiance",
    "href": "core/async/flow/example/asynctopolis.html#the-asynchronous-allegiance",
    "title": "Stats and Signals in the Flow of Asynctopolis",
    "section": "The Asynchronous Allegiance",
    "text": "The Asynchronous Allegiance\nAll these roles are bound together in a flow, a living graph of asynchronous collaboration.\nRandomius Maximus generates. Chronon keeps the beat. Tallystrix listens and computes. Claxxus alerts.\nThey never meet. They never speak. Yet they move as one.\nThis is an allegiance, asynchronous and unseen. Held together by channels, purpose, and trust.\n\n(def config\n  {:procs {:Randomius  {:args {:min 0 :max 12 :wait 500}\n                        :proc (flow/process #'Randomius)}\n           :Tallystrix {:args {:min 1 :max 10}\n                        :proc (flow/process #'Tallystrix)}\n           :Chronon    {:args {:wait 3000}\n                        :proc (flow/process #'Chronon)}\n           :Claxxus    {:args      {:prefix \"Alert: \"}\n                        :proc      (flow/process #'Claxxus)\n                        :chan-opts {:in {:buf-or-n (a/sliding-buffer 3)}}}}\n   :conns [[[:Randomius :out] [:Tallystrix :stat]]\n           [[:Chronon :out] [:Tallystrix :poke]]\n           [[:Tallystrix :alert] [:Claxxus :in]]]})\n\n\n\n\n\n\n\nOUT\n\n\n\nI am Randomius, I take numbers from Talon and send them out.\nI am Tallystrix, I take from stats or poke, and put to alert and notify\nI am Chronon, I poke out periodically\nI am Claxxus, I shout what I hear from in\n\n\n\n\n^:kind/hiccup\n[:iframe {:width  \"100%\"\n          :height \"600px\"\n          :srcdoc (flow-static/template config nil)}]\n\n\nThe Flow creates them, calling upon their civic duties, Describe your duties. Initialize your station.\n\n(def flow (flow/create-flow config))\n\nThe city is ready, but not yet in action.\n\n(def chs (flow/start flow))\n\n\n\n\n\n\n\nOUT\n\n\n\nRandomius initialing\nTallystrix initializing\nChronon initializing\nClaxxus initializing\n\n\n\n\nchs\n\n\n{:report-chan #object [ManyToManyChannel],\n :error-chan #object [ManyToManyChannel]}\n\nreport-chan and error-chan are special conduits in the Flow. Tallystrix sends her summaries to report, dutifully. When something breaks it flows to error.\n\n(a/poll! (:report-chan chs))\n\n\nnil\n\nStart initialized, but transitioning has not occurred yet. Transition with order.\n\n(flow/resume flow)\n\n\n\n\n\n\n\nTHREAD OUT\n\n\n\nRandomius transitioning :clojure.core.async.flow/resume\nTalon, set flight!\nTallystrix transitioning :clojure.core.async.flow/resume\n\n\n\n\ntrue\n\n\n(Thread/sleep 1)\n\n\n\n\n\n\n\nTHREAD OUT\n\n\n\nSQUARK: 10\nChronon transitioning :clojure.core.async.flow/resume\nRandomius transform 10 from :stat to :out\nChronon running\nTallystrix transforming :stat 10\nClaxxus transitioning :clojure.core.async.flow/resume\n\n\n\n\nnil\n\nThe city breathes, the asynchronous allegiance stirs.\nTransform with purpose.\n\n(a/poll! (:report-chan chs))\n\n\n\n\n\n\n\nTHREAD OUT\n\n\n\nChronon transforms :alarm true to :out\n\n\n\n\nnil\n\n\n(a/poll! (:report-chan chs))\n\n\n\n\n\n\n\nTHREAD OUT\n\n\n\nTallystrix transforming :poke true\n\n\n\n\nnil\n\n\n(flow/inject flow [:Tallystrix :poke] [true])\n\n\n#object [FutureTask]\n\n\n(a/poll! (:report-chan chs))\n\n\n{:avg 10.0, :count 1}\n\nMischief is afoot.\n\n(flow/inject flow [:Tallystrix :stat] [\"abc1000\"])\n\n\n#object [FutureTask]\n\n\n(a/poll! (:error-chan chs))\n\n\n\n\n\n\n\nTHREAD OUT\n\n\n\nTallystrix transforming :poke true\nTallystrix transforming :stat abc1000\n\n\n\n\n#:clojure.core.async.flow{:pid :Tallystrix,\n                          :status :running,\n                          :state\n                          {:min 1,\n                           :max 10,\n                           :clojure.core.async.flow/pid :Tallystrix,\n                           :vals []},\n                          :count 4,\n                          :cid :stat,\n                          :msg \"abc1000\",\n                          :op :step,\n                          :ex #error {\n :cause \"class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap')\"\n :via\n [{:type java.util.concurrent.ExecutionException\n   :message \"java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap')\"\n   :at [java.util.concurrent.FutureTask report \"FutureTask.java\" 122]}\n  {:type java.lang.ClassCastException\n   :message \"class java.lang.String cannot be cast to class java.lang.Number (java.lang.String and java.lang.Number are in module java.base of loader 'bootstrap')\"\n   :at [clojure.lang.Numbers lt \"Numbers.java\" 253]}]\n :trace\n [[clojure.lang.Numbers lt \"Numbers.java\" 253]\n  [core.async.flow.example.asynctopolis$Tallystrix invokeStatic \"NO_SOURCE_FILE\" 224]\n  [core.async.flow.example.asynctopolis$Tallystrix invoke \"NO_SOURCE_FILE\" 197]\n  [clojure.lang.AFn applyToHelper \"AFn.java\" 160]\n  [clojure.lang.AFn applyTo \"AFn.java\" 144]\n  [clojure.lang.Var applyTo \"Var.java\" 707]\n  [clojure.core$apply invokeStatic \"core.clj\" 667]\n  [clojure.core$apply invoke \"core.clj\" 662]\n  [clojure.core.async.flow.impl$futurize$fn__71880$fn__71881 invoke \"impl.clj\" 34]\n  [clojure.lang.AFn call \"AFn.java\" 18]\n  [java.util.concurrent.FutureTask run \"FutureTask.java\" 317]\n  [java.util.concurrent.ThreadPoolExecutor runWorker \"ThreadPoolExecutor.java\" 1144]\n  [java.util.concurrent.ThreadPoolExecutor$Worker run \"ThreadPoolExecutor.java\" 642]\n  [java.lang.Thread run \"Thread.java\" 1583]]}}\n\nClaxxus does not speak of such failures. He is for alerts. Thresholds breached, events of note, things the city must hear.\n\n(flow/inject flow [:Claxxus :in] [:sandwich])\n\n\n#object [FutureTask]\n\n\n(Thread/sleep 1)\n\n\n\n\n\n\n\nTHREAD OUT\n\n\n\nClaxxus transforming :in :sandwich\nAlert:  :sandwich\n\n\n\n\nnil\n\nFluxus est graphum, fluxus est processus, fluxus est data.\n\n(datafy/datafy flow)\n\n\n{:procs\n {:Randomius\n  {:args {:min 0, :max 12, :wait 500},\n   :proc\n   {:step core.async.flow.example.asynctopolis/Randomius,\n    :desc\n    {:params\n     {:min \"Min value to generate\",\n      :max \"Max value to generate\",\n      :wait \"Time in ms to wait between generating\"},\n     :outs {:out \"Output channel for stats\"}}}},\n  :Tallystrix\n  {:args {:min 1, :max 10},\n   :proc\n   {:step core.async.flow.example.asynctopolis/Tallystrix,\n    :desc\n    {:params\n     {:min \"Min value, alert if lower\",\n      :max \"Max value, alert if higher\"},\n     :ins\n     {:stat \"Channel to receive stat values\",\n      :poke\n      \"Channel to poke when it is time to report a window of data to the log\"},\n     :outs\n     {:alert\n      \"Notify of value out of range {:val value, :error :high|:low\"},\n     :workload :compute}}},\n  :Chronon\n  {:args {:wait 3000},\n   :proc\n   {:step core.async.flow.example.asynctopolis/Chronon,\n    :desc\n    {:params {:wait \"Time to wait between pokes\"},\n     :outs\n     {:out \"Poke channel, will send true when the alarm goes off\"}}}},\n  :Claxxus\n  {:args {:prefix \"Alert: \"},\n   :proc\n   {:step core.async.flow.example.asynctopolis/Claxxus,\n    :desc\n    {:params {:prefix \"Log message prefix\"},\n     :ins {:in \"Channel to receive messages\"}}},\n   :chan-opts\n   {:in {:buf-or-n {:type SlidingBuffer, :count 0, :capacity 3}}}}},\n :conns\n [[[:Randomius :out] [:Tallystrix :stat]]\n  [[:Chronon :out] [:Tallystrix :poke]]\n  [[:Tallystrix :alert] [:Claxxus :in]]],\n :execs {:mixed nil, :io nil, :compute nil},\n :chans\n {:ins\n  {[:Tallystrix :stat]\n   {:put-count 0,\n    :take-count 1,\n    :closed? false,\n    :buffer {:type FixedBuffer, :count 0, :capacity 10}},\n   [:Tallystrix :poke]\n   {:put-count 0,\n    :take-count 1,\n    :closed? false,\n    :buffer {:type FixedBuffer, :count 0, :capacity 10}},\n   [:Claxxus :in]\n   {:put-count 0,\n    :take-count 1,\n    :closed? false,\n    :buffer {:type SlidingBuffer, :count 0, :capacity 3}}},\n  :outs\n  {[:Randomius :out]\n   {:put-count 0,\n    :take-count 1,\n    :closed? false,\n    :buffer {:type FixedBuffer, :count 0, :capacity 10}},\n   [:Tallystrix :alert]\n   {:put-count 0,\n    :take-count 1,\n    :closed? false,\n    :buffer {:type SlidingBuffer, :count 0, :capacity 3}},\n   [:Chronon :out]\n   {:put-count 0,\n    :take-count 1,\n    :closed? false,\n    :buffer {:type FixedBuffer, :count 0, :capacity 10}}},\n  :error\n  {:put-count 0,\n   :take-count 0,\n   :closed? false,\n   :buffer {:type SlidingBuffer, :count 0, :capacity 100}},\n  :report\n  {:put-count 0,\n   :take-count 0,\n   :closed? false,\n   :buffer {:type SlidingBuffer, :count 1, :capacity 100}}}}\n\nThe flow may coordinate peace.\n\n(flow/pause flow)\n\n\ntrue\n\n\n(Thread/sleep 1)\n\n\n\n\n\n\n\nTHREAD OUT\n\n\n\nRandomius transitioning :clojure.core.async.flow/pause\nTalon, rest!\nTallystrix transitioning :clojure.core.async.flow/pause\nClaxxus transitioning :clojure.core.async.flow/pause\nChronon transitioning :clojure.core.async.flow/pause\nChronon rests.\n\n\n\n\nnil\n\nPax optima rerum.\nThe flow may cease.\n\n(flow/stop flow)\n\n\ntrue\n\n\n(Thread/sleep 1)\n\n\n\n\n\n\n\nTHREAD OUT\n\n\n\nRandomius transitioning :clojure.core.async.flow/stop\nTallystrix transitioning :clojure.core.async.flow/stop\nChronon transitioning :clojure.core.async.flow/stop\nClaxxus transitioning :clojure.core.async.flow/stop\n\n\n\n\nnil\n\nThe city falls silent.\nThus does Asynctopolis coordinate, thus is Vita Processus observed.\nThe flow of Asynctopolis is a choreography of concurrent logic, where each part knows just enough to play its role, and no more. It’s a quiet network of intent. Each role with a narrow purpose, joined by shared channels and rhythm.\nYou can observe its work as it happens. You can inspect, poke, pause, and resume. Buffers shape its tempo, and transitions reveal its state.\nIn Asynctopolis, no one rules, yet the system flows precisely, predictably, asynchronously.\n\nsource: src/core/async/flow/example/asynctopolis.clj"
  },
  {
    "objectID": "data_engineering/support_for_popular_data_tools/snowflake.html",
    "href": "data_engineering/support_for_popular_data_tools/snowflake.html",
    "title": "Clojure Support for Popular Data Tools: A Data Engineer’s Perspective, and a New Clojure API for Snowflake",
    "section": "",
    "text": "In this article I look at the extent of Clojure support for some popular on-cluster data processing tools that Clojure users might need for their data engineering or data science tasks. Then for Snowflake in particular I go further and present a new Clojure API.\nWhy is the level of Clojure support important? As an example, consider that Scicloj is mostly focused on in-memory processing. As such, if you need to work with a large dataset it will be necessary to compute on-cluster and extract a smaller result before continuing your data science task locally.\nHowever, without sufficient Clojure support for on-cluster processing, anyone needing that facility for their data science or data engineering task would be forced to reach outside the Clojure ecosystem. That adds complexity in terms of interop, compatibility and overall stack requirements.\nWith that in mind, let’s examine the level of Clojure support for some popular on-cluster data processing tools. For each tool I selected its official Clojure library if one exists, or if not the most popular and well-known community-supported alternative with at least 100 stars and 10 contributors on GitHub. I then used the following criteria against the library to classify it as “supported” or “support unknown”:\n\nCI/CD build passing\nMost recent commit less than 12 months ago\nMost recent release less than 12 months ago\nMaintainers responded to any issue or question less than 12 months ago\nMaintainers either accepted or rejected any PR less than 12 months ago\n\nIf I couldn’t find any such library at all, I classified it as having “no support”.\n\n\n\nTool Category\nSupported\nSupport Unknown\nNo Support\n\n\n\n\nOn-cluster batch processing\n\n1. Spark (see Spark Interop with Geni below)\n\n\n\nOn-cluster stream processing\n\n2. Kafka Streams (see Kafka Interop with Jackdaw below)\n3. Spark Structured Streaming,&lt;br&gt;4. Flink\n\n\nOn-cluster batch and stream processing\n\n\n5. Databricks (see Spark Interop with Geni below),&lt;br&gt;6. Snowflake (see Snowflake Interop below)\n\n\n\nPlease note, I don’t wish to make any critical judgments based on either the summary analysis above or the more detailed analysis below. The goal is to understand the situation with respect to Clojure support and highlight any gaps, although I suppose I am also inadvertently highlighting the difficulties of maintaining open source software!\nWith that said, let’s dive into the details for Spark, Kafka and Snowflake.\n\nSpark Interop with Geni\nGeni is the go-to library for Spark interop. Some months back, I was motivated to evaluate the coverage of Spark features. In particular, I wanted to understand what would be involved to support Spark Connect as it would reduce the complexity of computing on-cluster directly from the Clojure REPL.\nHowever, I found a number of issues that would need to be addressed in order to support Spark Connect and Databricks:\n\nProblems with the default session.\nProblems with support for Databricks, although I suspect this is related to point 1.\n\nAlso, in general by my criteria the support classification is “support unknown”: 1. CI/CD build failing. 1. Version 0.0.42 api docs broken, also affects version 0.0.41 1. No commits since November 2023. 1. No releases since November 2023. 1. No PRs accepted or rejected since November 2023. 1. No response when attempting to contact the author or maintainers.\n\n\nKafka Interop with Jackdaw\nJackdaw is the go-to library for Kafka interop. However, by my criteria the support classification is also “support unknown”:\n\nNo commits since August 2024.\nNo releases since December 2023.\nNo PRs accepted or rejected since August 2024. As a further example, here’s a PR raised in May 2024 but not yet commented on either way by the maintainers.\n\n\n\nSnowflake Interop with a New Clojure API!\nAlthough the Snowpark library has Java and Scala bindings, it doesn’t provide anything for Clojure. As such, it’s currently not possible to interact with Snowflake using the Clojure way.\nTo address this gap, I decided to try my hand at creating a Clojure API for Snowflake as part of a broader effort to improve the overall situation regarding Clojure support for popular data tools.\nThe aim is to validate this approach as a foundation for enabling a wide range of data science or data engineering use cases from the Clojure REPL, in situations where Snowflake is the data warehouse of choice.\nThe README provides usage examples for all the current features, but I’ve copied the essential ones here to illustrate the API:\n\nFeature 1. Load data from local and save to a Snowflake table\n(require ’[clojure.repl.deps :refer [add-lib]]) (add-lib ’io.github.alza-bitz/snowpark-clj {:git/url “https://github.com/alza-bitz/snowpark-clj.git” :git/sha “7856d9ca2080b188f9feec115ca709d3f54877b0”})\n\n(require '[snowpark-clj.core :as sp])\n\nSample data\n\n(def employee-data\n  [{:id 1 :name \"Alice\" :age 25 :department \"Engineering\" :salary 75000}\n   {:id 2 :name \"Bob\" :age 30 :department \"Marketing\" :salary 65000}\n   {:id 3 :name \"Charlie\" :age 35 :department \"Engineering\" :salary 80000}])\n\nCreate session and save data\n\n(with-open [session (sp/create-session \"src/data_engineering/support_for_popular_data_tools/snowflake.edn\")]\n  (-&gt; (sp/create-dataframe session employee-data)\n      (sp/save-as-table \"employees\" :overwrite)))\n\n\nnil\n\n\n\nFeature 2. Compute over Snowflake table(s) on-cluster to produce a smaller result for local processing\n\n(with-open [session (sp/create-session \"src/data_engineering/support_for_popular_data_tools/snowflake.edn\")]\n  (let [table-df (sp/table session \"employees\")]\n    (-&gt; table-df\n        (sp/filter (sp/gt (sp/col table-df :salary) (sp/lit 70000)))\n        (sp/select [:name :salary])\n        (sp/collect))))\n\n\n[{:name \"Alice\", :salary 75000} {:name \"Charlie\", :salary 80000}]\n\nAs an early-stage proof-of-concept, it only covers the essential parts of the underlying API without being too concerned with performance or completeness. Other more advanced features are noted and planned, pending further elaboration.\nI hope you find it useful and I welcome any feedback or contributions!\n\nsource: src/data_engineering/support_for_popular_data_tools/snowflake.clj"
  },
  {
    "objectID": "civitas/why/i_should_write_more.html",
    "href": "civitas/why/i_should_write_more.html",
    "title": "Why Building My Blog is More Fun Than Filling It",
    "section": "",
    "text": "Let’s admit it, we spend more time tinkering with our blogging frameworks than actually writing posts. Building the blog is the fun part. Writing for it feels like a chore.\nWe love to build. It’s a playground of puzzles, a chance to learn, and a way to create something that is truly ours. But this love for building can become a distraction from the original goal of writing. And the initial joy of creating the blog can fade as our focus shifts to the content.\nI used to have a blog. I would get an idea I was excited to write about. But to show the idea required setting up a project, testing my code, writing a narrative, and then copying code, visualizations, and JavaScript into my post. I’d spend more time on the infrastructure than on the idea itself. It drained the fun out of it.\nWith a tool like Clay, which powers ClojureCivitas, the process is different. Technical writing becomes an extension of coding. My focus is on making the code work and explaining the idea. The narrative, written in Markdown, flows alongside the code. It’s all in one place, and it all just works."
  },
  {
    "objectID": "civitas/why/i_should_write_more.html#its-still-fun-because-its-still-code",
    "href": "civitas/why/i_should_write_more.html#its-still-fun-because-its-still-code",
    "title": "Why Building My Blog is More Fun Than Filling It",
    "section": "It’s Still Fun, Because It’s Still Code",
    "text": "It’s Still Fun, Because It’s Still Code\nThe best part is that this way of writing is inherently enjoyable for a developer. You’re in your favorite editor, in your REPL, you’re in your element, writing Clojure. You’re writing about code and you’re writing with code. For those of us who love to tinker, the creative outlet is still there. We can scratch that building itch without getting bogged down.\nClojureCivitas is a community space for sharing the kind of work you love to create. Contributing is easy. Just clone and open the project, write some code in a new namespace, and submit a pull request to share it. If you’re a Clojure developer with something to say, you can start writing a post right now and publish it the same day. It’s a direct, rewarding, and enjoyable way to share your insights. We can’t wait to see what you create!"
  },
  {
    "objectID": "civitas/why/i_should_write_more.html#putting-our-tools-into-action",
    "href": "civitas/why/i_should_write_more.html#putting-our-tools-into-action",
    "title": "Why Building My Blog is More Fun Than Filling It",
    "section": "Putting Our Tools Into Action",
    "text": "Putting Our Tools Into Action\n\n\n\n\n\n\nNote\n\n\n\nThe following code is a playful simulation. Your own blogging experience may vary, but the patterns are often surprisingly familiar!\n\n\nLet’s model the factors involved in blog creation with some data.\nImagine a developer who has several ideas for their blog. Some are about creating content, and others are about features and bugs they want to address.\nFirst we will generate some example tasks.\n\n(def vocab\n  {:type [:post :feature :fix]\n   :topic [\"macros\" \"performance\" \"data science\" \"web dev\" \"testing\"]\n   :hero [\"Batman\" \"Wonder Woman\" \"Spider-Man\" \"Iron Man\" \"Captain Marvel\"]\n   :adj [\"dark\" \"emoji\" \"infinite\" \"custom\" \"live\"]\n   :feature [\"mode\" \"reactions\" \"scroll\" \"font\" \"preview\"]\n   :bug [\"off-by-one\" \"broken\" \"slow\" \"missing\" \"typo\"]\n   :loc [\"error\" \"layout\" \"load\" \"favicon\"]})\n\nWe’ll use Fastmath for seeded randomization so that our results are reproducible\n\n(require '[fastmath.random :as r])\n\n\n(r/set-seed! (hash \"ClojureCivitas\"))\n\n\n#object [JDKRandomGenerator]\n\nThis small helper will select a word from our vocabulary\n\n(def choose (comp #(nth % (r/irand (count %))) vocab))\n\n\n(choose :topic)\n\n\n\"performance\"\n\nLet’s choose words randomly to construct task descriptions\n\n(defn task [type]\n  (case type\n    :post (str \"Blog about how \" (choose :hero) \" uses \" (choose :topic))\n    :feature (str \"Add \" (choose :adj) \" \" (choose :feature))\n    :fix (str \"Fix \" (choose :bug) \" \" (choose :loc) \" in \" (choose :feature))))\n\n\n(task (choose :type))\n\n\n\"Blog about how Batman uses macros\"\n\nNow we want to randomly generate the number of views for a blog post\n\n(def median-views 1000)\n\n\n(require '[fastmath.core :as fm])\n\n\n(def log-normal-dist\n  (r/distribution :log-normal\n                  {:scale (fm/log median-views)\n                   :shape 0.5}))\n\n\n(defn views []\n  (int (r/sample log-normal-dist)))\n\n\n(views)\n\n\n1031\n\n\n(repeatedly 10 views)\n\n\n(3309 1229 1609 935 371 638 1709 453 1089 1145)\n\nThose numbers look about right, but it would be better to plot them to make sure. We’ll make use of fast dataset operations with Tablecloth, visualized with Tableplot.\n\n(require '[tablecloth.api :as tc])\n\n\n(require '[scicloj.tableplot.v1.plotly :as plotly])\n\n\n(-&gt; (tc/dataset {:views (repeatedly 1000 views)})\n    (plotly/base {:=title \"The Long Tail of Blog Post Reach\"\n                  :width \"100%\"\n                  :=x-title \"Views per Post\"\n                  :=y-title \"Number of Posts\"})\n    (plotly/layer-histogram {:=x :views}))\n\n\nMost posts get a modest number of views, but a few reach a much larger audience. A classic long-tail effect of publishing online.\nNow we’ll assign the views, as well as some other factors to each task.\n\n(defn gen-task []\n  (let [t (choose :type)]\n    {:type t\n     :task (task t)\n     :time-spent (r/irand 1 24)\n     :readers-reached (if (= t :post) (views) 0)\n     :style-points (if (= t :feature) (r/irand 1 100) (r/irand 10))\n     :fun-factor (if (= t :fix) 0 (r/irand 1 100))}))\n\n\n(gen-task)\n\n\n{:type :post,\n :task \"Blog about how Spider-Man uses web dev\",\n :time-spent 4,\n :readers-reached 676,\n :style-points 2,\n :fun-factor 94}\n\n\n(tc/dataset (repeatedly 10 gen-task)\n            {:dataset-name \"Ten things I love about blogging\"})\n\n\nTen things I love about blogging [10 6]:\n\n\n\n\n\n\n\n\n\n\n\n:type\n:task\n:time-spent\n:readers-reached\n:style-points\n:fun-factor\n\n\n\n\n:feature\nAdd dark font\n13\n0\n62\n52\n\n\n:feature\nAdd live preview\n21\n0\n53\n93\n\n\n:post\nBlog about how Spider-Man uses web dev\n5\n1055\n2\n47\n\n\n:post\nBlog about how Batman uses web dev\n18\n719\n0\n16\n\n\n:post\nBlog about how Captain Marvel uses macros\n19\n1519\n4\n78\n\n\n:feature\nAdd custom scroll\n14\n0\n70\n80\n\n\n:fix\nFix typo layout in scroll\n22\n0\n1\n0\n\n\n:fix\nFix slow layout in reactions\n6\n0\n1\n0\n\n\n:fix\nFix typo favicon in mode\n7\n0\n3\n0\n\n\n:post\nBlog about how Batman uses macros\n22\n892\n7\n96\n\n\n\n\nNice! Now we’ll generate a larger dataset which may yeild more general insights.\n\n(defonce tasks-ds\n  (tc/dataset (repeatedly 1000 gen-task)\n              {:dataset-name \"Things I could do to my blog\"}))\n\nThis scatter plot compares the time spent on each activity type with the number of readers reached. Writing posts tends to reach more readers, while tinkering with features or fixes rarely does.\n\n(-&gt; tasks-ds\n    (plotly/base {:=title \"Effort vs. Impact: What Reaches Readers?\"\n                  :width \"100%\"\n                  :=x-title \"Time Spent (hours)\"\n                  :=y-title \"Readers Reached\"})\n    (plotly/layer-point {:=x :time-spent\n                         :=y :readers-reached\n                         :=color :type}))\n\n\nHere, we look at how much fun each activity is, relative to the time spent. Feature work and writing posts are generally more fun than bug fixes.\n\n(-&gt; tasks-ds\n    (plotly/base {:=title \"Fun per Hour: Which Tasks Spark Joy?\"\n                  :width \"100%\"\n                  :=x-title \"Time Spent (hours)\"\n                  :=y-title \"Fun Factor\"})\n    (plotly/layer-point {:=x :time-spent\n                         :=y :fun-factor\n                         :=color :type}))\n\n\nThis chart shows how much style each activity brings to the blog. Feature work is where you can really express your creativity and add flair, while posts and fixes are less about style.\n\n(-&gt; tasks-ds\n    (plotly/base {:=title \"Where the Style Shines: Creative Expression by Task\"\n                  :width \"100%\"\n                  :=x-title \"Time Spent (hours)\"\n                  :=y-title \"Style Points\"})\n    (plotly/layer-point {:=x :time-spent\n                         :=y :style-points\n                         :=color :type}))\n\n\nGiven there are several factors at work, how can we determine the value of any one task? The objective function below quantifies what makes a blogging task worthwhile. It combines the positive factors then divides by the time spent. The higher the score, the more “bang for your buck” you get from that activity.\n\n\n\n\n\n\nTip\n\n\n\nTry adjusting the weights or formula in the objective function to reflect what you value most in your own workflow.\n\n\n\n(defn objective\n  \"I want to have fun, reach readers, with style, without spending a lot of time\"\n  [{:keys [readers-reached fun-factor style-points time-spent]}]\n  (/ (+ readers-reached\n        fun-factor\n        style-points)\n     time-spent))\n\nWe combine all the factors relative to time spent, to estimate the overall value of each activity type. This bar chart summarizes which activities give you the most bang for your buck.\n\n(-&gt; tasks-ds\n    (tc/map-rows #(assoc % :value (objective %)))\n    (tc/group-by [:type])\n    (tc/mean :value)\n    (plotly/base {:=title \"Time Well Spent: Overall Value by Activity\"\n                  :width \"100%\"\n                  :=x-title \"Activity Type\"\n                  :=y-title \"Mean Value\"})\n    (plotly/layer-bar {:=x :type\n                       :=y \"summary\"\n                       :=y-title \"mean value\"\n                       :=color :type}))"
  },
  {
    "objectID": "civitas/why/i_should_write_more.html#conclusion",
    "href": "civitas/why/i_should_write_more.html#conclusion",
    "title": "Why Building My Blog is More Fun Than Filling It",
    "section": "Conclusion",
    "text": "Conclusion\nBuilding and tinkering with your blog is fun, but sharing your ideas is what truly creates value for you and your readers. With tools that make writing as natural and enjoyable as coding, you can focus on what matters. Write, share, and enjoy the process. Your next post might be the one that inspires someone else to start.\n\n\n\nWhat’s on your mind?\n\n\nReady to share your own story? Open a new namespace and start writing today!\n\n\nsource: src/civitas/why/i_should_write_more.clj"
  },
  {
    "objectID": "civitas/repl.html",
    "href": "civitas/repl.html",
    "title": "I’ll take a side of REPL with that",
    "section": "",
    "text": "“Would you like to make that interactive?”\n– The eternal question facing documentation writers.\nMost code documentation has either static code with fixed results or dynamic editor blocks with evaluated results. This post explores a third option, a sidebar REPL that coexists with static examples, letting you copy interesting snippets and build on them."
  },
  {
    "objectID": "civitas/repl.html#persistent-workspace-benefits",
    "href": "civitas/repl.html#persistent-workspace-benefits",
    "title": "I’ll take a side of REPL with that",
    "section": "Persistent Workspace Benefits",
    "text": "Persistent Workspace Benefits\nThe sidebar REPL mirrors the intuitive “one environment, one REPL” model, keeping state across interactions.\n\n(kind/hiccup\n  '((require '[reagent.core :as r])\n    (defonce state (r/atom {:zaniness \"moderate\"\n                            :mood \"curious\"}))))\n\n\nWe start with some initial mood and zaniness. Here’s a suggestion to modify it:\n(swap! state assoc :zaniness \"maximum\")\n\n\n\n\n\n\nTip\n\n\n\nClick the “copy” icon in the code example to transfer it to the REPL window.\n\n\nAnd now we’ll add to the post a mini-app for monitoring the state.\n\n(kind/hiccup\n  [:div.card {:style {:margin \"20px 0\"\n                      :max-width \"600px\"}}\n   [:div.card-header.bg-success.text-white\n    [:h5.mb-0 \"🔍 State Monitor\"]]\n   [:div.card-body\n    [:dl.row.mb-0\n     [:dt.col-sm-3.text-end \"Current state:\"]\n     [:dd.col-sm-9\n      [:div.p-2.bg-light.border.rounded.font-monospace.small\n       ['(fn [] (pr-str @state))]]]\n     [:dt.col-sm-3.text-end \"Instructions:\"]\n     [:dd.col-sm-9.text-muted.small\n      \"Try: \" [:div.sourceCode [:code \"(swap! state assoc :key \\\"value\\\")\"]] \" in the REPL\"]]]])\n\n🔍 State MonitorCurrent state:Instructions:Try: (swap! state assoc :key \"value\") in the REPL\nThe state you create in the REPL affects page components."
  },
  {
    "objectID": "civitas/repl.html#curated-and-open-exploration",
    "href": "civitas/repl.html#curated-and-open-exploration",
    "title": "I’ll take a side of REPL with that",
    "section": "Curated and Open Exploration",
    "text": "Curated and Open Exploration\nAuthors can provide focused examples for specific learning goals, while readers can pursue tangents. Here’s an example showcasing Clojure’s frequencies function with some delicious data:\n\n(frequencies [\"apple\"\n              \"banana\"\n              \"apple\"\n              \"cherry\"\n              \"banana\"\n              \"apple\"])\n\n\n{\"apple\" 3, \"banana\" 2, \"cherry\" 1}\n\nTry it with different data, maybe the letters in your name.\n(frequencies \"supercalifragilisticexpialidocious\")\nOr simulate random selections:\n(frequencies (repeatedly 1000\n                         #(rand-nth [:a :b :c :d :e :f])))"
  },
  {
    "objectID": "civitas/repl.html#visual-playground",
    "href": "civitas/repl.html#visual-playground",
    "title": "I’ll take a side of REPL with that",
    "section": "Visual Playground",
    "text": "Visual Playground\nThe REPL can affect components on the page. This interactive canvas demonstrates how data can drive visual elements.\n\n(kind/hiccup\n  [:div.card {:style {:margin \"20px 0\"}}\n   [:div.card-header.bg-primary.text-white\n    [:h5.mb-0 \"🎨 Interactive Canvas\"]]\n   [:div.card-body\n    [:p.mb-3 \"Shapes controlled by \" [:code \"@state\"] \" — use the REPL to create and modify them.\"]\n    ['(fn []\n       [:svg {:xmlns \"http://www.w3.org/2000/svg\"\n              :width \"100%\"\n              :height \"250px\"\n              :viewBox \"0 0 500 250\"\n              :style {:border \"2px solid #dee2e6\" :border-radius \"4px\" :background \"#f8f9fa\"}}\n        ;; Grid pattern\n        [:defs\n         [:pattern {:id \"grid\" :width \"50\" :height \"50\" :patternUnits \"userSpaceOnUse\"}\n          [:path {:d \"M 50 0 L 0 0 0 50\" :fill \"none\" :stroke \"#e9ecef\" :stroke-width \"1\"}]]]\n        [:rect {:width \"500\" :height \"250\" :fill \"url(#grid)\"}]\n        ;; Dynamic shapes from state\n        (for [{:keys [type x y size color]} (:shapes @state)]\n           (case type\n             :circle [:circle {:cx x :cy y :r size :fill color :stroke \"#333\" :stroke-width 1}]\n             :square [:rect {:x (- x size) :y (- y size)\n                             :width (* 2 size) :height (* 2 size)\n                             :fill color :stroke \"#333\" :stroke-width 1}]\n             :triangle [:polygon {:points (str x \",\" (- y size) \" \"\n                                               (- x size) \",\" (+ y size) \" \"\n                                               (+ x size) \",\" (+ y size))\n                                  :fill color :stroke \"#333\" :stroke-width 1}]\n             nil))])]]])\n\n🎨 Interactive CanvasShapes controlled by @state — use the REPL to create and modify them.\nAdd a single shape (maybe a tiny orange dot? 🟠):\n(swap! state update :shapes conj\n  {:type :circle :x 250 :y 200 :size 15 :color \"#f39c12\"})\n\n\n\n\n\n\nTip\n\n\n\nClick the “copy” icon in the code example to transfer it to the REPL window, then press CTRL+Enter to eval.\n\n\nAdd more shapes by modifying the :shapes vector:\n(swap! state update :shapes into\n  [{:type :circle :x 100 :y 100 :size 30 :color \"#e74c3c\"}\n   {:type :square :x 200 :y 150 :size 25 :color \"#3498db\"}\n   {:type :triangle :x 350 :y 100 :size 40 :color \"#2ecc71\"}])\nGenerate a ✨random constellation✨:\n(swap! state assoc :shapes\n  (repeatedly 15\n    #(hash-map :type (rand-nth [:circle :square :triangle])\n               :x (rand-int 500)\n               :y (rand-int 250)\n               :size (+ 8 (rand-int 25))\n               :color (rand-nth [\"#e74c3c\" \"#3498db\" \"#2ecc71\"\n                                 \"#f39c12\" \"#9b59b6\" \"#1abc9c\"]))))"
  },
  {
    "objectID": "civitas/repl.html#the-full-development-experience",
    "href": "civitas/repl.html#the-full-development-experience",
    "title": "I’ll take a side of REPL with that",
    "section": "The Full Development Experience",
    "text": "The Full Development Experience\nWhile the sidebar REPL provides convenient experimentation for simple examples, the real power of Clay is in working with the source code. Clone the repository and open it in your editor to get the full interactive notebook experience. You can modify examples, create new namespaces, and contribute ideas back to the community. Add your own namespace under src/ and it is published as a new post."
  },
  {
    "objectID": "civitas/repl.html#sidebar-repl-usage",
    "href": "civitas/repl.html#sidebar-repl-usage",
    "title": "I’ll take a side of REPL with that",
    "section": "Sidebar REPL Usage",
    "text": "Sidebar REPL Usage\nClojureCivitas authors can require this namespace and enable the REPL sidebar:\n(require '[civitas.repl :as repl])\n(repl/scittle-sidebar)\nSet :page-layout :full in the :quarto metadata to make best use of the available page space.\n\n\n\nI’ll have the static examples with a side of REPL, thanks"
  },
  {
    "objectID": "civitas/repl.html#wrapping-up",
    "href": "civitas/repl.html#wrapping-up",
    "title": "I’ll take a side of REPL with that",
    "section": "Wrapping Up",
    "text": "Wrapping Up\nI hope you enjoyed exploring this sidebar REPL approach. The sidebar REPL complements Clay’s strength of showing examples and results. Authors can intersperse static examples with outputs and interactive prompts for experimentation. The real magic happens when you clone this repository and work with the source code directly.\nReady to contribute? Add your own namespace under src/ and it becomes a new post automatically.\nJoin the conversation: The best place to discuss this feature, share improvements, or ask questions is the Zulip: clay-dev channel\nGive it a try and let us know what you think! 🚀\n\n\nsource: src/civitas/repl.clj"
  },
  {
    "objectID": "math/primes/factorization/sieve_augmented.html",
    "href": "math/primes/factorization/sieve_augmented.html",
    "title": "Factorization of Eratosthenes",
    "section": "",
    "text": "Adapts the Sieve of Eratosthenes to prime factorize numbers through n.\n\n(defn prime-factors [n]\n  (reduce\n   (fn [factors prime]\n     (if (= 1 (count (nth factors prime)))\n       (reduce\n        (fn [factors multiple]\n          (let [[composite-divisor :as divisors] (nth factors multiple)]\n            (if (&lt; prime composite-divisor)\n              (let [remaining-divisor (/ composite-divisor prime)\n                    remaining-divisors (nth factors remaining-divisor)\n                    prime-divisors (cons prime (rest divisors))]\n                (assoc\n                 factors multiple\n                 (if (&lt; 1 (count remaining-divisors))\n                   (concat remaining-divisors prime-divisors)\n                   (cons remaining-divisor prime-divisors))))\n              factors)))\n        factors\n        (range (* prime prime) (inc n) prime))\n       factors))\n   (mapv list (range (inc n)))\n   (range 2 (inc (m/sqrt n)))))\n\n\n(prime-factors 13)\n\n\n[(0)\n (1)\n (2)\n (3)\n (2 2)\n (5)\n (3 2)\n (7)\n (2 2 2)\n (3 3)\n (5 2)\n (11)\n (3 2 2)\n (13)]\n\n\nsource: src/math/primes/factorization/sieve_augmented.clj"
  },
  {
    "objectID": "math/stats/quantquestions/what_are_the_odds/five_pirates_treasure.html",
    "href": "math/stats/quantquestions/what_are_the_odds/five_pirates_treasure.html",
    "title": "Five Pirates Treasure Splitting",
    "section": "",
    "text": "Welcome back code champs, number ninjas, and data divers to the second episode of “What are the Odds?” where we answer life’s important questions.\n\nI was out treasure hunting with four friends the other day, and we found 100 gold coins. To split the booty, I came up with a genius plan. We take turns proposing how to divide the gold, and if half the crew agrees, we go with it. But if not I get nothing and the next person makes a proposal and so on. To my surprise, the others loved the idea! “A democracy of pirates!” said one. “A fair and logical system!” said another. Even our parrot nodded in approval. Can you guess how many coins I walked away with?\n\n(def pirates\n  [\"Green Boots\" \"Red Rackham\" \"Blue Thunder\" \"Black Beard\" \"Tim\"])\n\nWith only one pirate, they get all the booty\n\nGreen Boots: 100\n\nWith 2 pirates, whoever proposes the split gets all the booty\n\nRed Rackham 100\nGreen Boots 0\n\nWith 3 pirates, the pirate who would miss out in the next round is incentivised by 1 coin\n\nBlue Thunder 99\nRed Rackham 0\nGreen Boots 1\n\nWith 4 pirates, 1 vote needed, the pirate who would miss out is incentivised by 1 coin\n\nBlack Beard 99\nBlue Thunder 0\nRed Rackham 1\nGreen Boots 0\n\nWith 5 pirates, 2 votes needed, the 2 pirates who would miss out in the next round get a coin each\n\nTim 98\nBlack Beard 0\nBlue Thunder 1\nRed Rackham 0\nGreen Boots 1\n\nProbably you can spot a pattern emerging here…\n\n(defn split [coins pirates]\n  (let [n (count pirates)]\n    (-&gt; (mapv vector\n              (reverse pirates)\n              (cycle (if (odd? n) [1 0] [0 1])))\n        (assoc-in [0 1] (- coins (/ (if (odd? n) (dec n) n) 2))))))\n\n\n(split 100 pirates)\n\n\n[[\"Tim\" 98]\n [\"Black Beard\" 0]\n [\"Blue Thunder\" 1]\n [\"Red Rackham\" 0]\n [\"Green Boots\" 1]]\n\n\n^:kind/table\n(split 100 pirates)\n\n\n\n\n\n\nTim\n98\n\n\nBlack Beard\n0\n\n\nBlue Thunder\n1\n\n\nRed Rackham\n0\n\n\nGreen Boots\n1\n\n\n\n\n\n\n\n\nScallywag Pirate\n\n\nWell, it got me thinking, what if sharing your ideas was as easy as tricking treasure hunters? No sword fights. No mutiny. Just a fork, some code, a few comments, and a pull request. Let’s try it out. First I fork ClojureCivitas, Open the project, add a namespace, write some code, add some comments. Commit. Push. Pull request. Once it is merged, it is automatically published to the website. Doesn’t that look nice? I can even track how many people are reading my idea in these public analytics. If I want a quick preview, I use Clay to render the code and results to HTML. I hope you have an idea to share with me, Why not start a namespace and publish it this way?\nUntil next time, may your treasure split be fair and your adventures interesting.\n\nsource: src/math/stats/quantquestions/what_are_the_odds/five_pirates_treasure.clj"
  },
  {
    "objectID": "math/stats/central_limit_theorem_different_distributions.html",
    "href": "math/stats/central_limit_theorem_different_distributions.html",
    "title": "Convergence to Normal Distribution, independent of original distribution",
    "section": "",
    "text": "We mentioned last time that the result of combining more and more events will approach the normal distribution, regardless of the shape of the original event distribution. Let’s try to demonstrate that visually.\nOur previous definition of a random event is an example of a uniform distribution:\n\n(defn event []\n  (rand))\n\n\n(defn event-sample-dataset [event-fn sample-count]\n  {:index       (range sample-count)\n   :event-value (repeatedly sample-count event-fn)})\n\n\n(def uniform-ds (event-sample-dataset event 100000))\n\n\n(defn histogram [ds]\n  (-&gt; ds\n      (tc/dataset)\n      (plotly/layer-histogram\n       {:=x :event-value\n        :=histnorm \"count\"\n        :=histogram-nbins 40})\n      (plotly/layer-point)))\n\n\n(histogram uniform-ds)\n\n\nIf we combine several of these distributions, watch the shape of the distribution:\n\n(defn avg [nums]\n  (/ (reduce + nums) (count nums)))\n\n\n(defn combined-event [number-of-events]\n  (avg (repeatedly number-of-events event)))\n\n\n(histogram (event-sample-dataset #(combined-event 2) 100000))\n\n\n\n(histogram (event-sample-dataset #(combined-event 5) 100000))\n\n\n\n(histogram (event-sample-dataset #(combined-event 20) 100000))\n\n\nLet’s try this again with a different shape of distribution:\n\n(defn triangle-wave [x]\n  (-&gt; x (- 0.5) (Math/abs) (* 4.0)))\n\n\n(-&gt; (let [xs (range 0.0 1.01 0.01)\n          ys (mapv triangle-wave xs)]\n      (tc/dataset {:x xs :y ys}))\n    (plotly/layer-point\n     {:=x :x\n      :=y :y}))\n\n\nGenerating samples from this distribution is more complicated than I initially expected. This warrants a follow-up, but for now I’ll just link to my source for this method: Urban Operations Research by Richard C. Larson and Amedeo R. Odoni, Section 7.1.3 Generating Samples from Probability Distributions (see “The rejection method”).\n\n(defn sample-from-function [f x-min x-max y-min y-max]\n  (loop []\n    (let [x (+ x-min (* (rand) (- x-max x-min)))\n          y (+ y-min (* (rand) (- y-max y-min)))]\n      (if (&lt;= y (f x))\n        x\n        (recur)))))\n\n\n(defn event []\n  (sample-from-function triangle-wave 0.0 1.0 0.0 2.0))\n\n\n(def triangle-wave-ds (event-sample-dataset event 100000))\n\n\n(histogram triangle-wave-ds)\n\n\nLet’s combine several of these distributions:\n\n(histogram (event-sample-dataset #(combined-event 2) 100000))\n\n\n\n(histogram (event-sample-dataset #(combined-event 5) 100000))\n\n\n\n(histogram (event-sample-dataset #(combined-event 20) 100000))\n\n\nI find these visuals surprisingly powerful because you can see the original distribution “morph” into this characteristic shape.\nThe normal distribution holds a unique place in mathematics and in the world itself: whenever you combine multiple independent and identically-distributed events, the result will converge to the normal distribution as the number of combined events increases.\n\nsource: src/math/stats/central_limit_theorem_different_distributions.clj"
  },
  {
    "objectID": "games/beginning_to_build_a_browser_game.html",
    "href": "games/beginning_to_build_a_browser_game.html",
    "title": "Beginning to build a browser game",
    "section": "",
    "text": "I’m new to Clojure. I asked my new friend Timothy how to make a square appear on the screen:\n\n^:kind/hiccup\n[:svg [:rect {:width 50 :height 50}]]\n\n\nCompared to HTML:\n\n&lt;svg&gt;&lt;rect width=50 height=50 /&gt;&lt;/svg&gt;\n\nIt’s nice to not have to close tags, but I’m not sure about the colons, nor the dependencies.\nDependencies aside, we are this square. And we want to be able to move. Timothy, how can I move?\nWe’ll separate the position data from the rendering:\n\n(def world (atom {:player {:x 75 :y 75}}))\n\n\n(defn render [world]\n  ^:kind/hiccup\n  [:svg {:style {:border \"1px solid black\"}}\n   (for [[_entity-id {:keys [x y]}] world]\n     [:rect {:width 50 :height 50 :x x :y y}])])\n\n\n(render @world)\n\n\nWe’ll add an enemy to see how to work with atom:\n\n(swap! world assoc :enemy {:x 130 :y 75})\n\n\n{:player {:x 75, :y 75}, :enemy {:x 130, :y 75}}\n\n\n(render @world)\n\n\nLet us be different shapes:\n\n(defn render [world]\n  ^:kind/hiccup\n  [:svg {:style {:border \"1px solid black\"}}\n   (for [[entity-id {:keys [x y]}] world]\n     (if (= entity-id :player)\n       [:rect {:width 50 :height 50 :fill \"#62b133\" :x x :y y :id \"player\"}]\n       [:circle {:r 25 :fill \"#5880d9\" :cx x :cy y :id \"enemy\"}]))])\n\n\n(render @world)\n\n\nNow would be a perfect time to use Reagent to connect the user’s keyboard to our world atom. However, I couldn’t get it working with Clay (what we’re using to render this page). The dependencies have won the first battle.\nMoving on, we’ll resort to a script element. Clay lets us use JavaScript, but I couldn’t get it to work with curly braces. Suffering a one-liner, we can now move, via WASD on our keyboard.\n\n^:kind/hiccup\n[:script #\"document.addEventListener('keydown', e =&gt; (['w', 'W'].includes(e.key) && player.setAttribute('y', parseInt(player.getAttribute('y')) - 10) || ['a', 'A'].includes(e.key) && player.setAttribute('x', parseInt(player.getAttribute('x')) - 10) || ['s', 'S'].includes(e.key) && player.setAttribute('y', parseInt(player.getAttribute('y')) + 10) || ['d', 'D'].includes(e.key) && player.setAttribute('x', parseInt(player.getAttribute('x')) + 10)))\"]\n\n\n\nsource: src/games/beginning_to_build_a_browser_game.clj"
  },
  {
    "objectID": "clojure/transducers/what_if.html",
    "href": "clojure/transducers/what_if.html",
    "title": "What if… we were taught transducers first?",
    "section": "",
    "text": "Most Clojure tutorials start out with sequence functions like map, filter etc, and then explain how to avoid some of the problems that lazy sequences can cause. Transducers tend to be introduced later as a more advanced topic, but I’d argue that they could (and should) be taught earlier, and instead treat lazy sequences as an advanced topic.\nWhat if… we were taught transducers first?\nWe’re typically taught to use map or filter on a sequence or collection to produce a new sequence – and there’s often a comment that map applied to a vector does not produce a vector. With transducers, one of the key concepts is that the transformation is separated from the input and also from the output.\nLet’s start out with the sequence function, just to show how we can go straight to a sequence of results:\n\n(sequence (map inc) (range 5))\n\n\n(1 2 3 4 5)\n\nsequence works with multiple collections, like map:\n\n(sequence (map *) (range 5) (range 5) (range 5))\n\n\n(0 1 8 27 64)\n\n\n(sequence (map vector) (range 5) (range 5) (range 5))\n\n\n([0 0 0] [1 1 1] [2 2 2] [3 3 3] [4 4 4])\n\nHow about chaining several transformations together? We can use eduction (but see the caveats below about eduction):\n\n(eduction (filter even?) (map inc) (range 10))\n\n\n(1 3 5 7 9)\n\nLet’s look at producing different types of output, using into:\n\n(into [] (map inc) (range 5))\n\n\n[1 2 3 4 5]\n\n\n(into #{} (map inc) (range 5))\n\n\n#{1 4 3 2 5}\n\nUnder the hood, into uses conj so if you use a list, the order is reversed (because conj onto a list prepends items, whereas conj onto a vector appends items):\n\n(into () (map inc) (range 5))\n\n\n(5 4 3 2 1)\n\nFor the next level of control, we can use transduce to specify how to combine the results, as well as what we start with initially:\n\n(transduce (map inc) conj [] (range 5))\n\n\n[1 2 3 4 5]\n\n\n(transduce (map inc) conj #{} (range 5))\n\n\n#{1 4 3 2 5}\n\n\n(transduce (map inc) conj () (range 5))\n\n\n(5 4 3 2 1)\n\nWe might be tempted to use cons here, but its argument order is different from conj so this will fail:\n\n(transduce (map inc) cons () (range 5))\n\n\n\n\n\n\n\nDon’t know how to create ISeq from: java.lang.Long\n\n\n\n\n\n                    clojure.core/eval    core.clj: 3232\n                                  ...                 \nclojure.transducers.what-if/eval76442  REPL Input:     \n               clojure.core/transduce    core.clj: 7025\n                                  ...                 \n              clojure.core/map/fn{x2}    core.clj: 2759\n                    clojure.core/cons    core.clj:   29\n                                  ...                 \njava.lang.IllegalArgumentException: Don't know how to create ISeq from: java.lang.Long\n\n\n\n\n\nOkay, well, let’s use an anonymous function to reverse the order of the arguments:\n\n(transduce (map inc) #(cons %2 %1) () (range 5))\n\n\n\n\n\n\n\nWrong number of args (1) passed to: clojure.transducers.what-if/eval76444/fn–76445\n\n\n\n\n\n                    clojure.core/eval    core.clj: 3232\n                                  ...                 \nclojure.transducers.what-if/eval76444  REPL Input:     \n               clojure.core/transduce    core.clj: 7027\n              clojure.core/map/fn{x2}    core.clj: 2757\n                                  ...                 \nclojure.lang.ArityException: Wrong number of args (1) passed to: clojure.transducers.what-if/eval76444/fn--76445\n\n\n\n\n\nWhy is it trying to call our cons wrapper with a single argument? In addition to separating the transformation from the output, transduce also has a “completion” step, which is performed on the final result. A convenience function called completing can be used to wrap the function here to provide a “no-op” completion:\n\n(transduce (map inc) (completing #(cons %2 %1)) () (range 5))\n\n\n(5 4 3 2 1)\n\ncompleting lets us provide a “completion” function (instead of the default which is identity) so we could reverse the result:\n\n(transduce (map inc) (completing #(cons %2 %1) reverse) () (range 5))\n\n\n(1 2 3 4 5)\n\nInstead of producing a collection result, we can also use transduce to compute results in other ways:\n\n(transduce (map inc) + 0 (range 5))\n\n\n15\n\n\n(transduce (map inc) * 1 (range 5))\n\n\n120\n\nThe way (transduce xf f init coll) works is pretty much like this:\n(let [rf (xf f)]\n  (rf (reduce rf init coll)))\nNote how xf and f are combined to create a single “reducing function” (which is a 2-arity function that takes an accumulator and a value), for the reduce and then also applied to the result as a 1-arity function, which is what completing does for us in the above example.\nNow let’s circle back to chaining transformations, while also controlling the output type. We can use comp for this. As a recap, here’s our eduction from earlier:\n\n(eduction (filter even?) (map inc) (range 10))\n\n\n(1 3 5 7 9)\n\nWe can compose multiple transducers:\n\n(comp (filter even?) (map inc))\n\n\n#object [comp$fn]\n\nLet’s give this a name:\n\n(def evens+1 (comp (filter even?) (map inc)))\n\n\n(into [] evens+1 (range 10))\n\n\n[1 3 5 7 9]\n\n\n(into #{} evens+1 (range 10))\n\n\n#{7 1 3 9 5}\n\nWe glossed over the result of eduction earlier – it produced a sequence because we printed it out, but it is a “reducible” that has captured both its input and the series of transformations to apply, so we could pass it directly to into or transduce as if it were a collection:\n\n(into [] (eduction (filter even?) (map inc) (range 10)))\n\n\n[1 3 5 7 9]\n\n\n(into [] (eduction evens+1 (range 10)))\n\n\n[1 3 5 7 9]\n\nBecause it is a “reducible”, it only does work when it is consumed, so it is “lazy” in that sense, but it is not a lazy sequence. We can get a lazy sequence from a transducer using sequence, if we want, or we can rely on into and transduce etc being eager. In addition, eduction performs the transformations each time it is consumed:\n\n(let [s (eduction (map #(inc (doto % println))) (range 5))]\n  [(into [] s)\n   (into [] s)])\n\n\n\n\n\n\n\nOUT\n\n\n\n0\n1\n2\n3\n4\n0\n1\n2\n3\n4\n\n\n\n\n[[1 2 3 4 5] [1 2 3 4 5]]\n\nThat will print 0 1 2 3 4 twice, because the eduction is consumed twice. Compare that behavior to sequence, which produces a lazy sequence and caches its results:\n\n(let [s (sequence (map #(inc (doto % println))) (range 5))]\n  [(into [] s)\n   (into [] s)])\n\n\n\n\n\n\n\nOUT\n\n\n\n0\n1\n2\n3\n4\n\n\n\n\n[[1 2 3 4 5] [1 2 3 4 5]]\n\nThis will only print 0 1 2 3 4 once.\nIn conclusion, by separating the transformation from the input and the output, we gain expressive power, flexibility, and reuse: we can compose transducers, we can apply them to any input that produces values, and consume the results in any way we like.\nFor example, transducers can be used in several different ways with core.async channels:\n\non a channel\nin a pipeline\nor consumed with transduce\n\n\nsource: src/clojure/transducers/what_if.clj"
  },
  {
    "objectID": "blog/kirahowe/2020-09-02-the-life-you-can-save.html",
    "href": "blog/kirahowe/2020-09-02-the-life-you-can-save.html",
    "title": "The Life You Can Save",
    "section": "",
    "text": "What are our ethical obligations to each other? It’s a complicated question. Living in a civilised society implies abiding by a set of shared rules. Some are explicit like laws and contracts, some are implicit like cultural norms, and some are disputed. Whether we have an obligation to care for others, and if so to what extent, often ends up being debated as a political issue, but at its core it’s a philosophical question.\nPeter Singer’s book “The Life You Can Save” addresses the ethical implications of being rich in a world where poverty is rampant from this point of view. It’s an uncomfortable topic, at least for me, but an important one. Early in the book he articulates his goal:\nI share this goal, which is the point of this blog post."
  },
  {
    "objectID": "blog/kirahowe/2020-09-02-the-life-you-can-save.html#who-is-rich",
    "href": "blog/kirahowe/2020-09-02-the-life-you-can-save.html#who-is-rich",
    "title": "The Life You Can Save",
    "section": "Who is rich?",
    "text": "Who is rich?\nI think making Singer’s point land with most people will require a check in on the state of the world. I live in Canada, where life is honestly pretty good for most people, and it’s easy to forget that an average Canadian lifestyle is exceedingly luxurious from a global perspective.\nEven with an income of $0 per year, a Canadian will have access to world class education and health care, and most likely also clean water, indoor plumbing, a refrigerator, and internet access, which is more than can be said for hundreds of millions people on earth. Earning just minimum wage with full time hours lands a Canadian in the richest 12% of people in the world.\nObviously Canada has loads of problems and I’m not suggesting it should get a pass on any of them. I’m also not suggesting it’s easy to be poor in Canada or that we shouldn’t be working to alleviate poverty in rich countries. This is just to frame the issue from Singer’s perspective, because I think his argument is more salient in the context of global poverty. Seen through this lens, it’s easier to understand it as an emergency that needs our attention, rather than something we can worry about later, or not at all."
  },
  {
    "objectID": "blog/kirahowe/2020-09-02-the-life-you-can-save.html#there-is-no-fundamental-difference-between-us",
    "href": "blog/kirahowe/2020-09-02-the-life-you-can-save.html#there-is-no-fundamental-difference-between-us",
    "title": "The Life You Can Save",
    "section": "There is no fundamental difference between us",
    "text": "There is no fundamental difference between us\nPeter Singer’s argument is essentially that there is no morally relevant difference between us and people living in poverty in far away places, so there is no justification for not caring about them the same way we care about ourselves and people close to us.\nThere are millions of people every year who suffer or die from diseases that could have been prevented or treated for as little as a few dollars; things like trachoma, tuberculosis, malaria, measles, among others. Singer points out that we regularly spend thousands or tens of thousands of dollars saving lives in the developed world, then argues that the suffering of people we don’t know must matter at least one-thousandth as much as our own, so there is no justification for ignoring their plight. We don’t think twice about spending huge amounts of money on medical treatment for ourselves, and we intuitively prioritise such spending above things like eating out or travelling. It’s obvious to us that our health matters more than having or doing more things we don’t really need, so shouldn’t we also prioritise the alleviation of others’ suffering above our own wanting non-essential things?\nIt’s a simple argument, but a sound one. Refuting it requires arguing that our own desire for luxury items is more important than the life of a stranger. Most people intuit this as clearly unethical, even without careful consideration of the formal argument."
  },
  {
    "objectID": "blog/kirahowe/2020-09-02-the-life-you-can-save.html#we-can-and-should-do-more-to-help-the-poor",
    "href": "blog/kirahowe/2020-09-02-the-life-you-can-save.html#we-can-and-should-do-more-to-help-the-poor",
    "title": "The Life You Can Save",
    "section": "We can and should do more to help the poor",
    "text": "We can and should do more to help the poor\nHaving made his argument, Singer spends the rest of the book discussing what it might look like in practice if we followed through with his recommendations. The point I took away from this section is that most people wouldn’t have to change their lifestyles much at all to divert an amount of money toward effective organisations that would make a significant difference in the lives of those in need. There are a lot of gains to be had by optimising our existing habits for efficiency. On the topic of malnutrition and food insecurity, he writes:\n\nThe world is not running out of food. The problem is that people in high-income countries have found a way to consume four or five times as much food as would be possible if they were to eat the crops we grow directly.\n\nThis is an argument I’ve heard before. There is enough food on earth to feed everyone, yet millions still subsist on starvation diets because of inefficiency and waste. Singer presents the data to make a convincing argument that there is some low hanging fruit here that could have a massive impact and save thousands if not millions of lives. We wouldn’t have to change our own standard of living, just prioritise efficiency and optimise for maximum social benefit instead of the things we do at the moment, like profit and growth."
  },
  {
    "objectID": "blog/kirahowe/2020-09-02-the-life-you-can-save.html#psychological-insights",
    "href": "blog/kirahowe/2020-09-02-the-life-you-can-save.html#psychological-insights",
    "title": "The Life You Can Save",
    "section": "Psychological insights",
    "text": "Psychological insights\nHaving made the case for why we should give more and demonstrated that it’s possible without much impact to our own lives, let alone unreasonable hardship, Singer discusses the psychology of altruism. There are some interesting ways most people think that both explain why we’re so often indifferent to far-away suffering and suggest how we might change that.\nFor example, many studies show that people give more when they believe others are giving more, so we ought to publicise our giving in order to inspire others to join us.\nSinger acknowledges that this is difficult. For one, it’s sort of taboo to talk about money in most western cultures. People consider financial information, including how much they give, private information. It also appears to contradict the teachings of some ancient and very influential philosophers. Maimonides classifies anonymous giving as the highest form of altruism, and Jesus echos that wisdom in the New Testament. I believe there’s something worth paying attention to in both of those traditions, but helping the least among us is a teaching absolutely central to both Judaism and Christianity. If being public about our giving will accomplish that then there’s something to reconcile between these two apparently contradictory teachings. That’s a topic for another day, but I wanted to flag it here because it’s adjacent to other areas I think a lot about. Singer is aware that it’s a big ask and is uncomfortable for many people raised in Judeo-Christian societies, but he essentially dismisses this concern, arguing that our discomfort is our own problem and not a justification for selfishness. I have to agree with him.\nHe also mentions some other well documented and by now well known phenomena, like how people give more when they feel a personal connection to the beneficiaries of their generosity, or how people give more when it’s automated as a monthly withdrawal or fixed percentage of income. These are useful insights that many charities have applied to influence people to give more, and can be useful in our own conversations about removing barriers to giving."
  },
  {
    "objectID": "blog/kirahowe/2020-09-02-the-life-you-can-save.html#improving-aid",
    "href": "blog/kirahowe/2020-09-02-the-life-you-can-save.html#improving-aid",
    "title": "The Life You Can Save",
    "section": "Improving aid",
    "text": "Improving aid\nNot many of us are in a position to meaningfully impact government policy, but Singer does discuss some issues with the way foreign aid is currently allocated and spent. It’s an interesting lesson in bureaucracy, but ultimately my impression is that there’s not a whole lot an average citizen can do, other than campaign and vote for reform in the long run.\nThe main issue with aid at the moment appears to be that it’s become politicised, like so many other government-run programmes. One example he gives is agricultural subsidies – wealthy farmers in developed nations are regularly subsidised with tax payer money, meaning they can sell their harvest for cheaper than peasant farmers in low income countries. Aid often comes with strings attached, like requiring that the money be spent on these artificially cheap agricultural products, which often must also be delivered by national carriers. In many countries foreign aid is effectively a roundabout way to subsidise national interests, which needless to say is all kinds of inefficient and bad.\nSinger reckons there are large gains to be had in optimising government spending on foreign aid, whilst acknowledging it’s an area fraught with political and economic side effects and out of reach for many ordinary people. Regardless, it’s worth having on your radar as an issue to consider when choosing who to vote for. De-politicising aid could lead to it being given to the organisations that will do the most good in beneficiary countries, rather than the ones that will deliver the biggest political gains domestically. That would be a huge win, so even though it’s a large and complicated goal, it’s still one worth pursuing."
  },
  {
    "objectID": "blog/kirahowe/2020-09-02-the-life-you-can-save.html#what-would-it-take-to-end-this-emergency",
    "href": "blog/kirahowe/2020-09-02-the-life-you-can-save.html#what-would-it-take-to-end-this-emergency",
    "title": "The Life You Can Save",
    "section": "What would it take to end this emergency?",
    "text": "What would it take to end this emergency?\nThe book wraps up with a realistic plan to implement Singer’s recommendations. He makes a compelling case that we could collectively donate enough money to end world poverty without any noticeable impact to our standard of living. He proposes a sliding scale, similar to the progressive tax systems of many developed countries, where the amount one gives is a percentage of total income, albeit with a much higher floor than taxes. For example he suggests someone earning $80,000 per year donate just 1% of their income, or about $65 per month. To find out what the top altruism researchers in the world estimate you should donate in order to have an impact that saves lives, you can enter your own salary into their calculator. The percentage increases with income, but it honestly seems quite reasonable to me. Near the end of the book he argues\n\nending large-scale extreme poverty would be completely achievable, without imposing hardship on anyone.\n\nThat’s based on some calculations that would have millionaires and billionaires donating large proportions of their income (not necessarily total wealth) and everyone else donating at least a small percentage of their income.\n\nI’m curious what factors other than a simple lack of cash prevent the alleviation of suffering and eradication of world poverty. It appears as though there are enough benevolent billionaires in the world that if it were a simple matter of raising funds, we could have done it by now. I think that’s a question worth investigating, but I don’t think leaving it unanswered for now takes anything away from Singer’s argument that we all can and should be doing at least something to help the poor.\nHe’s right that we’re living in the midst of an emergency. About 15,000 children die every day from diseases that we can afford to prevent or treat. That would be an intolerable situation if it were happening in our own countries, and once we accept that the anonymity and distance of those people really carries no weight in the decision to do something about their suffering or not, the urgency really starts to sink in.\nThis was my attempt to cover the main arguments of “The Life You Can Save”, and hopefully to convince you that Peter Singer is right. We should all be donating money to help to end the entirely avoidable suffering of our fellow humans.\nFor a list of the charities that are most effective at doing that, see Give Well, or the “Best Charities” list on the book’s own website. Many of the top charities are based in the USA or UK, so if you’re in Canada like me, you can make tax-advantaged donations to these organisations through RC Forward to maximize your impact. For a deeper dive or clarification of anything I wrote about here, the book is available for free as an e-book or audiobook. I’m beginning to evaluate the changes I need to make in my own life, and hope you’ll do the same."
  },
  {
    "objectID": "blog/kirahowe/2020-08-03-why-is-web-development-so-complicated.html",
    "href": "blog/kirahowe/2020-08-03-why-is-web-development-so-complicated.html",
    "title": "Why Are Websites So Complicated Now?",
    "section": "",
    "text": "I first got into programming because I wanted to make my own websites. Back then all it took was two files, an index.html and a style sheet. I recently decided to take up blogging again and started looking around for a simple static site generator. There are a couple of reasons why I avoided some other approaches.\nI’ve been writing software for the internet for some years now, but it’s been a while since I worked on anything like what we think of as a normal website. When I started looking into how those are made these days, I was surprised to find mostly complicated, bloated frameworks that nearly completely abstract away the basic task of generating HTML.\nIt doesn’t take multiple new languages, frameworks, or build tools to make a really simple website."
  },
  {
    "objectID": "blog/kirahowe/2020-08-03-why-is-web-development-so-complicated.html#content-is-not-software",
    "href": "blog/kirahowe/2020-08-03-why-is-web-development-so-complicated.html#content-is-not-software",
    "title": "Why Are Websites So Complicated Now?",
    "section": "Content is not software",
    "text": "Content is not software\nFrameworks are for people building sophisticated software that happens to run in a browser. There is no need for them if all you want to do is put some content on the internet. I will argue that if your main goal is publishing content you don’t even need JavaScript at all.\nJavaScript frameworks mostly help by allowing us to write non-trivial software in a language less terrible than JavaScript itself. They can also help with things like managing state, reacting to user input, and communicating asynchronously with a server to get new information onto a page without needing to refresh the whole thing. None of these challenges are present when the main purpose of a website is to display static information.\nFor that, all we should need is a language to markup our plain words into something a browser can render, like HTML."
  },
  {
    "objectID": "blog/kirahowe/2020-08-03-why-is-web-development-so-complicated.html#a-simple-static-site-generator",
    "href": "blog/kirahowe/2020-08-03-why-is-web-development-so-complicated.html#a-simple-static-site-generator",
    "title": "Why Are Websites So Complicated Now?",
    "section": "A simple static site generator",
    "text": "A simple static site generator\nI prefer writing software over configuring software, and I resent things that are more complicated than they need to be. I’m a minimalist by nature and I am against the direction our industry is currently headed – shipping bloated and buggy software by the ton – but that’s a topic for another day.\nAfter some investigation and frustration trying to do simple things, like edit canned templates or change the source and structure of my content, I of course decided to write my own static site generator, like any sane developer would do.\nFor now all it does is convert my posts (which I write in markdown) into HTML and insert that HTML into a template, then put those files in the right place. As my blog grows I’ll add more features, and maybe even make it useful enough for someone else to use someday. For now it’s a simple solution that works on my machine, and was definitely more enjoyable for me to write than was faffing with configuring the other tools I tried."
  },
  {
    "objectID": "blog/kirahowe/2020-08-03-why-is-web-development-so-complicated.html#a-plea-for-simplicity",
    "href": "blog/kirahowe/2020-08-03-why-is-web-development-so-complicated.html#a-plea-for-simplicity",
    "title": "Why Are Websites So Complicated Now?",
    "section": "A plea for simplicity",
    "text": "A plea for simplicity\nI get that a lot of people are not making simple websites anymore. There is some seriously sophisticated software running in browsers now, which I understand is the reason for the proliferation of JavaScript frameworks and build tools currently plaguing our work lives.\nA lot of people are still simply publishing content to the internet, though, and we seem to have forgotten what a website is really made of. It’s just HTML (which is supposed to semantically mark up content to describe its meaning and structure), and optional styling with CSS (to describe it’s appearance). These languages are not so complicated to write that we need complex frameworks that add a dozen more layers between the content and the final static pages. If all you want is to put some information on the internet, see if an old fashioned HTML file might be all you need."
  },
  {
    "objectID": "blog/kirahowe/2021-02-17-fast-cli-with-clojure.html",
    "href": "blog/kirahowe/2021-02-17-fast-cli-with-clojure.html",
    "title": "Building A Fast Command Line App With Clojure",
    "section": "",
    "text": "Originally published on February 18, 2021\nLike most developers, I always have about a hundred ideas for little tools or apps I wish existed. Every once in a while I get the time and energy to magic one of them into existence. Clojure is my language of choice these days, but at first glance it’s not super well suited to building little command-line apps (which is usually what I start with). Some things that make it not an obvious first choice:\nThis post is about how to build a command-line app with Clojure, using tools.deps and GraalVM.\nI assume you already have Clojure (including the CLI) and GraalVM installed. I use jabba to manage JVMs on my machine, and installed and setup a GraalVM by running jabba install graalvm-ce-java11@20.3.0 and then jabba use graalvm-ce-java11@20.3. You also need the GraalVM native image utility, which I installed with gu install native-image."
  },
  {
    "objectID": "blog/kirahowe/2021-02-17-fast-cli-with-clojure.html#graalvm-and-clojure-community-to-the-rescue",
    "href": "blog/kirahowe/2021-02-17-fast-cli-with-clojure.html#graalvm-and-clojure-community-to-the-rescue",
    "title": "Building A Fast Command Line App With Clojure",
    "section": "GraalVM and Clojure community to the rescue",
    "text": "GraalVM and Clojure community to the rescue\nGraalVM is basically a super fast JVM, which solves the problem of slow startup time. You can use it to build a standalone executable out of your Clojure app that will run instantly.\nEven though there’s no batteries-included way to manage Clojure projects, the community has put together a lot of great tools and guides the cover all the bases. The community seems to be converging around the official Clojure CLI and associated tooling as the preferred way to manage Clojure projects. It’s extremely well designed, like most things Clojure, but, also like most things Clojure, it’s very bare-bones. It’s not an all-in-one command-line utility you can use to manage your whole project, like the angular or rails CLIs (which I didn’t appreciate nearly enough in my former life 😢). You need to configure the Clojure CLI itself for it to be useful, but luckily that’s really straightforward to do. What follows are the steps I did to make a new skeleton command-line app in Clojure. It follows the steps from this great guide, but I included the actual commands here because I use the Clojure CLI (clj) instead of lein to run things."
  },
  {
    "objectID": "blog/kirahowe/2021-02-17-fast-cli-with-clojure.html#make-a-new-clojure-project",
    "href": "blog/kirahowe/2021-02-17-fast-cli-with-clojure.html#make-a-new-clojure-project",
    "title": "Building A Fast Command Line App With Clojure",
    "section": "1. Make a new Clojure project",
    "text": "1. Make a new Clojure project\nI use Sean Corfield’s clj-new project to initialize new Clojure projects. Install it for your environment according the instructions in his README, then run clj -X:new :template app :name kiramclean/test-cli to generate a new Clojure project (but replace kiramclean/test-cli with &lt;your-name&gt;/&lt;project-name&gt;)."
  },
  {
    "objectID": "blog/kirahowe/2021-02-17-fast-cli-with-clojure.html#make-an-uberjar",
    "href": "blog/kirahowe/2021-02-17-fast-cli-with-clojure.html#make-an-uberjar",
    "title": "Building A Fast Command Line App With Clojure",
    "section": "2. Make an uberjar",
    "text": "2. Make an uberjar\nThe app template from clj-new includes a default namespace that just prints “Hello, World!” and an alias for building an uberjar, which is just a java app that includes all the dependencies it needs so it can run on its own without worrying about what’s installed or not on the host.\nRun clj -X:uberjar in your app directory, which should build a test-cli.jar. You can run your app now like java -jar test-cli.jar, and cry about how slow it is."
  },
  {
    "objectID": "blog/kirahowe/2021-02-17-fast-cli-with-clojure.html#make-a-standalone-executable-with-graalvm",
    "href": "blog/kirahowe/2021-02-17-fast-cli-with-clojure.html#make-a-standalone-executable-with-graalvm",
    "title": "Building A Fast Command Line App With Clojure",
    "section": "3. Make a standalone executable with GraalVM",
    "text": "3. Make a standalone executable with GraalVM\nNow you can use GraalVM to turn your uberjar into a snappy CLI. Run this magic command (note the names — the -jar option is the location of the uberjar you just made and -H:Name= is the name of your future executable).\nnative-image --report-unsupported-elements-at-runtime \\\n             --initialize-at-build-time \\\n             --no-server \\\n             --no-fallback \\\n             -jar test-cli.jar \\\n             -H:Name=test-cli\nIt takes a while on my machine for that to finish, but once it does you’re good to go! You should have a standalone executable now that you can run from your terminal, which executes your Clojure app natively, and is way faster than running the jar on a regular JVM! Cool.\n❯ time java -jar test-cli.jar\nHello, World!\njava -jar test-cli.jar  4.31s user 1.10s system 113% cpu 4.792 total\n\n❯ time ./test-cli\nHello, World!\n./test-cli  0.05s user 0.01s system 70% cpu 0.086 total"
  },
  {
    "objectID": "blog/kirahowe/2021-02-17-fast-cli-with-clojure.html#thats-all-for-now",
    "href": "blog/kirahowe/2021-02-17-fast-cli-with-clojure.html#thats-all-for-now",
    "title": "Building A Fast Command Line App With Clojure",
    "section": "That’s all for now",
    "text": "That’s all for now\nI made an executable bin/build script in my project with this in it to make the two steps above simpler:\n#!/bin/bash\n\necho \"Build jar...\"\n\nclj -X:uberjar\n\necho \"Nativize it...\"\n\nnative-image --report-unsupported-elements-at-runtime \\\n             --initialize-at-build-time \\\n             --no-server \\\n             --no-fallback \\\n             -jar test-cli.jar \\\n             -H:Name=./test-cli\n\necho \"Success! Good to run ./test-cli\"\nThe next thing I want to do is add some command-line options and a help menu, but this is already getting kind of long, so I’ll leave it here for now. Happy coding 🙂"
  },
  {
    "objectID": "blog/kirahowe/2020-09-17-an-atheist-tries-religion.html",
    "href": "blog/kirahowe/2020-09-17-an-atheist-tries-religion.html",
    "title": "An Atheist Tries Religion",
    "section": "",
    "text": "I grew up as an outsider to religion. I never considered it a worthwhile pursuit and spent quite a few years as an outspoken critic. As an adult I began to explore it for myself, and I now have what I would count as a spiritual life. I still find most of what religions teach very hard to believe, but I’ve also found a lot of value in them. My secular education left me desperately unprepared for the hardships of adulthood and, like many people who turn to religion, when life sent me seeking answers I ended up in church. Spoiler alert: I didn’t find any answers, but I did find wisdom and traditions that I now believe have great potential.\nI’ve told my story dozens of times, but I’m sharing it here partially to fill in some details that inevitably get left out when I have three minutes to answer the question “What brought you here?”, and partly as a record for my future self of where I’m at in this moment."
  },
  {
    "objectID": "blog/kirahowe/2020-09-17-an-atheist-tries-religion.html#negativity-and-antagonism",
    "href": "blog/kirahowe/2020-09-17-an-atheist-tries-religion.html#negativity-and-antagonism",
    "title": "An Atheist Tries Religion",
    "section": "Negativity and antagonism",
    "text": "Negativity and antagonism\nIt’s hard to overstate how antagonistic I was toward religion before all this began. I spent my early twenties becoming an enthusiastic disciple of the New Atheists. I read very nearly everything Christopher Hitchens, Sam Harris, and Richard Dawkins ever wrote, watched hundreds of hours of recordings of them eviscerating fundamentalist believers on YouTube, and spent more time than that arguing in their style with actual people – mostly on the internet but some face to face, mostly strangers but not all.\nI still think they’re right about a lot of things, but I realize now that what they criticize is really a caricature of religion. I’ll get into what we agree on some other time, but basically where I realized they’re wrong is in their wholesale dismissal of faith in all its manifestations. Not all faith is delusional or dangerous. By responding to bad theology with aggressive and contemptuous atheism, we miss out on a world of spiritual pursuits that can be at once enriching, life-giving, and mind-opening. That world is where humanity has found solace and inspiration from the beginning, and it’s frankly a waste of time to completely discard it and try to build a suitable secular replacement when we inevitably end up needing solace and inspiration ourselves. I’m now convinced that that world is worth approaching with more nuance, if also some caution and a level head."
  },
  {
    "objectID": "blog/kirahowe/2020-09-17-an-atheist-tries-religion.html#meaningful-conversations",
    "href": "blog/kirahowe/2020-09-17-an-atheist-tries-religion.html#meaningful-conversations",
    "title": "An Atheist Tries Religion",
    "section": "Meaningful conversations",
    "text": "Meaningful conversations\nWhen I was 23 I went on a trip to Israel with a few dozen other young people from Jewish backgrounds and for the first time in my life had conversations about religion and god that did not seem absurd to me. Our itinerary included many structured conversations and loads of time to interact and talk informally. Those conversations were my first introduction to some ways of thinking about god that were much harder to dismiss than the notion of a capricious, racist, homophobic megalomaniac in the sky.\nThese people were not arguing over what the creator of the universe wants us to eat or wear, or what kinds of sex we’re allowed to have with whom; they were talking about the things that mattered most to me. Things like how to get along with family despite differences, how to build community across cultural divides, how to cope with loss and injustice, and what values should inform the crucial decisions we would be making over the course of the next decade. These were exactly the kinds of things I wanted to talk about, and it turns out the Jewish tradition has a lot to say."
  },
  {
    "objectID": "blog/kirahowe/2020-09-17-an-atheist-tries-religion.html#experiencing-a-holy-place",
    "href": "blog/kirahowe/2020-09-17-an-atheist-tries-religion.html#experiencing-a-holy-place",
    "title": "An Atheist Tries Religion",
    "section": "Experiencing a holy place",
    "text": "Experiencing a holy place\nOur trip also included a visit to the Western Wall. I had low expectations but was intrigued by how compelling other people found this place. I wrote my sorrows, hopes, and dreams on a little piece of paper the morning of the visit in preparation, and when we got there I waded into the crowd with the rest of the group. I found it fascinating that people travel from every corner of the earth to touch this wall, and that day was no different. I stood amongst hundreds of my fellow humans, many of whom were clearly having a very emotional time, impressed and slightly unnerved by how freely they expressed what they were experiencing.\nWhen it came my turn to approach the wall, I was struck by how soothing it was to imagine the possibility that something or someone out there cared about the nonsense complaints and requests that were written on my little piece of paper. I found a little crack in the wall to slip the note into, then just stood there for a while. I thought about the millions of people who had stood before me in that same place over thousands of years, giving anonymous expression to their most profound inner commotion. I realized then that I had been missing out.\nWhatever ways the modern world had messed up religion, there was at least some minuscule piece of it that I wanted. I didn’t want to believe that I was just looking at yet another old stone wall. That was a special place, if only for the magnitude of human hardship and desire that had been revealed there. Probably no other location on earth has had such intimate access to the depths of the human psyche. It was like every one of the millions of prayers that had been set free because of that wall still lingered in the air, and I got to add mine to the pile, communing with generations of believers before me in the hope that there’s a god out there to hear us."
  },
  {
    "objectID": "blog/kirahowe/2020-09-17-an-atheist-tries-religion.html#finding-community-and-a-faith-of-my-own",
    "href": "blog/kirahowe/2020-09-17-an-atheist-tries-religion.html#finding-community-and-a-faith-of-my-own",
    "title": "An Atheist Tries Religion",
    "section": "Finding community and a faith of my own",
    "text": "Finding community and a faith of my own\nA couple of years later a friend introduced me to a more conventional style of prayer, the kind where you say things out loud with your eyes closed as though you’re addressing an actual extra person in the room. I found it extremely uncomfortable and awkward at first, but I immediately felt its benefits, even if it took a while for anything resembling faith to grow out of that initial positive impression.\nIt’s like believing we’re speaking to god and not each other makes it acceptable to express the realest, rawest emotions we have, and simultaneously gives them immunity from criticism. It removes these and many other psychological barriers to being vulnerable and open in the presence of other people. I haven’t shared any other experience with people that so quickly helps a group of complete strangers get comfortable with each other, let alone build meaningful relationships. I’ve since taken up prayer as part of my routine, and do happen to believe that I’m not just talking to myself.\nI was going through some personal hardship around the same time as all this, the kind of thing that makes you question what you’re doing with your life. I was nostalgic for the conversations I had in Israel and in a season of many new beginnings anyway, so I decided to seek a community to explore my spirituality with.\nI didn’t feel capable of belief in the supernatural or physically impossible, so I didn’t have high hopes. My suspicions were confirmed that this is in fact a nonstarter in some faith communities, but it turns out it’s far from an absolute requirement in many. I found welcoming homes all over the spiritual map in my city, full of other seekers also unsure what to make of some of religion’s more absurd truth claims. I’m still somewhat of a spiritual nomad, but I’ve found home at one point or another in a Reform Jewish synagogue, a community centre kitchen amongst a circle of Quakers, an Ignatian spirituality centre, and most recently with some progressive Protestant Christians on zoom.\nI try to be honest about where I’m coming from and pretty much always feel extremely uncomfortable and like a huge fraud when the more worshippy parts of religious services begin, but I’ve been going to multiple faith-centred meetings every week for about two and a half years now, and have found the benefits of spiritual growth far outweigh the awkward and uncomfortable feelings that come with partaking in religious observances that don’t always resonate with me."
  },
  {
    "objectID": "blog/kirahowe/2020-09-17-an-atheist-tries-religion.html#spiritual-not-religious",
    "href": "blog/kirahowe/2020-09-17-an-atheist-tries-religion.html#spiritual-not-religious",
    "title": "An Atheist Tries Religion",
    "section": "“Spiritual, not religious”",
    "text": "“Spiritual, not religious”\nThat’s a cliché I’ve heard many people use to describe themselves throughout my journey, and so far I think it’s also the most accurate description of my own faith. I have a rich prayer life and regularly attend religious services, but I find the structure and dogma of all the religions I’ve tried so far suffocating rather than satisfying, so I don’t feel comfortable yet adopting any individual one as my own. I’m still working through what role I think is appropriate for an organization like a church to have in society and in my life, but I do think at its best religion nurtures a part of us that has been perilously abandoned by secular society. At this point I consider myself a disciple of the Jewish and Christian traditions, having found valuable insights into the art of living in both.\nAnother major hurdle I still haven’t mentally overcome is the pretty mixed track record of religion. I know now that there’s a lot more to it than sociopaths conning the poor into giving up their grocery money and brainwashed followers tearing apart families and livelihoods over tactless obedience to draconian laws. I spent too much time learning about the ugly sides of religion before changing my mind about it, and so far that’s still preventing me from just pretending like it’s no big deal for them to continue to exist without acknowledging and apologizing for their crimes.\nI realize that that kind of repentance and reconciliation takes time, and I do know many religious groups are undertaking the difficult work of repairing the world. I just wish so many of the reasons it needs repairing weren’t their fault in the first place."
  },
  {
    "objectID": "blog/kirahowe/2020-09-17-an-atheist-tries-religion.html#figuring-out-what-religion-could-look-like",
    "href": "blog/kirahowe/2020-09-17-an-atheist-tries-religion.html#figuring-out-what-religion-could-look-like",
    "title": "An Atheist Tries Religion",
    "section": "Figuring out what religion could look like",
    "text": "Figuring out what religion could look like\nDespite all of these hangups, I’m still pursuing spiritual life on my own terms. I’ve come to accept that it’s entirely possible for a given religion to be completely wrong but for a god to exist. I actually realized that when I read the Bible. Scripture is packed with stories about religious people doing it wrong. I’m endlessly bemused by the irony of modern religions that are so blind to their own fallibility yet claim those very stories as their foundation. That’s another one of those things I’m still working through.\nAlthough the baggage of religion is too burdensome for me to bear, and I’m unsure of what role that kind of codified spirituality will have in my life in the long run, I’m enjoying my spiritual journey quite a bit. I’ve found prayer to be uplifting and soothing. I’ve found groups of other people interested in discussing things I care a lot about. I’ve appreciated finding ways to spend some of my spare time that don’t feel wasteful and meaningless.\nIf nothing else, religion is a brilliant social hack for bringing strangers together and making people comfortable being vulnerable together. I suspect there’s more to it than that, but there’s a hell of a lot of cruft to cut through to try to find out. My posture toward religion has shifted from purely antagonistic to curious but skeptical, which for me is a pretty dramatic change. It’s no secret that the church as we know it is dying. As an outsider it’s not hard to see why and honestly hard to have any attitude about it other than “good riddance”. I see a lot of promising signs of growth amidst the ruins of those communities, though, and I’m quite interested in being a part of a new generation of church goers, more focused on faithfulness and spiritual exploration than moralistic legalism and slavish obedience.\nI have no idea what that would look like or how we’d get there, but the idea excites me. And I’m pretty sure Jesus would be cool with us exploring new interpretations of ancient traditions along the way."
  },
  {
    "objectID": "blog/kirahowe/2020-10-30-christianese-for-outsiders.html",
    "href": "blog/kirahowe/2020-10-30-christianese-for-outsiders.html",
    "title": "Christianese For Outsiders",
    "section": "",
    "text": "When I started hanging in out in religious circles in my late twenties for the first time in my life, I had a lot to learn. Not just about the diversity and depth of different religions, but also about the culture. There are certain words that mean different things in a religious context, and other ones that don’t really exist outside of one at all. This a brief overview of some of the language I’ve picked up over the past few years. These definitions are all based on actual personal experiences from about two dozen different churches/synagogues/groups, so of course as such are entirely anecdotal. This isn’t meant to be an academic or universal description of religious terminology, just some new words and ways language is used differently in religious contexts that I found interesting and which might be useful if you ever find yourself in a similar situation.\n\n\nCharismatic\n\n\nA branch of Christianity that emphasizes physical experiences of the divine. Expression of these experiences can get pretty wild in some churches, ranging from mild swaying, hands up, crying, etc. all the way to rolling around on the floor, running around the room, screaming incomprehensible noises and the like.\n\n\nDeconstruction\n\n\nA process most people raised in a religious household seem to go through where they realize that the religion they were handed as children is probably not true. Many high profile Christian musicians have been public about their “deconstruction”.\n\n\nEcumenical\n\n\nUsually means “affiliated with multiple churches and/or denominations”. These groups are generally a good place to start if you’re new to religion because by their nature they don’t have a single dogma everyone must believe to fit in.\n\n\nFriend\n\n\nWith a capital “F”, is what Quakers call fellow Quakers. They may well be lower-case “f” friends as well.\n\n\nHigh/Low\n\n\nDepends on the context. Translates to “fancy”/“plain” if you’re talking about church buildings, “traditional”/“modern” in the context of church services, and “literal”/“metaphoric” for scripture. “High church” services have things like choirs and robes and golden bibles, “low church” services have guitars and projectors and people wearing sandals. The distinction doesn’t cut cleanly across denominations. In my experience it seems to depend entirely on the congregation or just what kind of buildings and resources are available. Regarding scripture, a “high view” usually refers to a belief that it is literally from God and is ipso facto authoritative and “true”. A “low view” usually means someone is comfortable with the fact that it was written by men in the ancient world and isn’t necessarily a snapshot of a moment in history when humans had figured out the way everything should be forever.\n\n\nMinistry\n\n\nUsually refers to work or service someone does that they claim is motivated by their faith or is done in service of their god. Different for Quakers, where it refers to the brief messages that people are moved to deliver during a “meeting for worship” (which is an hour or so of sitting together in silence).\n\n\nReform(ed)\n\n\nDepends on whether you’re talking about Jews or Christians. Reform Judaism is the progressive version, i.e. where LGBTQ+ folks are welcome and women are equal. Reformed Christianity is decidedly un-progressive, the result of a 16th century backlash against Catholic corruption and hasn’t progressed much since (which they talk about as a positive thing). The names kind of say it all. “Reform” Judaism emphasizes the evolving nature of faith and participates in its ever-continuing reforming. “Reformed” Christianity, past tense, says the Catholic church was wrong but by God’s grace they figured out the one true answer and now just need to stick to it. Westboro Baptist Church is a Reformed church, as an example of where that kind of thinking leads.\n\n\nSmall group/home group/community group/life group/supper group\n\n\nLiterally a small group of people, usually from the same church, who meet up regularly some time other than Sunday morning. The format varies wildly. Sometimes it’s really just a group of friends who share meals, more culty churches seem to use these to indoctrinate newcomers, though. In my experience it’s hard to tell what you’re going to get beforehand – tread carefully.\n\n\nWorship\n\n\nDepends on the context. If a Protestant invites you to “worship night” it’s a concert; worship means music. If it’s a Catholic it may be singing (more likely a choir than a band) but could also be an invitation to kneel in front of the Eucharist (a cracker blessed by a priest which some people believe is Jesus) and pray. If it’s a Quaker they’re inviting you to sit in silence, probably for a long time, like an hour. Jewish worship usually looks like chanting ancient prayers, but they don’t call it that.\n\n\nUnchurched\n\n\nUsually just means “non-religious”, but also used in a semi-perjorative way to refer to other people who are very much “churched” yet believe differently or don’t participate in institutional religion as much or in the same way."
  },
  {
    "objectID": "blog/kirahowe/2021-02-07-i-need-people.html",
    "href": "blog/kirahowe/2021-02-07-i-need-people.html",
    "title": "I Need People",
    "section": "",
    "text": "This is the second post in a series about things the 2020 pandemic has taught me. The first was that journalism is important. This one is about appreciating my friends and family in a new way. I’ve always loved the people in my life, but the feeling of actually needing other people, like for survival, is new to me. I’ve always had this strong sense that worst case scenario I would always be fine on my own. Like if I really had to I could hack it alone, and that might not be ideal but in the end I’d be more or less fine. I realize now I was wrong."
  },
  {
    "objectID": "blog/kirahowe/2021-02-07-i-need-people.html#the-first-few-weeks",
    "href": "blog/kirahowe/2021-02-07-i-need-people.html#the-first-few-weeks",
    "title": "I Need People",
    "section": "The first few weeks",
    "text": "The first few weeks\nVery early on in the pandemic my city shut down almost completely. Virtually everything was closed, with only a few “essential” businesses remaining open, like grocery stores and pharmacies. Even those often had lineups around the block because of new strict and slow precautions designed to corral people through as contactlessly as possible.\nAs my plans for the week and then the month got cancelled, I thought “no big deal”. I’m kind of a loner anyway even in normal times and am very introverted, so in a certain way I almost welcomed the opportunity to be alone with no plans for a few weeks. If I’m honest it was actually pretty nice for the first little while, but I soon discovered that the couple of regular things I used to do every week were doing more for me than I realized."
  },
  {
    "objectID": "blog/kirahowe/2021-02-07-i-need-people.html#experiencing-real-loneliness",
    "href": "blog/kirahowe/2021-02-07-i-need-people.html#experiencing-real-loneliness",
    "title": "I Need People",
    "section": "Experiencing real loneliness",
    "text": "Experiencing real loneliness\nI used sort of like the idea that I’m just a solo weirdo going through life independently, doing my own thing at my own pace, sharing some moments with others but enjoying being alone the rest of the time. I never really fit in to any group and always struggle with compromise and relationships, but I made my peace with that and just lived my life accepting that’s the way I am.\nI do enjoy a lot of the things I do alone and I’ve built a life that a decade ago I thought I would only ever dream of having – doing work I enjoy when and where I want, travelling the world with a home base downtown in my favourite city, no kids to raise or mortgage to pay or lawn to mow or driveway to shovel. Part of what makes up a good life for me is freedom and independence, and I have both now.\nThe thing about having independence and the freedom to revel in it is that it’s not as life-giving or meaningful when everything is closed. After about a month of near total isolation I realized how essential other people were in my life."
  },
  {
    "objectID": "blog/kirahowe/2021-02-07-i-need-people.html#it-took-losing-my-connection-to-the-world",
    "href": "blog/kirahowe/2021-02-07-i-need-people.html#it-took-losing-my-connection-to-the-world",
    "title": "I Need People",
    "section": "It took losing my connection to the world",
    "text": "It took losing my connection to the world\nIt was never my awesome job or sunny vacations or comfortable apartment that were bringing me joy. It was the people I shared all those things with that made life worth living.\nI realize that probably makes me sound like some sort of social cretin to normally functioning social beings, but it was honestly a revelation for me. I think back to times when my life was much worse than it is now, materially speaking, but I was happier, and I realize now it was always the people. Life really feels meaningless without close relationships, and it’s really fucking hard to maintain those in a pandemic.\nI used to do things a few times a week – meetups, concerts, dance classes, sports, dinner parties, etc. I always knew the people I shared those experiences with made them better, but it was more like a bonus. Like I had this great life with all this fun stuff going on and getting to share it with people I love made it better. It feels different now, though. Those times weren’t just fun and meaningful, they were essential. It wasn’t until I couldn’t do anything for months on end that I realized I actually need those experiences. Like for survival, the same way I need to sleep and eat."
  },
  {
    "objectID": "blog/kirahowe/2021-02-07-i-need-people.html#socializing-in-a-pandemic",
    "href": "blog/kirahowe/2021-02-07-i-need-people.html#socializing-in-a-pandemic",
    "title": "I Need People",
    "section": "Socializing in a pandemic",
    "text": "Socializing in a pandemic\nI have no doubt that overall this realization is a blessing, but it’s an inconvenient time to have it. It’s embarrassing that it basically took three months of solitary confinement to make me appreciate the people in my life the way they deserve. I’m working on it now, though.\nIt took me a while to embrace socializing online, but the majority of my interactions with other people now happen on my computer. It’s worse, but better than nothing, and it’s at least enough to keep the severest loneliness at bay. I’m making an effort to cultivate more in person friendships, and I’m looking forward to being able to do that without constantly worrying about covid risks and restrictions after this is all over. I’m one of those pessimists who’s pretty convinced that won’t be until next year, but I know that this can’t go on for the rest of my life, so whenever the day comes where we can do things with other people again without thinking twice, I’m going to be ready for it."
  },
  {
    "objectID": "blog/kirahowe/2021-01-30-america-is-a-scam.html",
    "href": "blog/kirahowe/2021-01-30-america-is-a-scam.html",
    "title": "America Is A Scam",
    "section": "",
    "text": "I just came across this TikTok video on Twitter and it broke my heart. It’s a woman crying, utterly dismayed at how unfair life is, begging the totally legitimate question “how do people overcome poverty in America?”\nThe comments are filled with stories like hers, lamenting the impossibility of that feat today, and they’re not wrong. Many western countries are in decline and facing similar issues, but I’m singling out America here because those issues are amplified by a thousand there. It also has a disproportionate influence on the world. When America goes down, it bring the rest of us with it.\nI think it also deserves special ridicule for its persistent claim to the moral high ground. American leaders talk incessantly about being a “beacon to the world”, as though they should be held up as a model for the rest of us, despite being consistently the worst by almost every measure. That kind of rhetoric alongside videos like this woman’s is so frustrating to hear I had to write this blog post.\nBelow is an explanation. I encourage you to click through the links and see for yourself."
  },
  {
    "objectID": "blog/kirahowe/2021-01-30-america-is-a-scam.html#america-is-a-bad-example",
    "href": "blog/kirahowe/2021-01-30-america-is-a-scam.html#america-is-a-bad-example",
    "title": "America Is A Scam",
    "section": "America is a bad example",
    "text": "America is a bad example\nWe all desperately need to get over the fantasy of the American dream and stop looking up to America as a model for how to run societies. By any objective measure America is consistently among the worst of the developed countries. Look at happiness, or life expectancy, or human rights violations, or economic inequality, or education, or life satisfaction, or anything else you can think of that matters. America is at the bottom. It is unique among developed countries in providing basically no social safety net for its citizens (despite spending more on healthcare per capita than any other country!)\nIt is not a “shining city upon a hill”. It is a failed state and we need to disabuse ourselves of the delusion that it is a model country to emulate.\nAmerica would do well to start taking some planks out of its own eyes before worrying about the specks in everyone else’s, but I don’t see that happening anytime soon given its defunct political system."
  },
  {
    "objectID": "blog/kirahowe/2021-01-30-america-is-a-scam.html#america-is-a-scam",
    "href": "blog/kirahowe/2021-01-30-america-is-a-scam.html#america-is-a-scam",
    "title": "America Is A Scam",
    "section": "America is a scam",
    "text": "America is a scam\nThere may be a credible case that at one time America functioned reasonably well for a small subset of people, but however glorious its past, America is now a nation in decline. For literally my entire lifetime, just about everything has been getting worse for everyone except the very upper classes. This graph shows income distribution in America over time:\n\n\n\nShare of Total Income going to the Top 1%, 1913 to 2014\n\n\nSince the 1980s more and more wealth has been accumulating among the top 1% of richest people in America, to the point where now income inequality is literally the highest it has ever been. It is now impossible to afford a college education and a house, let alone a family, on an average income in America. People go to extreme lenghths and take on exorbitant debt to just achieve a marginal standard of living. And no matter how hard they work, there is nothing to protect them from being bankrupted by a single medical emergency or crooked banker. There is no winning. Needless to say, this is an untenable situation."
  },
  {
    "objectID": "blog/kirahowe/2021-01-30-america-is-a-scam.html#so..-where-from-here",
    "href": "blog/kirahowe/2021-01-30-america-is-a-scam.html#so..-where-from-here",
    "title": "America Is A Scam",
    "section": "So.. where from here?",
    "text": "So.. where from here?\nI have no idea. I mean I do have some ideas about how I’d like things to change, but I have a much higher tolerance for societal upheaval than most people and if I got my way we’d end up with another Trump on our hands, pandering to all the dishevelled conservatives who no longer recognize the world and want it to just go back to “the way it was”.\nRealistically it will take a bold movement led by someone progressive but empathetic who can offer grace and compassion to the millions who long for the good ol’ days to bring change.\nIt seems like that can’t really happen until Americans decide what that change should even look like. Canadian politicians debate about how to fund the healthcare system or how much teachers should get paid, but nobody argues that people should have to just figure out healthcare or education for themselves. Americans are decades behind in this conversation and don’t even agree on basic things, like what standard of living every citizen should be provided.\nJonathan Haidt and his collaborators are the clearest thinkers I’ve heard on the topic of how to unite people as divided as we are now. Steven Pinker and Yascha Mounk seem to have some good ideas about what the future could realtisically look like. They also have way more optimism than I do. I’m also particularly interested in the work the Center for Humane Technology is doing to steer the tech industry in a less destructive direction."
  },
  {
    "objectID": "blog/kirahowe/2021-01-30-america-is-a-scam.html#change-is-coming-its-up-to-us-what-it-looks-like",
    "href": "blog/kirahowe/2021-01-30-america-is-a-scam.html#change-is-coming-its-up-to-us-what-it-looks-like",
    "title": "America Is A Scam",
    "section": "Change is coming, it’s up to us what it looks like",
    "text": "Change is coming, it’s up to us what it looks like\nSocieties where the majority of people cannot survive collapse. Change is coming one way or another. It’s like that saying “if you don’t make time for your wellness, you’ll be forced to make time for your illness.” This is already happening. The day of the Capitol coup was also a record-setting day for coronavirus deaths, but that story didn’t even make the news at the time. Problems pile up and compound and eventually we’re in such a mess that just keeping the lights on at the hospital is too much to ask. Eventually, things will change, one way or another.\nAmerica needs to achieve revolutionary results through bureaucratic means, or else find themselves with another revolution on their hands."
  },
  {
    "objectID": "blog/kirahowe/2021-01-05-what-i-use-now-instead-of-google.html",
    "href": "blog/kirahowe/2021-01-05-what-i-use-now-instead-of-google.html",
    "title": "What I Use Now Instead Of Google",
    "section": "",
    "text": "I made a goal for myself in January 2020 to stop using Google products by the end of the year. That might sound like way too generous a timeline, but Google owned pretty much all of my data at that point, so it was a fairly large project. Plus I’m a slow and steady kind of person. I know if I give myself a generous enough timeline I can accomplish even things that seem too hard for me at first."
  },
  {
    "objectID": "blog/kirahowe/2021-01-05-what-i-use-now-instead-of-google.html#first-why",
    "href": "blog/kirahowe/2021-01-05-what-i-use-now-instead-of-google.html#first-why",
    "title": "What I Use Now Instead Of Google",
    "section": "First, Why",
    "text": "First, Why\nSince I got into programming about 5 years ago, I kept hearing all these bad things about Google and how horrible of a company it is from other tech people. It always seemed a bit exaggerated to me, but the evidence has been piling up over the years. Learning about their involvement with the US military’s Algorithmic Warfare Cross-Functional Team (Project Maven) was the last straw for me 1, but even before I learned about that I was pretty uncomfortable with a lot of what I heard. In Google’s defence they eventually did pull out of the project after massive backlash by thousands of employees.\nStill, I’m pretty convinced now that their continued existence is a catastrophe not only for public safety, but also for the environment, gender equity, the economy, fair labour practices, privacy, journalism, democracy, race relations, and the project of civilization itself. But anyway, the point of this post isn’t to motivate you to also quit Google. I’ll tell you how I really feel some other time.\nThe rest of this post is about the tools and services I replaced all the Google things with. I did mostly accomplish my goal, with a few caveats which I describe in the relevant sections."
  },
  {
    "objectID": "blog/kirahowe/2021-01-05-what-i-use-now-instead-of-google.html#replacements",
    "href": "blog/kirahowe/2021-01-05-what-i-use-now-instead-of-google.html#replacements",
    "title": "What I Use Now Instead Of Google",
    "section": "Replacements",
    "text": "Replacements\nHere’s the short version: - GMail → ProtonMail - Chrome → Firefox developer edition - Google search → DuckDuckGo - Google Drive → Sync and Backblaze - Google DNS → Cloudflare DNS - Maps → Apple maps - YouTube → Netflix, TED talks, conference archives, and still a little YouTube (anonymously in a Firefox container) - Google Analytics → Fathom - Everything else (calendar, reminders, photos, docs, video chat, news feeds) → Nextcloud, running on my own instance\nAnd here’s the long version:\n\nGMail → ProtonMail\nProtonMail has free accounts, but I pay for the lowest level that allows use of a custom domain with it (€48/year) so I don’t have to change my email address ever again if I want to switch providers. It was quite a pain to change my email address all over the place, but I started in May and just did it slowly over time. I highly recommend decoupling your email address from your email provider if you’re considering switching. First of all an email from a custom domain seems more, not less, serious than a gmail address to most people. But the main reason is just so you don’t have to change your email address ever again if (when) you want to switch to some newer, better email provider.\nI set up forwarding from my old GMail account to my new email address then filtered my mail for anything sent to the old address. If it was someone or some place I wanted to continue hearing from, I updated my email address with them. If not I unsubscribed. This turned out to be a wonderful opportunity to purge my newsletter and other email subscriptions. Also I’m happy to report most companies are now (finally) respecting unsubscribe requests. Two (looking at you Geektastic and Rakuten) continued to spam me after I requested they stop, so now I filter out all their mail as spam.\n\n\nChrome → Firefox developer edition\nI primarily use Firefox developer edition now for my browser, including for work. The developer tools are just as good as Chrome’s for the kind of work I do.\nThere are some web apps that literally or effectively only work in Chrome, which ironically perfectly illustrates the impetus for this whole undertaking. For those I use this ungoogled Chromium browser, installed via homebrew.\nI still have Chrome installed on my computer because I need it for some work things. We use chromedriver for some integration tests and it wasn’t trivially easy to trick it into using my Chromium installation instead of looking for Chrome. Replacing chromedriver is a headache, and also not my call to make at work. But it’s also not really the point for me. If Google was reduced to a browser that developers can easily launch and control programmatically, I’d be satisfied. I don’t use it for anything other than running automated tests at work now.\n\n\nGoogle search → DuckDuckGo\nI mostly love DuckDuckGo, but there are certain categories of searches where Google returns better results. DuckDuckGo doesn’t seem to return many results from forums (like stack overflow or other stack exchange sites), which is where there the answers to a lot of my questions are, unfortunately. So I still use Google Search sometimes, but I do it in a Firefox container without being logged in to a Google account, which at least helps to avoid some of Google’s incessant stalking.\nDuckDuckGo does seem to return better results when the answer is an image, video, or regular web page, which is cool, and I suspect means it would be a perfectly fine replacement for most people. For example this blog is easier to find via DuckDuckGo than Google, which is impressive because I share a name with a small-time TV celebrity who typically dominates search results. We even look sort of similar, it’s wild.\n\n\nGoogle Drive → Sync and Backblaze\nI use Sync to make my most used files available anywhere, and I’ve started moving a huge backlog of documents and notes I don’t need to access often but don’t want to throw away to Backblaze for longer term storage, just because it’s cheaper. So far I just use their web UI to upload things in bulk and browse my files, but I’m looking into ways to do that more efficiently. I really need to de-clutter my digital life. I’m a major hoarder when it comes to digital files. I have scarcely deleted a document in the last 10 years, it’s getting a bit ridiculous. But that’s a goal for another year 🙂. For now I’m just putting all those files I don’t really need to access but don’t want to throw away in Backblaze to deal with later.\nBetween Sync and Backblaze I got 15GB of free storage, which is plenty for now, though as I move more and more or my scattered files over I’ll have to start paying. Backblaze offers some of the cheapest object storage there is, at least.\n\n\nDNS → Cloudflare DNS\nI used to use Google’s DNS servers (8.8.8.8 and 8.8.4.4), now I use Cloudflare’s (1.1.1.1 and 1.0.0.1).\n\n\nMaps, YouTube\nThese ones are harder to replace. I use Apple maps now most of the time, but I still use Waze (which was acquired by Google) for directions sometimes if I’m driving somewhere. For media I mostly watch Netflix, but I also watch a lot of TED talks. I used to also watch conference videos on YouTube. Now I check conference websites for those, and a lot of them have the recordings, although they’re often hosted on YouTube anyway. And I also do still use YouTube sometimes, mostly for home workout videos, but also anonymously in an isolated container.\n\n\nAnalytics → Fathom\nIt’s been a while since I used Google Analytics, but I wanted to set up a basic hit counter for this blog and found Fathom. They provide simple privacy-focused analytics that work well enough for me. One really useful feature they have that I consider necessary now is being able to log analytics with a custom domain. Without this, visitors using ad-blockers don’t get counted, which most estimates figure is now something like 40% of people, and probably more among tech-type people, like the ones most likely to find this blog.\nI tried Cloudflare’s new server-side analytics for a month, but the data didn’t make as much sense (it showed the overwhelming number of visits to my homepage, even though the other analytics I had set up showed them going to one post that did well on Hacker News, which makes way more sense). Anyway, the numbers didn’t seem to add up. I guess to be fair I don’t quite understand how Fathom’s numbers add up yet either, but their support has been helpful checking it out with me to try to help me reach some interpretation that makes sense. Fathom’s dashboard is really simple, at least, which I like because it’s easy to understand.\n\n\nCalendar, reminders, photos, docs, video chat, news feeds → Nextcloud\nFor everything else I use Nextcloud now. I run my own instance of it, but there are lots of providers where you can just sign up for a simple account like anything else if you’re not an insufferable nerd who enjoys maintaining servers, like me.\nThis is where I have another caveat to mention. I haven’t migrated all of my photos off of Google Photos yet because I have about 50,000 of them and it’s just a really slow process. I estimated it would take me something like 70 hours to move them all manually, so I’m looking into better ways to do it. I’m confident I can find or maybe build something easier than manually downloading and uploading 50k files in less than 70 hours.\nNextcloud does the job of automatically syncing photos from my phone, though, which is all I needed to be able to delete Google Photos from my devices. I’m not sure I’ll actually stick with Nextcloud for photos in the long run. The gallery is a bit lacking. It looks like Piwigo might be a good alternative. Either way, I’m actually storing my photos in Backblaze, so I’ll continue looking around for a different client for a bucket full of photos next year as I work on slowly culling my photos collection and migrating it to a new home."
  },
  {
    "objectID": "blog/kirahowe/2021-01-05-what-i-use-now-instead-of-google.html#total-cost",
    "href": "blog/kirahowe/2021-01-05-what-i-use-now-instead-of-google.html#total-cost",
    "title": "What I Use Now Instead Of Google",
    "section": "Total Cost",
    "text": "Total Cost\nI feel like I’ve won a lot by doing all this. I own my data now, so Google can’t arbitrarily take it away from me, which gives me peace of mind. I’m no longer part of their ad ecosystem, being tracked all around the internet and having my attention sold to the highest bidder. And I also feel good about “voting with my feet”, so to speak. The fewer people use Google’s free products, the lower their ability to sustain their unethical business model based on selling mass surveillance data.\nBut I also lost some. Specifically a few hundred dollars.\nGetting paid and paying for things in multiple currencies is the bane of my financial existence, but overall the final total comes out to something like CAD$400/year (roughly $300), broken down like this:\n\nProtonMail - €48/year (CAD$75)\nCustom domains (for email and my cloud) - $19.74/year (CAD$25)\nLinode server (for my Nextcloud instance) - $84/year (CAD$105)\nCarbon offsets - CAD$21/year\nFathom analytics - $140/year (CAD$180)\n\nAs you can see, $140 of the total is for Fathom analytics, which an average person probably doesn’t need. Without that it comes closer to about $160, which I think is a fair price to pay for privacy, freedom, and ownership. I’m also not paying anything for storage yet, though, so I expect this to cost more next year once I finally get all my photos and archives migrated to Backblaze or whatever I end up using.\nI should also emphasize it’s entirely possible to switch off of Google to free alternatives. All the services I use have free tiers which are quite generous and most likely plenty for an average user. I do think people who can afford to should support independent software companies so they can run sustainable businesses off the money their customers give them and not off ad revenue, but when money is tight there are still lots of options."
  },
  {
    "objectID": "blog/kirahowe/2021-01-05-what-i-use-now-instead-of-google.html#conclusion",
    "href": "blog/kirahowe/2021-01-05-what-i-use-now-instead-of-google.html#conclusion",
    "title": "What I Use Now Instead Of Google",
    "section": "Conclusion",
    "text": "Conclusion\nOnce I got over the initial mental hurdle of expecting everything to be free or as cheap as possible, it seemed totally reasonable to me to pay that much for all I’m getting. What made it click for me is that all those things aren’t actually free. Google sells our information and our attention to the highest bidder to generate profit for themselves, then they don’t share any of it with us, despite the fact that their entire business model couldn’t even exist if we all just refused to fuel it.\nI know I’m just dreaming waiting for the day Google realizes the error of its ways and starts running an ethical business, but that doesn’t mean it’s not worth taking a stand in the meantime. Individually refusing to fuel the databases and algorithms Google profits from is one tiny thing it’s totally possible to do.\nUpdate: A lot of people in the comments have pointed out that it takes a lot more than this to actually escape Google’s reach, which is true. My comment above that I’m “no longer part of Google’s ad ecosystem” is an overstatement. As one commenter put it, “Google will still track much of what you do online. The internet is rotten with linked media, amp pages, blogs, and ads hosted on Google servers.” They’re right, but that doesn’t mean none of this has any impact. I find the de-googling community can be too defeatist and purist at times, but perhaps I swing too far the other direction here. I don’t want to minimize the amount of effort it takes to truly become Google-free, but I also want to encourage and inspire average people to make these changes, which requires taking a more pragmatic approach.\nDiscuss this post on Hacker News, Dev.to or Reddit\n\nFootnotes\n1. That previous link goes to a memo saying that the primary purpose of the project is “to field technology to augment or automate Processing, Exploitation, and Dissemination (PED) for tactical Unmanned Aerial System (UAS)”, which means making AI for drones so they can better target humans and other “targets”. That really bothers me. ↵"
  },
  {
    "objectID": "blog/kirahowe/2020-12-06-barcamp-philly-2020.html",
    "href": "blog/kirahowe/2020-12-06-barcamp-philly-2020.html",
    "title": "BarCamp Philly 2020",
    "section": "",
    "text": "I went to a virtual conference this weekend called BarCamp Philly and had a really good time. The way they ran the conference was new to me. They somehow made the experience feel enjoyable and inspiring, which I thought was really impressive because I’ve had a hard time getting excited about virtual conferences this year. I’ve been to a dozen or so since everything got cancelled back in the spring, and this was the first time I stayed until the end and left feeling more energized than drained, fired up with lots of new ideas and inspiration and even a new acquaintance, which is super exciting to me because I find it so hard to meet new people during a pandemic.\nThis post is about a few of things that I think helped make this conference so much fun to attend. I think it would be really awesome if there were more events like this. Needing to do everything online makes me sad, but one obvious upside is that is makes a whole world of new experiences accessible. I probably wouldn’t have travelled to Philadelphia for this conference, but I got to experience it this year remotely.\nI also want to add a caveat that I am not a conference organizer and am certainly not knocking any other conferences. I have no doubt it takes an incredible amount of work to deliver a conference online, and I’m super grateful for all the amazing people who spent their time (often for free) making all the wonderful conferences I’ve been to this year happen.\nI think we’re all figuring out how to adapt to this crazy new world and it’s just going to take a lot of experimenting and trial and error to land on the best solutions for different types of events. So in the spirit of learning together and optimizing our collective online existence, I wanted to share some things I thought the BarCamp Philly crew did particularly well, and that made my experience as a conference goer so awesome I felt like I couldn’t not rave about it here."
  },
  {
    "objectID": "blog/kirahowe/2020-12-06-barcamp-philly-2020.html#well-organized-discord-server",
    "href": "blog/kirahowe/2020-12-06-barcamp-philly-2020.html#well-organized-discord-server",
    "title": "BarCamp Philly 2020",
    "section": "Well Organized Discord Server",
    "text": "Well Organized Discord Server\nI had never really used discord until this year, but it seems to be catching on as a popular platform for groups and events. After seeing the way BarCamp Philly used it, I think it’s a pretty ideal platform for virtual conferences. These are some ways they used it that I found particularly clever.\n\nHelpful Welcome Messages\nWith discord it’s somehow possible to set up an introduction flow that forces people who are new to the group to see certain information and click buttons to move on to the next steps. I have no idea how it’s done, but BarCamp Philly did this and it forced me to read some info about the conference that I’m pretty confident I would have missed if it hadn’t been the first (and only) thing visible when I logged in. It simulated the check in experience at a real life conference, which is something I didn’t even notice was missing from most other virtual conferences until now.\nAt a real life conference you don’t just materialize in the middle of a lecture hall where someone’s about to start talking. You show up, pick up a name tag, check out the schedule and get your bearings, then wander about aimlessly for a little while until the talks start. Maybe you even start awkwardly introducing yourself to strangers or bumping into acquaintances.\nBarCamp Philly’s discord welcome flow approximated this nicely. By the time I had clicked through the whole process I knew what to expect from the day, what talks were happening and when, where to go if I just wanted to socialize or relax, and where to get help if I needed it.\nThey also had the conference code of conduct prominently featured in this welcome flow, and it was modelled after this safer spaces one, which was really great to see. I always appreciate seeing these kinds of ground rules explicitly laid out up front, myself being in an unfortunate demographic that seems to attract a disproportionate amount of harassment.\n\n\nClear Schedule and Sign Posting\nOne of the main struggles I’ve had with a lot of my other virtual conference experience is trouble figuring out where to go at what time. To be fair, this is a struggle at a lot of real life conferences, too. But at BarCamp Philly I always knew exactly where to go at what time and was never surprised I was in the wrong talk. Even though having to awkwardly step out of a room because you accidentally went to the wrong one is a slightly less awkward on zoom, it’s still not great, so I was happy to have avoided it all day.\nThey had a discord channel for each talk and the channels were grouped by the time the talk was happening, since there were multiple ones in each time slot. At the top of each channel there was a post describing the talk with a useful abstract, links to more info about the speaker, and a list of things to bring or prepare. The next thing in the channel was a fresh zoom link for each session. I really liked how this setup made it super easy to figure out exactly what was happening at what time in which zoom room. That’s a lot of stuff to coordinate, especially because there were usually 5 talks happening at the same time! They did an amazing job.\n\n\nNon-conference-talk Spaces\nAnother thing I loved about the conference discord server was how they set up some spaces that weren’t just about the conference talks themselves. A cool thing about discord that a lot of other chatroom type apps don’t have is voice and video channels. They’re conceptually similar to regular channels, except when you click on one instead of switching the message feed to show only messages from that channel and giving you a text box to type into, you basically are jumping into an ongoing voice or video call, like a zoom room. I found this a little jarring at first, but then I realized everyone is used to people dropping in and out of these rooms.\nThey had a few channels like this set up to simulate the in-between spaces that are everywhere at real conferences. They had a couple of “hallway” rooms, a “quiet space” room, and even an ongoing “crafting area”, where you could literally bring some crafts to work on to take a little break from conferencing and just hang out with people. There was even an after party where a bunch of people stuck around for some drinks and conversation. I thought these spaces were a really great way to bring some of that conference magic to this new virtual space."
  },
  {
    "objectID": "blog/kirahowe/2020-12-06-barcamp-philly-2020.html#lots-of-interaction",
    "href": "blog/kirahowe/2020-12-06-barcamp-philly-2020.html#lots-of-interaction",
    "title": "BarCamp Philly 2020",
    "section": "Lots Of Interaction",
    "text": "Lots Of Interaction\nThe best parts of real life conferences always happen between and after the talks. I think this is probably the hardest thing to replicate online, which is probably why it feels like it’s the main thing missing from virtual conferences this year. BarCamp Philly did an amazing job giving attendees lots of opportunity to interact, which I think contributed a lot to making the day so enjoyable. There were those informal spaces like I just mentioned, but the way they organized the talks also helped a lot with facilitating interactions.\n\nSmall-ish Groups\nThere were usually 5 or so talks happening at the same time, so each one had a relatively small group of people attending, like a dozen or two-ish. I really like being in these smaller groups. It sometimes feels kind of pointless being one of a few hundred people on a zoom call. This is different than in real life. If you’re one of a few hundred people in a lecture hall, you’ll still be sitting next to a smaller group of people you can turn to to chat or discuss the talk. To make that work online you kind of just need to have smaller groups.\nI didn’t get the impression the organizers planned any particular group size, but it ended up working out so there were just a few people attending each talk. It’s actually possible to have some conversation with like a dozen or so people in the same zoom room, so we had a chance to say a few words before the speaker started and to chat after, which made me feel really nostalgic because it felt pretty close to what it’s like in real life.\n\n\nWell timed talks\nAnother thing I really appreciated was that the talks only took up about half the time in each time slot. There was tons of time after the speakers finished to ask questions that led to follow up discussions. I love these discussions where you get to hear about what other people think and collectively process the talk. It really makes the message sink in for me. There was also a pretty generous amount of time between each talk, at least 15 mins but sometimes more, which might not sound like a lot I guess but it felt pretty ideal to me. It was enough of a break to make it feel like I wasn’t just jumping from one zoom room to the next all day long, but not so long it felt like I wasn’t “at” the conference anymore."
  },
  {
    "objectID": "blog/kirahowe/2020-12-06-barcamp-philly-2020.html#great-people",
    "href": "blog/kirahowe/2020-12-06-barcamp-philly-2020.html#great-people",
    "title": "BarCamp Philly 2020",
    "section": "Great People",
    "text": "Great People\nGreat speakers and a great community are really what make conferences what they are, and Philadelphia clearly has both in spades. These are, unfortunately, the kinds of things you can’t just magic into existence or replicate at just any conference, but I think they’re ultimately what made the day so awesome.\n\nDiverse Topics\nThe talks at BarCamp Philly were a total grab bag of miscellaneous interesting things. I really like these kinds of conferences where there’s something for everybody. Obviously a lot of conferences have more focused talks just by their nature. It’s totally fair to expect mostly technical clojure talks at a clojure conference, for example. But even at special-interest-specific conferences I think there’s a lot of value in having a track of more general interest talks for those times where you need a break from diving deep into technical details or want to expand your world a bit.\nThe speakers at BarCamp Philly covered a lot of what I call “intersection” topics – ones that overlap the boundaries of a few different fields. I love these kinds of talks because they attract people from a wide range of backgrounds who all bring interesting and unique perspectives. I got to learn about Wardley maps for mess management (because who doesn’t have several ongoing messes to manage?), web accessibility, goal setting, polymath as a legitimate life path, career development, spam, and working from home. I ended the day with tons of recommendations for books, courses, ted talks, and other resources to dive deeper into the things I found interesting and felt inspired to actually do that after the conversations we got to have after the talks. It’s been a long time since I felt motivated to do anything, honestly, so this was huge for me.\n\n\nAmazing Speakers\nOne main takeaway for me from this conference is that small, independent creators are where it’s at. A lot of the speakers ran their own consultancies or other small businesses and spoke with genuine interest and experience in their thing. I love learning from people who are really into what they’re teaching. It makes such a difference.\nThere’s also something about small-time self-employed people. They’re so down to earth and seem to speak more authentically and authoritatively than a lot of hot shot business or tech people you’ll hear at bigger conferences. I honestly felt like I did not hear any bullshit all day, which frankly is too rare these days. At a lot of conferences it feels like there are at least a couple flavours of koolaid being sneakily passed around, but I didn’t get that vibe at all at BarCamp Philly. It really felt like I was just learning a ton of useful new things from people who legitimately knew what they were talking about. They were even all super keen to talk about their thing after the talks. It was great.\n\nThis new world of online conferences is hard to navigate, and I can only imagine infinitely harder to create. There are some things I think should be ported from real life to online conferences, like showing everyone around, setting some ground rules, and setting up spaces to meet strangers. There are some other things that I think don’t translate all that well and should be left behind for virtual conferences, like big lecture halls and big-ego, big-name star speakers. Then there are some completely new things that we need to figure out how to incorporate and use most effectively for virtual conferences, like discord and zoom and remote-friendly games and digital art.\nIn my humble opinion, BarCamp Philly struck pretty close to an ideal balance between porting the important things from the traditional conference model, ditching the broken ones, and inventing some completely new ways of running things. I really hope they keep at it and would be super excited to go to more events like this one! This conference will definitely be on my radar now and who knows, maybe it’ll be a good excuse to visit Philly someday 🙂"
  }
]