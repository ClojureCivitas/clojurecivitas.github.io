[
  {
    "objectID": "internationalization/transliteration2.html",
    "href": "internationalization/transliteration2.html",
    "title": "More on transliteration",
    "section": "",
    "text": "In the last post on transliteration, I introduced the idea of transliteration as implemented in programming, and pointed out that the process of transforming text is more general. In that regard, the implementation that works for one use case will work for another. Now, the question is what is the most efficient and appropriate implementation?\nI talked about a prefix tree as easy for storing the sub-/strings to match on. However, in my pure Clojure implementation of a prefix tree, which is implemented using nested maps, the performance is slow. Very slow! But that’s not a reflection of Clojure, which is a language that is very practical and optimizes what it can. And the ethos of Clojure programming follows the maxim in programming, stemming from early Unix, of “make it work, make it right, make it fast”. As such, we should think about how to make this fast.\nTim asked me why this text transformation couldn’t have been implemented in a regex, and doing so would certainly make it fast. For example, to transliterate Tamil language text in Latin script into the Tamil script, my existing implementation would look like:\n\n(def s \"vaNakkam. padippavarkaLukku n-anRi.\")\n\n\n(def expected \"வணக்கம். படிப்பவர்களுக்கு நன்றி.\")\n\n\n(cvt/romanized-&gt;தமிழ் s)\n\n\n\"வணக்கம். படிப்பவர்களுக்கு நன்றி.\"\n\n\n(assert (= expected (cvt/romanized-&gt;தமிழ் s)))\n\n\nnil\n\nThat transliteration is converting Latin script into Tamil script in a somewhat predictable and intuitive way, such that: a -&gt; அ, aa -&gt; ஆ, …, k -&gt; க், ng -&gt; ங், etc. Tim’s point is that you can detect the input substrings using the regex, and then feed the matching substring occurrences into a replacement map to get the translation. His previous pseudocode in JS looked like this:\nlet text = \"this is a test\";\nconst replacementMap = { 'th': 'X', 't': 'Y' };\n\nlet result = text.replace(/th|t/g, (match) =&gt; {\n                                               return replacementMap[match];\n                                               });\n\nconsole.log(result);\nHe is taking into account the caveat that some of the substrings will overlap or be a superstring of other substrings, and therefore, order matters so that the right “rule” (match + replace) is triggered.\nThis should work. Let’s try it. In the “romanized-&gt;தமிழ்” function, where the word “romanized” really should be “Latin” for the name of the script, the conversions are more or less defined here: Let’s just reuse it!\n\ncvt/romanized-தமிழ்-phoneme-map\n\n\n{\"d\" \"ட்\",\n \"n\" \"ன்\",\n \"ee\" \"ஏ\",\n \"z\" \"ழ்\",\n \"w\" \"ந்\",\n \"aa\" \"ஆ\",\n \"ii\" \"ஈ\",\n \"s\" \"ச்\",\n \"uu\" \"ஊ\",\n \"e\" \"எ\",\n \"zh\" \"ழ்\",\n \"ch\" \"ச்\",\n \"q\" \"ஃ\",\n \"L\" \"ள்\",\n \"p\" \"ப்\",\n \"oo\" \"ஓ\",\n \"nth\" \"ந்த்\",\n \"v\" \"வ்\",\n \"mb\" \"ம்ப்\",\n \"E\" \"ஏ\",\n \"R\" \"ற்\",\n \"a\" \"அ\",\n \"t\" \"ட்\",\n \"ai\" \"ஐ\",\n \"U\" \"ஊ\",\n \"ng\" \"ங்\",\n \"O\" \"ஓ\",\n \"i\" \"இ\",\n \"k\" \"க்\",\n \"b\" \"ப்\",\n \"r\" \"ர்\",\n \"y\" \"ய்\",\n \"g\" \"க்\",\n \"l\" \"ல்\",\n \"N\" \"ண்\",\n \"u\" \"உ\",\n \"A\" \"ஆ\",\n \"I\" \"ஈ\",\n \"m\" \"ம்\",\n \"th\" \"த்\",\n \"nj\" \"ஞ்\",\n \"o\" \"ஒ\",\n \"au\" \"ஔ\",\n \"nr\" \"ன்ற்\",\n \"nd\" \"ண்ட்\",\n \"n-\" \"ந்\"}\n\nNow to handle the caveat. As you can see, \"t\" is a substring of \"th\", and both are keys in the map. We effectively have to do a topological sort or some other graph traversal based on which keys are substrings of which other ones. In this particular case, a shortcut that is a huge hack (because it cannot possibly be generalizable) would be to sort the match strings in order of longest to shortest en route to constructing our regex string:\n\n(-&gt;&gt; (keys cvt/romanized-தமிழ்-phoneme-map)\n     (sort-by count)\n     reverse)\n\n\n(\"nth\"\n \"n-\"\n \"nd\"\n \"nr\"\n \"au\"\n \"nj\"\n \"th\"\n \"ng\"\n \"ai\"\n \"mb\"\n \"oo\"\n \"ch\"\n \"zh\"\n \"uu\"\n \"ii\"\n \"aa\"\n \"ee\"\n \"o\"\n \"m\"\n \"I\"\n \"A\"\n \"u\"\n \"N\"\n \"l\"\n \"g\"\n \"y\"\n \"r\"\n \"b\"\n \"k\"\n \"i\"\n \"O\"\n \"U\"\n \"t\"\n \"a\"\n \"R\"\n \"E\"\n \"v\"\n \"p\"\n \"L\"\n \"q\"\n \"e\"\n \"s\"\n \"w\"\n \"z\"\n \"n\"\n \"d\")\n\nOur regex string will end up looking like:\n\n(-&gt;&gt; (keys cvt/romanized-தமிழ்-phoneme-map)\n     (sort-by count)\n     reverse\n     (interpose \\|)\n     (apply str))\n\n\n\"nth|n-|nd|nr|au|nj|th|ng|ai|mb|oo|ch|zh|uu|ii|aa|ee|o|m|I|A|u|N|l|g|y|r|b|k|i|O|U|t|a|R|E|v|p|L|q|e|s|w|z|n|d\"\n\nOur regex would be formed by feeding it to re-pattern:\n\n(def regex (re-pattern (-&gt;&gt; (keys cvt/romanized-தமிழ்-phoneme-map)\n                            (sort-by count)\n                            reverse\n                            (interpose \\|)\n                            (apply str))))\n\nWe can do segmentation on the input string based on the transliteration/transformation substring match keys:\n\n(re-seq regex s)\n\n\n(\"v\"\n \"a\"\n \"N\"\n \"a\"\n \"k\"\n \"k\"\n \"a\"\n \"m\"\n \"p\"\n \"a\"\n \"d\"\n \"i\"\n \"p\"\n \"p\"\n \"a\"\n \"v\"\n \"a\"\n \"r\"\n \"k\"\n \"a\"\n \"L\"\n \"u\"\n \"k\"\n \"k\"\n \"u\"\n \"n-\"\n \"a\"\n \"n\"\n \"R\"\n \"i\")\n\nWe can’t naively just transform the strings that match, however. Ex: you would lose the whitespace and punctuation in this example.\n\n(-&gt;&gt; (re-seq regex s)\n     (map cvt/romanized-தமிழ்-phoneme-map)\n     fmt/phonemes-&gt;str)\n\n\n\"வணக்கம்படிப்பவர்களுக்குநன்றி\"\n\nSo we need to adjust our regex to be smart enough to have a “default branch” that matches the next character if nothing else matches. We do this by appending the match all shortcut . to the end of the giant pattern alternation:\n\n(def regex (re-pattern (str (-&gt;&gt; (keys cvt/romanized-தமிழ்-phoneme-map)\n                                 (sort-by count)\n                                 reverse\n                                 (interpose \\|)\n                                 (apply str))\n                            \"|.\")))\n\nNow, we get non-matching characters in the output\n\n(-&gt;&gt; (re-seq regex s)\n     (map #(or (cvt/romanized-தமிழ்-phoneme-map %) %))\n     fmt/phonemes-&gt;str)\n\n\n\"வணக்கம். படிப்பவர்களுக்கு நன்றி.\"\n\nAnd for that matter, since the . regex alternation pattern matches a single character anyways, and you’re always doing a lookup on what is returned by the regex, we can remove any 1-character length strings from the regex pattern without change in functionality:\n\n(def regex (re-pattern (str (-&gt;&gt; (keys cvt/romanized-தமிழ்-phoneme-map)\n                                 (sort-by count)\n                                 reverse\n                                 (remove #(= 1 (count %)))\n                                 (interpose \\|)\n                                 (apply str))\n                            \"|.\")))\n\nCheck that the output is the same:\n\n(-&gt;&gt; (re-seq regex s)\n     (map #(or (cvt/romanized-தமிழ்-phoneme-map %) %))\n     fmt/phonemes-&gt;str)\n\n\n\"வணக்கம். படிப்பவர்களுக்கு நன்றி.\"\n\nLet’s see that the new regex is faster than the slightly older regex, and that they are indeed faster than the unoptimized pure Clojure prefix tree implementation.\n\n(def regex1 (re-pattern (str (-&gt;&gt; (keys cvt/romanized-தமிழ்-phoneme-map)\n                                 (sort-by count)\n                                 reverse\n                                 (interpose \\|)\n                                 (apply str))\n                            \"|.\")))\n\n\n(def regex2 (re-pattern (str (-&gt;&gt; (keys cvt/romanized-தமிழ்-phoneme-map)\n                                 (sort-by count)\n                                 reverse\n                                 (remove #(= 1 (count %)))\n                                 (interpose \\|)\n                                 (apply str))\n                            \"|.\")))\n\n\n(def NUM-REPS 100)\n\n\n(time (dotimes [_ NUM-REPS]\n        (cvt/romanized-&gt;தமிழ் s)))\n\n\n“Elapsed time: 284.003551 msecs”\n\n\nnil\n\n\n(time (dotimes [_ NUM-REPS]\n        (-&gt;&gt; (re-seq regex1 s)\n             (map #(or (cvt/romanized-தமிழ்-phoneme-map %) %))\n             fmt/phonemes-&gt;str)))\n\n\n“Elapsed time: 124.354771 msecs”\n\n\nnil\n\n\n(time (dotimes [_ NUM-REPS]\n        (-&gt;&gt; (re-seq regex2 s)\n             (map #(or (cvt/romanized-தமிழ்-phoneme-map %) %))\n             fmt/phonemes-&gt;str)))\n\n\n“Elapsed time: 90.750814 msecs”\n\n\nnil\n\nWell, this is surprising. I assumed that the regex implementation would be significantly faster. Let’s try to investigate.\nMaybe the difference is less than we thought because fmt/phonemes-&gt;str is suspiciously inefficient (and also based on the prefix tree code). So what if we strike that out from the above expressions that were timed?\n\n(time (dotimes [_ NUM-REPS]\n        (-&gt;&gt; (re-seq regex2 s)\n             (map #(or (cvt/romanized-தமிழ்-phoneme-map %) %))\n             str/join)))\n\n\n“Elapsed time: 2.052443 msecs”\n\n\nnil\n\nSo fmt/phonemes-&gt;str is the culprit. And the implementation of it uses prefix tree code, which is ripe for optimization, perhaps similar to what we just proved here?\n\nsource: src/internationalization/transliteration2.clj"
  },
  {
    "objectID": "clojure/print_object/remove_extraneous.html",
    "href": "clojure/print_object/remove_extraneous.html",
    "title": "Clean object printing by removing extraneous",
    "section": "",
    "text": "The Clojure default for printing objects is noisy. Clojure’s print-method for Object delegates to clojure.core/print-object\n\n(defmethod print-method Object [x ^java.io.Writer w]\n  (#'clojure.core/print-object x w))\n\n\n#object[clojure.lang.MultiFn 0xfaba0e3 \"clojure.lang.MultiFn@faba0e3\"]\n\n\n(Object.)\n\n\n#object[java.lang.Object 0x2990a142 \"java.lang.Object@2990a142\"]\n\nThe syntax is #object[CLASS-NAME HASH toString())] and as you can see, the toString of an Object is CLASS-NAME@HASH. For most objects this becomes quite a long string.\n\n(async/chan)\n\n\n#object[clojure.core.async.impl.channels.ManyToManyChannel 0x1879ba15 \"clojure.core.async.impl.channels.ManyToManyChannel@1879ba15\"]\n\n\n\n\nObjection!\n\n\nFunctions are printed as objects\n\n(fn [x] x)\n\n\n#object[clojure.print_object.remove_extraneous$eval72467$fn__72468 0x174abee5 \"clojure.print_object.remove_extraneous$eval72467$fn__72468@174abee5\"]\n\nIt’s quite easy to miss the fact that it is a function as we are looking for a tiny little fn in a sea of text. If, like me, you are fond of the odd lambda calculus excursion, things get even more hectic.\n\n((fn [x] (fn [v] ((x x) v))) (fn [y] y))\n\n\n#object[clojure.print_object.remove_extraneous$eval72471$fn__72472$fn__72473 0x29241a50 \"clojure.print_object.remove_extraneous$eval72471$fn__72472$fn__72473@29241a50\"]\n\nYikes! what an eyesore. This is not an academic issue specific to lambda calculus. Any function created from inside a function is helpfully identifiable through the fn$fn nesting. We create these quite regularly, and they are often printed in stack traces. I’m sure you have seen them when you map an inline function across a seq, and there is a bug in the anonymous function.\n\n(defn caesar-cipher [s]\n  (mapv (fn add2 [x] (+ 2 x)) s))\n\n\n(try (caesar-cipher \"hello world\")\n     (catch Exception ex\n       (vec (take 4 (.getStackTrace ex)))))\n\n\n[[clojure.lang.Numbers add \"Numbers.java\" 155]\n [clojure.lang.Numbers add \"Numbers.java\" 3747]\n [clojure.print_object.remove_extraneous$caesar_cipher$add2__72479 invoke \"NO_SOURCE_FILE\" 0]\n [clojure.core$mapv$fn__8565 invoke \"core.clj\" 7059]]\n\nSee that part caesar_cipher$add2? That is very useful information. It tells us that the exception was inside add2, which is inside caesar-cipher. The stack trace doesn’t print functions as objects, but it illustrates that the thing that we care about is that they are a function, what their name is, and whether they were created from inside another function.\nLet’s return to printing a function as an object. An easy improvement is to demunge from Java names to Clojure names. Demunging converts _ to - and $ to /, and munged characters like + which is PLUS in Java.\n\n(defn class-name\n  [x]\n  (-&gt; x class .getName Compiler/demunge))\n\n\n(class-name ((fn [] (fn [y] y))))\n\n\n\"clojure.print-object.remove-extraneous/eval72485/fn--72486/fn--72487\"\n\nNext, we don’t need the eval identities.\n\n(defn remove-extraneous\n  \"Clojure compiles with unique names that include things like `/eval32352/` and `--4321`.\n  These are rarely useful when printing a function.\n  They can still be accessed via (class x) or similar.\"\n  [s]\n  (-&gt; s\n      (str/replace #\"/eval\\d+/\" \"/\")\n      (str/replace #\"--\\d+(/|$)\" \"$1\")))\n\n\n(remove-extraneous (class-name ((fn [] (fn [y] y)))))\n\n\n\"clojure.print-object.remove-extraneous/fn/fn\"\n\nMuch nicer. I can actually read that! I’m not particularly fond of the long namespace shown as the name is either defined in this namespace, referred, or part of clojure.core. The multiple slashes form invalid symbols which annoy me; I prefer using / only for namespace/name separation and $ as the name level delimiter: my.namespace/my$nested$name.\n\n(defn format-class-name ^String [s]\n  (let [[ns-str & names] (-&gt; (remove-extraneous s)\n                             (str/split #\"/\"))]\n    (if (and ns-str names)\n      (str (str/join \"$\" names))\n      (-&gt; s (str/split #\"\\.\") (last)))))\n\n\n(format-class-name (remove-extraneous (class-name ((fn [] (fn [y] y))))))\n\n\n\"fn$fn\"\n\nSo short, so sweet. If it’s a function, why call it an object?\n\n(defn object-str ^String [x]\n  (str (if (fn? x) \"#fn\" \"#object\")\n       \" [\" (format-class-name (class-name x)) \"]\"))\n\n\n(object-str ((fn [] (fn [y] y))))\n\n\n\"#fn [fn$fn]\"\n\n\n(object-str (async/chan))\n\n\n\"#object [ManyToManyChannel]\"\n\nThis is really all I care to know about when printing objects and functions, and it matters inside notebooks, where we want to print things, eval things that return objects and functions, and datafy complex objects that contain other objects. To print things without knowing if they are objects, functions, or data, we can extend Clojure’s print-method.\n\n(defmethod print-method Object [x ^Writer w]\n  (.write w (object-str x)))\n\n\n#object [MultiFn]\n\n\n((fn [] (fn [y] y)))\n\n\n#fn [fn$fn]\n\n\n(async/chan)\n\n\n#object [ManyToManyChannel]\n\nYou can require this namespace from other notebooks to turn on this nice, concise mode of object printing.\nHappy notebooking!\n\nsource: src/clojure/print_object/remove_extraneous.clj"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Clojure Civitas",
    "section": "",
    "text": "About Posts Pages"
  },
  {
    "objectID": "civitas/explorer.html",
    "href": "civitas/explorer.html",
    "title": "Civitas Explorer",
    "section": "",
    "text": "We need a database of Clojure learning resources.\nOfficial Clojure DocumentationClojure for the Brave and TrueTransducers ExplainedClojureScript GuideReagent Documentationre-frame: A React FrameworkLuminus Web FrameworkTablecloth: Dataframe LibraryClay Documentationtech.ml Machine Learningdeps.edn ReferenceCIDER for Emacsshadow-cljs Build ToolKaocha Test RunnerSciCloj CommunityClojureCamp EventsClojureTV YouTubeClojurians SlackPracticalli TutorialsJVM Performance GuideComponent LibrarynREPL ProtocolDatomic DatabaseXTDB Documentation\n\n\nidtitleurlformattopicleveldepends-onclj-docsOfficial Clojure Documentationhttps://clojure.org/guides/getting_startedreference[:core]\n0brave-clojureClojure for the Brave and Truehttps://www.braveclojure.com/interactive-book[:core :core/fp]\n1transducersTransducers Explainedhttps://www.youtube.com/watch?v=6mTbuzafcIIvideo[:core :core/fp]\n2[\"clj-docs\"]\nreagent-docsReagent Documentationhttps://reagent-project.github.io/library-docs[:web :web/frontend]\n1re-framere-frame: A React Frameworkhttps://day8.github.io/re-frame/library-docs[:web :web/frontend]\n2[\"reagent-docs\"]\nluminusLuminus Web Frameworkhttps://luminusweb.com/framework[:web :web/backend]\n2tableclothTablecloth: Dataframe Libraryhttps://github.com/scicloj/tableclothlibrary-docs[:data :data/analysis]\n1clayClay Documentationhttps://scicloj.github.io/clay/publishing-tool[:data]\n2tech.mltech.ml Machine Learninghttps://github.com/techascent/tech.mllibrary-docs[:data :data/ml]\n3deps-edndeps.edn Referencehttps://clojure.org/reference/deps_and_clireference[:tooling]\n0ciderCIDER for Emacshttps://docs.cider.mx/tool-docs[:tooling :tooling/repl]\n1shadow-cljsshadow-cljs Build Toolhttps://shadow-cljs.github.io/docs/UsersGuide.htmltool-docs[:tooling :tooling/build]\n2sciclojSciCloj Communityhttps://scicloj.github.io/community[:community :community/orgs]\n0clojure-campClojureCamp Eventshttps://clojurecamp.berlin/community[:community :community/events]\n1clojure-tvClojureTV YouTubehttps://www.youtube.com/user/ClojureTVvideo-channel[:community :community/learning]\n0clojuriansClojurians Slackhttp://clojurians.net/community[:community :community/chat]\n0practicalliPracticalli Tutorialshttps://practical.li/tutorials[:community :community/learning]\n1jvm-tuningJVM Performance Guidehttps://clojure.org/reference/jvm_programmingguide[:systems :systems/production]\n3componentComponent Libraryhttps://github.com/stuartsierra/componentlibrary-docs[:systems :systems/design]\n2nreplnREPL Protocolhttps://nrepl.org/protocol[:systems :systems/tooling]\n2datomicDatomic Databasehttps://docs.datomic.com/cloud/database[:systems :systems/data :data/db]\n3clojurescriptClojureScript Guidehttps://clojurescript.org/reference[:core :web :tooling]\n1kaochaKaocha Test Runnerhttps://github.com/lambdaisland/kaochatool-docs[:tooling :tooling/testing]\n2xtdbXTDB Documentationhttps://xtdb.com/database[:systems :systems/data :data/db]\n3\n\n\n\nsource: src/civitas/explorer.clj"
  },
  {
    "objectID": "math/primes/factorization/sieve_augmented.html",
    "href": "math/primes/factorization/sieve_augmented.html",
    "title": "Factorization of Eratosthenes",
    "section": "",
    "text": "Adapts the Sieve of Eratosthenes to prime factorize numbers through n.\n\n(defn prime-factors [n]\n  (reduce\n   (fn [factors prime]\n     (if (= 1 (count (nth factors prime)))\n       (reduce\n        (fn [factors multiple]\n          (let [[composite-divisor :as divisors] (nth factors multiple)]\n            (if (&lt; prime composite-divisor)\n              (let [remaining-divisor (/ composite-divisor prime)\n                    remaining-divisors (nth factors remaining-divisor)\n                    prime-divisors (cons prime (rest divisors))]\n                (assoc\n                 factors multiple\n                 (if (&lt; 1 (count remaining-divisors))\n                   (concat remaining-divisors prime-divisors)\n                   (cons remaining-divisor prime-divisors))))\n              factors)))\n        factors\n        (range (* prime prime) (inc n) prime))\n       factors))\n   (mapv list (range (inc n)))\n   (range 2 (inc (m/sqrt n)))))\n\n\n(prime-factors 13)\n\n\n[(0)\n (1)\n (2)\n (3)\n (2 2)\n (5)\n (3 2)\n (7)\n (2 2 2)\n (3 3)\n (5 2)\n (11)\n (3 2 2)\n (13)]\n\n\nsource: src/math/primes/factorization/sieve_augmented.clj"
  },
  {
    "objectID": "math/stats/quantquestions/what_are_the_odds/five_pirates_treasure.html",
    "href": "math/stats/quantquestions/what_are_the_odds/five_pirates_treasure.html",
    "title": "Five Pirates Treasure Splitting",
    "section": "",
    "text": "Welcome back code champs, number ninjas, and data divers to the second episode of “What are the Odds?” where we answer life’s important questions.\n\nI was out treasure hunting with four friends the other day, and we found 100 gold coins. To split the booty, I came up with a genius plan. We take turns proposing how to divide the gold, and if half the crew agrees, we go with it. But if not I get nothing and the next person makes a proposal and so on. To my surprise, the others loved the idea! “A democracy of pirates!” said one. “A fair and logical system!” said another. Even our parrot nodded in approval. Can you guess how many coins I walked away with?\n\n(def pirates\n  [\"Green Boots\" \"Red Rackham\" \"Blue Thunder\" \"Black Beard\" \"Tim\"])\n\nWith only one pirate, they get all the booty\n\nGreen Boots: 100\n\nWith 2 pirates, whoever proposes the split gets all the booty\n\nRed Rackham 100\nGreen Boots 0\n\nWith 3 pirates, the pirate who would miss out in the next round is incentivised by 1 coin\n\nBlue Thunder 99\nRed Rackham 0\nGreen Boots 1\n\nWith 4 pirates, 1 vote needed, the pirate who would miss out is incentivised by 1 coin\n\nBlack Beard 99\nBlue Thunder 0\nRed Rackham 1\nGreen Boots 0\n\nWith 5 pirates, 2 votes needed, the 2 pirates who would miss out in the next round get a coin each\n\nTim 98\nBlack Beard 0\nBlue Thunder 1\nRed Rackham 0\nGreen Boots 1\n\nProbably you can spot a pattern emerging here…\n\n(defn split [coins pirates]\n  (let [n (count pirates)]\n    (-&gt; (mapv vector\n              (reverse pirates)\n              (cycle (if (odd? n) [1 0] [0 1])))\n        (assoc-in [0 1] (- coins (/ (if (odd? n) (dec n) n) 2))))))\n\n\n(split 100 pirates)\n\n\n[[\"Tim\" 98]\n [\"Black Beard\" 0]\n [\"Blue Thunder\" 1]\n [\"Red Rackham\" 0]\n [\"Green Boots\" 1]]\n\n\n^:kind/table\n(split 100 pirates)\n\n\n\n\n\n\nTim\n98\n\n\nBlack Beard\n0\n\n\nBlue Thunder\n1\n\n\nRed Rackham\n0\n\n\nGreen Boots\n1\n\n\n\n\n\n\n\n\nScallywag Pirate\n\n\nWell, it got me thinking, what if sharing your ideas was as easy as tricking treasure hunters? No sword fights. No mutiny. Just a fork, some code, a few comments, and a pull request. Let’s try it out. First I fork ClojureCivitas, Open the project, add a namespace, write some code, add some comments. Commit. Push. Pull request. Once it is merged, it is automatically published to the website. Doesn’t that look nice? I can even track how many people are reading my idea in these public analytics. If I want a quick preview, I use Clay to render the code and results to HTML. I hope you have an idea to share with me, Why not start a namespace and publish it this way?\nUntil next time, may your treasure split be fair and your adventures interesting.\n\nsource: src/math/stats/quantquestions/what_are_the_odds/five_pirates_treasure.clj"
  },
  {
    "objectID": "conferences/scinoj_light_1/notes/hallway_track.html",
    "href": "conferences/scinoj_light_1/notes/hallway_track.html",
    "title": "The Hallway Track: SciNoj Light #1 Data Analysis Stories",
    "section": "",
    "text": "The SciNoj Light #1 Conference brought together Clojure enthusiasts, data scientists, and researchers for an engaging exploration of data analysis stories. The event fostered a collaborative, informal atmosphere where participants exchanged ideas across disciplines from cognitive psychology to urban planning.\nIf you missed it, you can view the talks on the conference sessions playlist. The conference website has detailed information about the talks and speakers. Links to the notebook code presented are on the sessions page, and available as data in the info.edn file.\nThe concluding talk on lane reductions stood out as my favorite because it blended data-driven insights with relatable, human-interest storytelling. As a cyclist, I immediately connected with how lane reductions and protected bike lanes are impactful to my safety. The talk’s compelling visuals, grounded in real case studies, made the story very tangible. Heather’s personal perspective as a car-free parent added emotional weight. She illustrated how community advocacy and smart urban design saves lives, and makes more livable spaces. The mix of passion, rigor, and optimism left me inspired; data analysis can drive tangible, life-improving change.\n\n\n\nBike lane improvements reduce crashes\n\n\nA major focus of the conference was the development of Clojure’s data science Noj toolkit. This suite of libraries demonstrated how Clojure combines functional programming elegance with practical performance. Speakers highlighted Noj’s interoperability with Python and Java ecosystems while emphasizing its advantages for reproducible and maintainable workflows. The community’s collaborative energy was evident throughout.\n\n\n\nNoj core components\n\n\nArtificial intelligence emerged as a recurring theme, with several talks exploring hybrid approaches to enhance reliability. One discussion centered on Retrieval-Augmented Generation (RAG) systems, where combining large language models with Clojure’s logic programming capabilities could improve accuracy in structured domains like government Q&A. Another session delved into probabilistic programming with Inferme, illustrating Bayesian methods for modeling uncertainty. These technical deep dives were balanced by ethical considerations and reflections on technology’s societal implications.\nScientific applications showcased Clojure’s versatility. One talk explored simulating fluid dynamics. Another focused on forecasting tropical cyclone paths using physics-informed machine learning. Cognitive science experiments were also featured, using collaborative games and puzzles to study human planning behavior, and brain wave monitors. The conference also highlighted social impact work, such as data-driven advocacy for safer street designs, proving that technical tools can drive urban change.\nWhat stood out to me was how effectively the SciCloj community uses Clojure notebooks for collaborative work. Presenters shared their research through executable notebooks that cleanly combined code, visualizations and explanations. It’s a practical pattern broadly applicable for sharing ideas and knowledge.\nThroughout the event, a sense of optimism prevailed about Clojure’s untapped potential. While acknowledging gaps in ML tooling compared to Python, speakers demonstrated that Clojure’s functional rigor and JVM scalability make it a good fit for data science. Attendee discussions envisioned collaborating further on logic-guided AI and semantic web ontologies. There was a recurring theme of bridging the gap between academic theory and real-world engineering. SciNoj Light ultimately painted a picture of Clojure not just as a language, but as a catalyst for interdisciplinary innovation.\n\nYou can have the cake of Clojure’s immutable persistent data structures and eat it too;\nGet your answers fast and make your customers happy.\n— Harold\n\nA big thank you to the organizers! The event was an overwhelming success with high quality presentations and valuable discussions. I’m looking forward to the next SciNoj, it’s a rare and valuable blend of science, technology, community and code.\nBelow are my notes about the sessions and conversations from the conference.\n\nPre-conference interview\nEngaging to have a taste of what’s to come, got me really enthusiastic about the coming event. Game as a Research Tool: “Tik Tik” is a controlled environment for studying human cognition and collaboration. Combines cognitive psychology, game design, and data analysis.\n\n\n1.1: Hello\nCommunity-driven event. Informal, interactive, and welcoming. Focus on Clojure for data workflows. Tools and libraries have matured, and the conference shares these advancements. Zulip is the main forum, attendees are encouraged to engage via structured topic threads. The macroexpand session invites ideas for expanding Clojure adoption in various fields. Hosts encourage questions, jokes, and relaxed participation. Sets the tone for an inclusive, engaging, and slightly nerdy gathering of Clojure enthusiasts.\n\n\n1.2: An intro to the Noj toolkit\nNoj is a Clojure-based data science toolkit integrating libraries for data analysis, visualization, and machine learning. Designed for functional, efficient data processing with compatibility across libraries (e.g., Tablecloth, FastMath, Metamorph). Inspired by tools like R’s dplyr/ggplot and Python’s pandas/Plotly, but with a Clojure-centric approach. Tablecloth for tabular data manipulation (similar to pandas/dplyr). TablePlot grammar-of-graphics-inspired visualization (like ggplot). FastMath stats and statistical modeling (logistic regression and more). Metamorph for machine learning workflows. Worked example of predicting success in Kickstarter projects. Data loading/cleaning, exploratory analysis (grouping, aggregation, bar plots), predictive modeling, evaluation (train/test split, accuracy checks). Functional & Immutable, Noj leverages Clojure’s strengths. Efficient columnar storage with zero-copy operations.\n\n\n1.3: Probability and statistics - Daniel Slutsky\nGenerating pseudo-random numbers using seeds for reproducibility in research. Simulating dice rolls to explore distributions. Used histograms and scatter plots to visualize distributions. Computed mean, standard deviation and z-scores for comparison. Bayesian inference for probabilistic models with parameters. Conditioned models on observed data to infer posterior distributions. Highlighted constraints and efficient sampling algorithms. Avoid lazy sequences for large simulations; consider dtype-next or transducers. Visualization matters, histograms and scatter plots reveal patterns. Probabilistic programming models uncertainty and updates beliefs with data. Balanced foundational stats with advanced topics, emphasizing Clojure’s tools for data science.\n\n\n1.4: Customer churn analysis, LLMs & logic programming - Siavash Mohammady\nCustomers leaving significantly impacts revenue. Exploring factors like course format, teacher experience, and registration patterns. High churn in early months, newer teachers correlated with higher churn. User prompt → NLP entity recognition → LLM generates high-level DSL → Clara rule engine translates to low-level DSL → Execution. Mentorship for new teachers can reduce churn. Pairing LLMs abstract reasoning with logic engines concrete execution optimizes complex data tasks. A forward-looking talk blending data science, AI, and Clojure, emphasizing doing less.\n\n\n1.5: Linear Foundations & Nonlinear Frontiers - Jelena Losic\nLinear systems rely on superposition, the whole is the sum of parts. Vector spaces, linear regression, Fourier analysis. Real-world systems are often nonlinear. Linear methods fail when data lies on curved manifolds or exhibits complex interactions. Techniques like t-SNE, UMAP, and autoencoders handle nonlinearity by preserving structures or learning manifold geometry. Nonlinear systems can be deterministic yet unpredictable. Nonlinear methods unlock richer patterns but sacrifice interpretability and require more data. Dimensionality reduction illustrates the trade-off between simplicity and accuracy. Embeddings leverage linear algebra but rely on nonlinear transformations for deeper semantics.\n\n\n1.6: RAGgedy Ann’s Big Adventure - Paula Gearon\nVectors represent concepts in multidimensional space. Embeddings convert text into vectors, capturing meaning. Similarity between vectors is measurable. Neural networks process inputs through weighted connections and activation functions. Transformers contextualize words in sentences. Combining LLMs with vector databases to reduce hallucinations. Augmenting queries with retrieved context. LLMs are built from modular math operations. Vector databases enable semantic search. RAG improves accuracy by grounding LLM outputs in verified data.\n\n\n1.7: Parliamentary Questions - RAG Evaluation - Eoin Carney\nCan RAG effectively answer parliamentary style questions using Irish government data? 10k publicly available Irish parliamentary questions and answers. Compared sentence-based chunking with full document retrieval. Tested multiple LLMs for generation and evaluation. Retrieval Matters More Than Prompting. Smaller, precise chunks of 3–5 sentences improved precision over full document retrieval. Direct answer retrieval outperformed matching questions to answers. Deterministic metrics like word overlap failed to capture nuance. LLM as judge worked better for correctness. Clay notebook visualization helped explore vector embeddings interactively. Government answers should be plain and factual. LLMs are oddly well-suited for that.\n\n\n1.8 - Discussion: RAGs and Structured Knowledge\nShared experiences using Clojure for AI projects. Exploring logic programming as a superset of reasoning techniques and unifying them with embeddings and vector logic. Foundational ontologies and their role in structuring knowledge for AI, particularly in medical domains. The conversation fluidly shifted from technical to philosophical and practical.\n\n\n1.9: Noj Deep Dive - Harold & Daniel Slutsky\nUsing Clojure for functional data science, contrasting it with Python tools like Pandas. The focus is on immutability, performance, and leveraging Clojure’s strengths for data processing. Tech.ml.dataset for tabular data processing. Columnar storage for efficiency and integrates with other libraries in the ecosystem. Layered Architecture. Hamfisted high-performance, immutable collections optimized for JVM memory/CPU. Dtype-next array random access and lazy, non-caching transformations. Tablecloth high-level tabular data tools built atop these foundations. Challenges and solutions for integrating with Python via libpython-clj and stdlang. Hamfisted and Dtype-next enable Clojure to match Java/Python performance while retaining functional idioms. 20x speedup in lazy sequences. Columnar storage in TMD reduces memory overhead. Libraries like FastMath, MetamorphML, and Tableplot extend the stack. Real-world applications in consulting and open-source collaboration. Frequent shoutouts to contributors and emphasis on community input via Zulip. If you think data science needs software engineering, you’re right. A blend of technical rigor, community spirit, and practical focus on building scalable, functional data tools.\n\n\n1.10: Brain data in Clojure - Lorelai Lyons\nEthical and Historical Context of Brain-Computer Interfaces. Morally questionable history of neuroscience. Need for ethical considerations in modern BCIs. The goal is to bridge the gap between continuous human thought and discrete computing. Neurons generate electrical signals that can be recorded and digitized. EEG measures brainwave frequencies via electrodes placed on the scalp. EEG data from a motor imagery study. Applied filters to isolate frequency bands. Developing a low-cost binary file system for efficient EEG data storage. Exploring brain-controlled interfaces for creative applications. Consumer EEG devices make brain data collection feasible for programmers. BCIs require collaboration across neuroscience, hardware, and software. Mixed technical depth with ethical reflection.\n\n\n2.1: 1D Viscous Fluid Flow Data Analysis, Burgers’ Equation - Siyoung Byun\nFluid dynamics is complex, involving variables like friction, pressure, and momentum. CFD uses computational methods to simulate fluid behavior, crucial for fields like aerospace, healthcare, and astrophysics. Astrophysics simulations of binary star collisions use CFD. Burgers’ Equation combines nonlinear convection (steepening fluid motion) and viscosity (smoothing/diffusion). Demonstrated via simulations of a shock in a 1D fluid, visualized over time. Used mutable Java arrays for performance. Extending to 2D/3D simulations and incorporate the Navier-Stokes equations for full fluid dynamics. Visualization Matters. Plotting data is critical for interpreting simulations. Siyoung emphasizes the learning process and invites collaboration. Technical but accessible, viscosity effects are explained with analogies. Passion for both astrophysics, fluid dynamics and Clojure shines through. Simulations of white dwarf collisions brought home the realization that star interactions are fluid. Korean ondol floor heating as an analogy for convection.\n\n\n2.2: UK Electricity Demand Time Series Forecasting - Anton Lobach\nThe Taylor dataset contains electricity demand in Wales/England. Extract day of week, minute of day, weekend flag. Ridge regression regularized linear regression to prevent overfitting. Use rolling origin cross-validation. Root Mean Squared Error to measure forecast accuracy. Clojure has expressive, modular workflows with strong data processing capabilities. Seasonality matters. Minute-of-day was the most predictive feature. Ridge regression achieved reasonable accuracy. Split data into train/test sets before exploratory analysis to avoid bias. Use rolling windows for temporal data. The tutorial is available as an interactive notebook.\n\n\n2.3: Tropical cyclone trajectory modelling - K Ram Narayan, Naimish Mani B\nAccurate trajectory forecasting is crucial for disaster preparedness, evacuation planning, and minimizing loss of life and property. Forecasting relies on a mix of satellite data, computer simulations, and aircraft reconnaissance. Using SINDy (Sparse Identification of Nonlinear Dynamics), to extract governing equations from cyclone trajectory data to predict future paths. Global cyclone track dataset. Satellite imagery used to compute wind velocity and shear via optical flow. Incorporates cyclone dynamics to refine SINDy’s candidate equations. Cyclone movement is driven by steering winds, Coriolis force, beta drift, and interactions with pressure systems. Collect trajectory and satellite data. Construct a candidate library of possible dynamical terms. Use Lasso regression to sparsely select the most relevant terms. Derive interpretable differential equations for forecasting. SINDy achieved a 43.71 km mean absolute error, acceptable in cyclone forecasting. Outperformed by gradient boosting, and random forest in single-step prediction but excels in full trajectory forecasting. Bay of Bengal cyclones curve unpredictably due to land effects. Bridges meteorology, physics, and machine learning for cyclone prediction.\n\n\n2.4: Studying planning with a novel video game - Cvetomir Dimov\nPlanning is a fundamental cognitive ability used in everyday tasks. “Tik Tik” game is designed to study planning. Players control a fireball and an ice cube that must collaborate to navigate obstacles and reach targets. A custom program was developed to generate and solve game levels, identifying optimal paths and measuring problem difficulty. Goal is to understand what incentivizes planning. Difficulty influenced by the number of barriers and their intersections. Problem difficulty predictors were the minimum moves needed and the number of possible paths up to the optimal length. Study 1 high dropout rates, large individual differences in planning ability. Study 2 time limits and stricter move limits reduced dropouts and reinforced planning incentives. Tight constraints encourage planning. Problem difficulty can be systematically manipulated for cognitive research. Demonstrations of the game and solver make abstract concepts tangible. Credits multiple software tools, emphasizing a community-driven approach to research.\n\n\n2.5: Building a Data Science Ecosystem in Clojure - Kira Howe\nInspiration from the Tidyverse (R). A cohesive ecosystem with shared design principles on data and composable tools. Standardized data structures and streamline workflows. Fragmented tools create glue code overhead. Immutable data and pure functions enable reproducibility. JVM handles large-scale data efficiently. Engineering culture emphasis on stability and interoperability. Explosive data growth demands scalable, deterministic tools. Noj as a Clojure based ecosystem inspired by Tidyverse but optimized for scalability and engineering. Simplify onboarding through Jupyter support and Clojure in a box. Need for Shiny-like tools for rapid prototyping. Emphasized grassroots community building and learning together. Data quality should be a philosophy, not an afterthought.\n\n\n2.6: Macroexpand-1\nWays to broaden Clojure’s impact beyond its traditional domains by fostering interdisciplinary collaboration. Need to make Clojure more accessible and visible in fields like data science, education, and specialized industries. Improve tooling, documentation, and community outreach. Developer intuitive libraries, enhancing interoperability with other languages. Lowering barriers for newcomers. Importance of geospatial analysis and modern programming practices. Sustainable community efforts and cross-disciplinary knowledge sharing.\n\n\n2.7: The Impact of Lane Reductions - Heather Moore-Farley\nReducing car lanes, protected bike lanes, and pedestrian crossings decrease traffic injuries and fatalities. California’s crash data used to visualize collision hotspots to push for safer street redesigns. High injury corridors 6% of streets cause 60% of severe/fatal crashes. Correlated lane reductions, protected bike lanes, and raised bus stops led to fewer crashes over time. Local groups use data to advocate for safer streets. Police reported crash data has missing ages, locations and underreporting driver fault. Heather shares her lived experience as a car-free parent in Oakland, tying data to safety. Design solutions and community action work. Advocating for upcoming redesigns. A compelling mix of data science, urbanism, and grassroots advocacy. Number crunching can drive tangible change."
  },
  {
    "objectID": "scicloj/noj/intro/getting-started-noj.html",
    "href": "scicloj/noj/intro/getting-started-noj.html",
    "title": "Noj Reload Executable",
    "section": "",
    "text": "Transcript of Noj Reload Executable\nHello code champs, number ninjas and data divers!\nImagine being able to experiment with Clojure without needing to install tooling, set up editors, or even know about deps.edn Sounds like a dream, right? Well, dream no more—meet Noj’s new Code Reload Executable!\n\n\n\nNoj\n\n\nWe can skip the Clojure tooling and editor setup, but we do need to install the recommended Adoptive Java. Now we download the latest Noj jar from the Scicloj Noj GitHub releases page. Let’s check the jar is in the Downloads directory, and that we have java installed by executing java -version.\nLaunch Noj using java -jar and the path to the jar file. Pro tip, if you press tab while typing a path, it will autocomplete. Noj is running, it created a directory called notebooks, and it recommends we create a Clojure file there.\nI’ll create my file with Notepad, being careful to create a .clj file rather than a text file. When I saved that file, a browser window opened. Let’s put them side by side. Every time I save the file, the notebook updates.\nIf I’m interested in one particular top-level form, I can narrow the output by adding ,, anywhere in the form. And removing it renders the full notebook. And check this out—comments are rendered as Markdown. How cool is that? What an easy way to get coding!\nNoj isn’t just a notebook—it’s a fully featured data science environment. It includes interesting datasets that can be queried and the results shown as tables or even better as charts.\nNoj makes experimenting with Clojure easier than ever. No setup headaches, no complicated tooling—just pure coding joy.\nUntil next time, Keep on coding"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Clojure Civitas makes it easy for you to publish Clojure ideas and explorations without the overhead of setting up a new project, blog, or repo. Whether you’re sketching out a quick experiment or writing a deeper post, just fork this repo, create a namespace, write, commit and submit a pull request. This is your shared scratch space.\n\n\n\n\nNavigate your own path through interconnected topics.\n\n\n\n\n\nWrite notebooks and situate them in a broader context by linking ideas.\n\n\n\n\n\nThe best resources rise through collective refinement.\n\n\n\nAn open effort to structure learning resources with meaningful connections.\n“Civitas” refers to a community of citizens, encompassing the rights, duties, and privileges associated with belonging. It’s a term that signifies citizenship, not just a physical city, but also the political and social fabric of the community.\n\n\nSee README.md.\n\n\n\nClojure and markdown are a natural fit for interactive, literate programming. But there is incidental complexity in setup and publishing. Creating a new project, configuring a blog, choosing themes and styling, organizing files, adding analytics, and thinking about SEO all add overhead. This friction discourages experimentation and makes publishing harder than it needs to be.\n\n\nMarkdown comments in Clojure namespaces is a perfect fit for interactive literate programming. Creators should only have to care about their code, not setting up projects or hosting workflows. Let’s make a shared, organized platform for short experiments, tutorials, notes, and blog posts.\n\n\n\nCivitas aggregates structured metadata about the content it hosts and links it to other Clojure resources. We can build a connected web of ideas, showing how concepts relate, what builds on what, and where to go next. A hex-grid interface presents these relationships visually. Each notebook can declare prerequisites, alternatives, and follow-ups. This helps learners discover next steps, helps educators design coherent learning paths, and enables the community to improve content over time. The goal is to make the Clojure knowledge ecosystem easier to explore and navigate.\n\n\n\nClojure Civitas does not aim to centralize Clojure knowledge. Rather it hopes to amplify existing resources, connect with them, and add a place in between for raw ideas and creative experiments.\n\n\n\n\n\n\n\nContent is submitted via Pull Requests, which are reviewed to prevent abuse. A small team of reviewers ensures quick turnaround. Community representatives are available to assist and guide contributors.\n\n\n\nMetadata is provided by authors. Future improvements may include automated extraction and smarter linking to enrich the knowledge base.\n\n\n\nPage view analytics are publicly available. See the Clojure Civitas Analytics Dashboard.\n\n\n\nMade with Clay. See the README.md in the repository for contribution guidelines and technical details.\n\n\n\n\nWe value reproducible artifacts. Start with code. Make it work. Then tell the story."
  },
  {
    "objectID": "about.html#usage",
    "href": "about.html#usage",
    "title": "About",
    "section": "",
    "text": "See README.md."
  },
  {
    "objectID": "about.html#rationale",
    "href": "about.html#rationale",
    "title": "About",
    "section": "",
    "text": "Clojure and markdown are a natural fit for interactive, literate programming. But there is incidental complexity in setup and publishing. Creating a new project, configuring a blog, choosing themes and styling, organizing files, adding analytics, and thinking about SEO all add overhead. This friction discourages experimentation and makes publishing harder than it needs to be.\n\n\nMarkdown comments in Clojure namespaces is a perfect fit for interactive literate programming. Creators should only have to care about their code, not setting up projects or hosting workflows. Let’s make a shared, organized platform for short experiments, tutorials, notes, and blog posts.\n\n\n\nCivitas aggregates structured metadata about the content it hosts and links it to other Clojure resources. We can build a connected web of ideas, showing how concepts relate, what builds on what, and where to go next. A hex-grid interface presents these relationships visually. Each notebook can declare prerequisites, alternatives, and follow-ups. This helps learners discover next steps, helps educators design coherent learning paths, and enables the community to improve content over time. The goal is to make the Clojure knowledge ecosystem easier to explore and navigate.\n\n\n\nClojure Civitas does not aim to centralize Clojure knowledge. Rather it hopes to amplify existing resources, connect with them, and add a place in between for raw ideas and creative experiments."
  },
  {
    "objectID": "about.html#how-it-works",
    "href": "about.html#how-it-works",
    "title": "About",
    "section": "",
    "text": "Content is submitted via Pull Requests, which are reviewed to prevent abuse. A small team of reviewers ensures quick turnaround. Community representatives are available to assist and guide contributors.\n\n\n\nMetadata is provided by authors. Future improvements may include automated extraction and smarter linking to enrich the knowledge base.\n\n\n\nPage view analytics are publicly available. See the Clojure Civitas Analytics Dashboard.\n\n\n\nMade with Clay. See the README.md in the repository for contribution guidelines and technical details."
  },
  {
    "objectID": "about.html#why-markdown-in-code",
    "href": "about.html#why-markdown-in-code",
    "title": "About",
    "section": "",
    "text": "We value reproducible artifacts. Start with code. Make it work. Then tell the story."
  },
  {
    "objectID": "pages.html",
    "href": "pages.html",
    "title": "Pages",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n      \n        Author\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nCivitas Explorer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAuthors\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "code_interview/beating/with_stupid_stuff/z_combinator_gambit.html",
    "href": "code_interview/beating/with_stupid_stuff/z_combinator_gambit.html",
    "title": "The Z-Combinator Gambit",
    "section": "",
    "text": "Welcome back code champs, number ninjas, and data divers to our first episode of Beating Code Interviews with Stupid Stuff. People often send me emails asking, “How can I use lambda calculus to impress people?” Today, we find out.\n\n\n\nProgrammer staring at Z-combinator\n\n\nI have an interview with ZCorp lined up in 5 minutes, and our challenge is to only use anonymous functions. No defn, no loops, and definitely no self-reference. I’ll allow myself the occasional def for brevity, but beyond that, we’ll be running on pure lambda calculus.\n20 minutes later\n\nHey, sorry to keep you waiting. I just got out of a more important meeting. I’m kind of a big deal here at ZCorp. Why don’t you tell me a little bit about yourself?\n\nBorn of binary, raised on algorithms, I walk the path of lambda…\n\nRiiiight… Let’s just start with the warm-up problem. Show me how you would reverse a list.\n\nAh, the timeless list reversal. Deceptively simple, perilously deep. We must first define our purpose.\n\n(fn [SELF LIST])\n\n\n#fn [fn]\n\n\nWe’re just writing a function, and it only needs to take a list…\n\nNot just any function, my friend, but one that knows itself. To know yourself is to find your fixed point.\n\n(def REV\n  (fn [SELF LIST]\n    (if (empty? LIST)\n      []\n      (conj (SELF SELF (rest LIST))\n            (first LIST)))))\n\n\n(REV REV [1 2 3 4 5])\n\n\n[5 4 3 2 1]\n\nSELF is an input to itself, the logic of reversal.\n\nOk let’s just move on to the next problem, creating a Fibonacci sequence.\n\nOh no, our definition of reverse is intertwined with recursion. Let’s factor that out:\nWe need to lift our SELF\n\n(def REV'\n  (fn [SELF]\n    (fn [LIST]\n      (if (empty? LIST)\n        []\n        (conj (SELF (rest LIST))\n              (first LIST))))))\n\n\n((REV' REV') [1 2 3 4 5])\n\n\n\n\n\n\n\nClassCastException\n\n\n\n\n\n\n#error {\n :class   java.lang.ClassCastException\n :message \"class code_interview.beating.with_stupid_stuff.z_combinator_gambit$REV_SINGLEQUOTE_$fn__45748 cannot be cast to class clojure.lang.IPersistentCollection (code_interview.beating.with_stupid_stuff.z_combinator_gambit$REV_SINGLEQUOTE_$fn__45748 is in unnamed module of loader clojure.lang.DynamicClassLoader @6f2399bf; clojure.lang.IPersistentCollection is in unnamed module of loader 'app')\"\n :trace\n [[clojure.core/conj                                                     \"core.clj\" 84]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REV'/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/eval]\n  [Compiler.eval                                                         \"Compiler.java\" 7700]\n  [Compiler.eval                                                         \"Compiler.java\" 7655]\n  [clojure.core/eval                                                     \"core.clj\" 3232]\n  [scicloj.clay.v2.notebook/read-eval-capture/fn/fn                      \"notebook.clj\" 62]\n  [scicloj.clay.v2.notebook/read-eval-capture/fn                         \"notebook.clj\" 60]\n  [scicloj.clay.v2.notebook/read-eval-capture                            \"notebook.clj\" 59]\n  [scicloj.clay.v2.notebook/complete                                     \"notebook.clj\" 92]\n  [scicloj.clay.v2.notebook/complete-notes/fn                            \"notebook.clj\" 291]\n  [ArrayChunk.reduce                                                     \"ArrayChunk.java\" 65]\n  [clojure.core.protocols/fn                                             \"protocols.clj\" 135]\n  [clojure.core.protocols/fn/G                                           \"protocols.clj\" 19]\n  [clojure.core.protocols/seq-reduce                                     \"protocols.clj\" 31]\n  [clojure.core.protocols/fn                                             \"protocols.clj\" 74]\n  [clojure.core.protocols/fn/G                                           \"protocols.clj\" 13]\n  [clojure.core/reduce                                                   \"core.clj\" 6965]\n  [scicloj.clay.v2.notebook/complete-notes                               \"notebook.clj\" 286]\n  [scicloj.clay.v2.notebook/items-and-test-forms/fn                      \"notebook.clj\" 396]\n  [clojure.core/with-redefs-fn                                           \"core.clj\" 7706]\n  [scicloj.clay.v2.notebook/items-and-test-forms                         \"notebook.clj\" 397]\n  [scicloj.clay.v2.make/handle-single-source-spec!                       \"make.clj\" 336]\n  [clojure.core/mapv/fn                                                  \"core.clj\" 7059]\n  [ArrayChunk.reduce                                                     \"ArrayChunk.java\" 60]\n  [clojure.core.protocols/fn                                             \"protocols.clj\" 135]\n  [clojure.core.protocols/fn/G                                           \"protocols.clj\" 19]\n  [clojure.core.protocols/seq-reduce                                     \"protocols.clj\" 31]\n  [clojure.core.protocols/fn                                             \"protocols.clj\" 74]\n  [clojure.core.protocols/fn/G                                           \"protocols.clj\" 13]\n  [clojure.core/reduce                                                   \"core.clj\" 6965]\n  [clojure.core/mapv                                                     \"core.clj\" 7050]\n  [scicloj.clay.v2.make/make!                                            \"make.clj\" 427]\n  [scicloj.clay.v2.api/make!                                             \"api.clj\" 35]\n  [scicloj.clay.v2.main/-main                                            \"main.clj\" 52]\n  [Var.applyTo                                                           \"Var.java\" 707]\n  [clojure.core/apply                                                    \"core.clj\" 667]\n  [clojure.main/main-opt                                                 \"main.clj\" 515]\n  [clojure.main/main                                                     \"main.clj\" 665]\n  [Var.applyTo                                                           \"Var.java\" 707]\n  [main.main                                                             \"main.java\" 40]]}\n\n\n\nOh, no… SELF doesn’t take LIST, it’s a function that returns a function that operates on LIST, and the argument to SELF is… SELF. Therefore, we need to give it (SELF SELF).\n\n(def REV''\n  (fn [SELF]\n    (fn [LIST]\n      (if (empty? LIST)\n        []\n        (conj ((SELF SELF) (rest LIST))\n              (first LIST))))))\n\n\n((REV'' REV'') [1 2 3 4 5])\n\n\n[5 4 3 2 1]\n\n\nThat’s a confusing way to write it\n\nQuite right, because it’s not obvious what (SELF SELF) is. We need to extract it out. What we want is:\n\n(def REV-LOGIC\n  (fn [SELF]\n    (fn [LIST]\n      (if (empty? LIST)\n        []\n        (conj (SELF (rest LIST))\n              (first LIST))))))\n\n\nBelieve me when I say that is not what I meant…\n\nOh, right. Now SELF = (SELF SELF).\n\nNot what I meant, and also that sounds impossible.\n\nBut identity is the identity of itself:\n\n(identity 1)\n\n\n1\n\n\n((identity identity) 1)\n\n\n1\n\n\nO.K. sure, but that’s a special case.\n\n\n(((identity identity) (identity identity)) 1)\n\n\n1\n\n\nThis is an identity crisis.\n\nWe just need to find the right conditions for (SELF SELF) = SELF.\n\n(REV-LOGIC REV-LOGIC)\n\n\n#fn [REV-LOGIC$fn]\n\n\nWell, it’s a function! That much is clear…\n\n\n((REV-LOGIC REV-LOGIC) [1 2 3 4 5])\n\n\n\n\n\n\n\nClassCastException\n\n\n\n\n\n\n#error {\n :class   java.lang.ClassCastException\n :message \"class code_interview.beating.with_stupid_stuff.z_combinator_gambit$REV_LOGIC$fn__45758 cannot be cast to class clojure.lang.IPersistentCollection (code_interview.beating.with_stupid_stuff.z_combinator_gambit$REV_LOGIC$fn__45758 is in unnamed module of loader clojure.lang.DynamicClassLoader @36559157; clojure.lang.IPersistentCollection is in unnamed module of loader 'app')\"\n :trace\n [[clojure.core/conj                                                          \"core.clj\" 84]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REV-LOGIC/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/eval]\n  [Compiler.eval                                                              \"Compiler.java\" 7700]\n  [Compiler.eval                                                              \"Compiler.java\" 7655]\n  [clojure.core/eval                                                          \"core.clj\" 3232]\n  [scicloj.clay.v2.notebook/read-eval-capture/fn/fn                           \"notebook.clj\" 62]\n  [scicloj.clay.v2.notebook/read-eval-capture/fn                              \"notebook.clj\" 60]\n  [scicloj.clay.v2.notebook/read-eval-capture                                 \"notebook.clj\" 59]\n  [scicloj.clay.v2.notebook/complete                                          \"notebook.clj\" 92]\n  [scicloj.clay.v2.notebook/complete-notes/fn                                 \"notebook.clj\" 291]\n  [ArrayChunk.reduce                                                          \"ArrayChunk.java\" 65]\n  [clojure.core.protocols/fn                                                  \"protocols.clj\" 135]\n  [clojure.core.protocols/fn/G                                                \"protocols.clj\" 19]\n  [clojure.core.protocols/seq-reduce                                          \"protocols.clj\" 31]\n  [clojure.core.protocols/fn                                                  \"protocols.clj\" 74]\n  [clojure.core.protocols/fn/G                                                \"protocols.clj\" 13]\n  [clojure.core/reduce                                                        \"core.clj\" 6965]\n  [scicloj.clay.v2.notebook/complete-notes                                    \"notebook.clj\" 286]\n  [scicloj.clay.v2.notebook/items-and-test-forms/fn                           \"notebook.clj\" 396]\n  [clojure.core/with-redefs-fn                                                \"core.clj\" 7706]\n  [scicloj.clay.v2.notebook/items-and-test-forms                              \"notebook.clj\" 397]\n  [scicloj.clay.v2.make/handle-single-source-spec!                            \"make.clj\" 336]\n  [clojure.core/mapv/fn                                                       \"core.clj\" 7059]\n  [ArrayChunk.reduce                                                          \"ArrayChunk.java\" 60]\n  [clojure.core.protocols/fn                                                  \"protocols.clj\" 135]\n  [clojure.core.protocols/fn/G                                                \"protocols.clj\" 19]\n  [clojure.core.protocols/seq-reduce                                          \"protocols.clj\" 31]\n  [clojure.core.protocols/fn                                                  \"protocols.clj\" 74]\n  [clojure.core.protocols/fn/G                                                \"protocols.clj\" 13]\n  [clojure.core/reduce                                                        \"core.clj\" 6965]\n  [clojure.core/mapv                                                          \"core.clj\" 7050]\n  [scicloj.clay.v2.make/make!                                                 \"make.clj\" 427]\n  [scicloj.clay.v2.api/make!                                                  \"api.clj\" 35]\n  [scicloj.clay.v2.main/-main                                                 \"main.clj\" 52]\n  [Var.applyTo                                                                \"Var.java\" 707]\n  [clojure.core/apply                                                         \"core.clj\" 667]\n  [clojure.main/main-opt                                                      \"main.clj\" 515]\n  [clojure.main/main                                                          \"main.clj\" 665]\n  [Var.applyTo                                                                \"Var.java\" 707]\n  [main.main                                                                  \"main.java\" 40]]}\n\n\n\nBut it doesn’t work, because (REV-LOGIC REV-LOGIC) =/= REV-LOGIC. Let’s try something easier:\n\n(def FIX\n  (fn [LOGIC]\n    ;; return something like identity where self application does not change it\n    #_FIXED))\n\nFIX takes the logic function, and makes a function such that (FIXED (FIX LOGIC)) = FIXED\n(FIXED FIXED) =&gt; FIXED which means that ((FIX LOGIC) (FIX LOGIC)) = (FIX LOGIC)\n\nRight, that sounds way easier… shaking head in disbelief\n\nExactly! Because we just reverse it: (FIX F) = ((FIX F) (FIX F))\n\nWhy did you call it FIX?\n\nWell, it was broken before right?\n\nI’m starting to think that you are the broken one.\n\n\n(def FIX\n  (fn [LOGIC]\n    ((FIX LOGIC) (FIX LOGIC))))\n\nBut FIX can still see itself. We need to parameterize the use of FIXED\n\n(def FIX\n  (fn [LOGIC]\n    ((fn [FIXED]\n       (LOGIC (FIXED FIXED)))\n     (fn [FIXED]\n       (LOGIC (FIXED FIXED))))))\n\nThere, I fixed it.\n\nWhat is fixed?\n\nFIXED is (FIXED FIXED), obviously.\n\nObviously. raises hands in dispair\n\nBecause (FIX F) = ((FIX F) (FIX F)), it was your idea to refactor remember?\n\n(FIX REV-LOGIC)\n\n\n\n\n\n\n\nStackOverflowError\n\n\n\n\n\n\n#error {\n :class   java.lang.StackOverflowError\n :trace\n [[code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/FIX/fn]]}\n\n\n\n\nEverything looks to be inside out now.\n\nOh, you are right, we can’t pass (FIXED FIXED) as an argument because it will be evaluated first. Thanks for the tip.\n\nCan we fix it? slaps self\n\nInstead of calling (FIXED FIXED) we need a function that will create (FIXED FIXED) when it’s needed, after LOGIC gets called. LOGIC needs to take itself as it’s argument, so the function we pass to LOGIC should look very much like LOGIC, but of course without any actual logic in it.\n\nThat actually sounds logical.\n\nLOGIC is a function of itself, returning a function that acts on a value:\n(LOGIC (fn SELF [VALUE]\n         ((FIXED FIXED) VALUE)))\n\ndidn’t you say that (FIXED FIXED) = FIXED?\n\nYes but only after we FIX it. Fixing it requires us to go from FIXED to (FIXED FIXED) remember?\n\nAh sure…\n\nSo while we are fixing logic, let’s replace (LOGIC (FIXED FIXED)) with our deferring function.\n\n(def FIX\n  (fn [LOGIC]\n    ((fn [FIXED]\n       (LOGIC (fn SELF [VALUE]\n                ((FIXED FIXED) VALUE))))\n     (fn [FIXED]\n       (LOGIC (fn SELF [VALUE]\n                ((FIXED FIXED) VALUE)))))))\n\nDid you know this is called continuation passing style?\n\nCSP?\n\nNo, that’s communicating subprocesses.\n\nThat’s confusing.\n\nIsn’t it!? Fortunately, we are about to be unconfused.\n\n(FIX REV-LOGIC)\n\n\n#fn [REV-LOGIC$fn]\n\n\nAt least it didn’t blow up this time…\n\n\n((FIX REV-LOGIC) [1 2 3 4 5])\n\n\n[5 4 3 2 1]\n\n\nNice, that’s the right answer.\n\nEven nicer is that our fixed logic behaves like identity now:\n\n((REV-LOGIC (FIX REV-LOGIC)) [1 2 3 4 5])\n\n\n[5 4 3 2 1]\n\n\n((REV-LOGIC (REV-LOGIC (FIX REV-LOGIC))) [1 2 3 4 5])\n\n\n[5 4 3 2 1]\n\n\nI can’t believe something so ridiculous actually works.\n\nYes it is ridiculous to have all those silly names. Let’s fix that:\n\n(def Z\n  (fn [F]\n    ((fn [X]\n       (F (fn [V] ((X X) V))))\n     (fn [X]\n       (F (fn [V] ((X X) V)))))))\n\nYou are not your variables. Rename them, rebind them. Your essence is invariant.\n\n((Z REV-LOGIC) [1 2 3 4 5])\n\n\n[5 4 3 2 1]\n\n\nWait, we are meant to be doing Fibonacci, remember?\n\nWe are factoring out our LOGIC.\n\nIt looks to me like you doubled the code, that’s not great refactoring. Using single letters make it totally unreadable.\n\nHmmm, there does seem to be a lot of doubling. We can factor out a function for f =&gt; (f f).\n\n(def REPLICATE \"Omega, the self-devouring serpent\"\n  (fn [F]\n    (F F)))\n\nThe replication of identity is itself.\n\n((REPLICATE identity) 1)\n\n\n1\n\nBut test not the serpent lightly\n\n(REPLICATE REPLICATE)\n\n\n\n\n\n\n\nStackOverflowError\n\n\n\n\n\n\n#error {\n :class   java.lang.StackOverflowError\n :trace\n [[code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]\n  [code-interview.beating.with-stupid-stuff.z-combinator-gambit/REPLICATE]]}\n\n\n\nThe replication of replication is eternal. Now we can clean up that duplication.\n\n(def Z\n  (fn [LOGIC]\n    (REPLICATE (fn [X]\n                 (LOGIC (fn [V] ((X X) V)))))))\n\n\n((Z REV-LOGIC) [1 2 3 4 5])\n\n\n[5 4 3 2 1]\n\n\nThat’s not really any clearer…\n\nVery well, we can keep extracting.\n\n(def DEFER \"Eta, the patient one\"\n  (fn [LOGIC]\n    (fn [VALUE]\n      ((REPLICATE LOGIC) VALUE))))\n\nIf the infinite is deferred, is it infinite?\n\n(def FOLD \"Zeta, weaver of logic, bringer of finitude\"\n  (fn [LOGIC]\n    (REPLICATE (fn [SELF]\n                 (LOGIC (DEFER SELF))))))\n\nOMEGA diverges, ZETA folds, LOGIC writes QED.\n\n((FOLD REV-LOGIC) [1 2 3 4 5])\n\n\n[5 4 3 2 1]\n\nThat’s much nicer, I’m so glad you suggested using longer names.\n\nCan we write Fibonacci, please?\n\nOh, that’s easy now!\n\n(def FIB-LOGIC\n  (fn [SELF]\n    (fn [[B A :as FIBS]]\n      (if (&gt; B 10)\n        FIBS\n        (SELF (concat [(+ A B) B] FIBS))))))\n\n\n((FOLD FIB-LOGIC) [1 1])\n\n\n(13 8 8 5 5 3 3 2 2 1 1 1)\n\n\nThat’s all backward!!\n\nOh, my mistake\n\n((FOLD REV-LOGIC) ((FOLD FIB-LOGIC) [1 1]))\n\n\n[1 1 1 2 2 3 3 5 5 8 8 13]\n\n\nYou can’t be serious… This is ridiculous. We’ll be here forever if you keep this up.\n\nI love that idea! An infinite sequence is exactly what we need…\n\n(def FIB-LOGIC-FOREVER\n  (fn [SELF]\n    (fn [A]\n      (fn [B]\n        (lazy-seq\n          (cons A ((SELF B) (+ A B))))))))\n\n\n(take 20 (((FOLD FIB-LOGIC-FOREVER) 1) 1))\n\n\n(1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765)\n\nThat’s so nice.\n\nOh look at the time! I have a more important meeting to go to! disconnects\n\nOuch, Rough. ZCorp never got back to me, so let’s update the scoreboard as a loss.\n\n\n\n\n\nInterviews\nWins\nGGs\n\n\n\n\n1\n0\n0\n\n\n\n\n\nThat’s all for today. Until next time, keep on coding.\n\nsource: src/code_interview/beating/with_stupid_stuff/z_combinator_gambit.clj"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Posts",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Author\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nMore on transliteration\n\n\n\n\n\n\n\n\nJun 22, 2025\n\n\nElango Cheran\n\n\n\n\n\n\n\n\n\n\n\n\nFive Pirates Treasure Splitting\n\n\nSharing ideas and pirate treasure with ClojureCivitas.\n\n\n\n\n\nJun 18, 2025\n\n\nTimothy Pratley\n\n\n\n\n\n\n\n\n\n\n\n\nAbout Transliteration\n\n\n\n\n\n\n\n\nJun 8, 2025\n\n\nElango Cheran\n\n\n\n\n\n\n\n\n\n\n\n\nThe Hidden Geometry of Dice\n\n\nA simple probability puzzle turns into a journey through triangular numbers and tessellated hexagons.\n\n\n\n\n\nJun 5, 2025\n\n\nTimothy Pratley\n\n\n\n\n\n\n\n\n\n\n\n\nWhat if… we were taught transducers first?\n\n\n\n\n\n\n\n\nMay 31, 2025\n\n\nSean Corfield\n\n\n\n\n\n\n\n\n\n\n\n\nThe Hallway Track: SciNoj Light #1 Data Analysis Stories\n\n\n\n\n\n\n\n\nMay 28, 2025\n\n\nTimothy Pratley\n\n\n\n\n\n\n\n\n\n\n\n\nFactorization of Eratosthenes\n\n\n\n\n\n\n\n\nMay 28, 2025\n\n\nTim Schafer\n\n\n\n\n\n\n\n\n\n\n\n\nClean object printing by removing extraneous\n\n\n\n\n\n\n\n\nMay 26, 2025\n\n\nTimothy Pratley\n\n\n\n\n\n\n\n\n\n\n\n\nThe Z-Combinator Gambit\n\n\n\n\n\n\n\n\nMay 25, 2025\n\n\nChris Houser, Timothy Pratley\n\n\n\n\n\n\n\n\n\n\n\n\nNoj Reload Executable\n\n\n\n\n\n\n\n\nMay 6, 2025\n\n\nTimothy Pratley\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "math/stats/quantquestions/what_are_the_odds/the_hidden_geometry_of_dice.html",
    "href": "math/stats/quantquestions/what_are_the_odds/the_hidden_geometry_of_dice.html",
    "title": "The Hidden Geometry of Dice",
    "section": "",
    "text": "Welcome to What Are the Odds? The show where we answer life’s important questions, like can I outsmart a six-sided die? Today we’re starting small. Two rolls of the dice and one burning question. No magic formulas, just curiosity, some patient counting, and a faint hope that math is on our side. Let’s roll.\n\nPop quiz: You roll a fair 6-sided die twice. Calculate the probability that the value of the first roll is strictly less than the value of the second roll.\n\nAs I always like to say to my niece, “the secret to answering any probability question is to enumerate the outcomes and count the ones we care about.”\n\\(P(Interesting) = InterestingOutcomes / TotalOutcomes\\)\nRolling 1 die once has 6 outcomes: 1 2 3 4 5 6.\nRolling 1 die twice gives us a combination of outcomes, let’s write out a few.\n[1 1] [1 2] '... [1 6]\n[2 1] [2 2] '...\nFollowing this pattern would produce 6 rows of 6 columns, so there must be 36 outcomes. We write down just enough of the pattern to figure out the best way to count it. Now we count how many of those meet the criteria.\n[1 1 :no] [1 2 :yes] '...\n[2 1 :no] [2 2 :no] [2 3 :yes] '...\nLogically we should see 5 yeses on the first row, then 4, 3, 2, 1, and 0, which we can ignore. Add them all up and we get 15.\nSo the answer to the question is 15/36 which reduces to 5/12, dividing top and bottom by the greatest common divisor 3.\nYou might be thinking that it’s not practical to enumerate everything all the time, I should use the formulas of probability. That’s true, those are marvelous. However, in my experience it is also easy to go wrong reasoning from formulas. It’s harder to go wrong starting with a counting problem, then improving your method of counting. You end up in the same place, but more confident in the answer.\nThe full enumeration of our simple 2 roll question as a counting problem is just big enough to be too tedious to use only counting.\n\n(let [roll [1 2 3 4 5 6]]\n  (for [i roll]\n    (for [j roll]\n      [i j])))\n\n\n(([1 1] [1 2] [1 3] [1 4] [1 5] [1 6])\n ([2 1] [2 2] [2 3] [2 4] [2 5] [2 6])\n ([3 1] [3 2] [3 3] [3 4] [3 5] [3 6])\n ([4 1] [4 2] [4 3] [4 4] [4 5] [4 6])\n ([5 1] [5 2] [5 3] [5 4] [5 5] [5 6])\n ([6 1] [6 2] [6 3] [6 4] [6 5] [6 6]))\n\nIdentifying the pattern is enough to realize the answer\n\n(+ 5 4 3 2 1)\n\n\n15\n\nWhat a marvelous pattern it is! Predictable, but not flat. Smooth, but not boring. Recursive, and not obvious.\n\n[1 3 6 10 15 21 28 36 45 55 66 78 91 105 120 136 153 171 190 210]\n\nThere’s something special about this sequence. Aren’t those numbers just… pleasing in some way?\nThis sequence is called the triangular numbers.\n            .\n           . .\n          . . .\n         . . . .\nYou can find the first 10 or so numbers in your head, and with some paper many more quite quickly.\n\n\n\nSo many dots\n\n\nThere is a formula for calculating the nth triangular number: \\(T_n = 1 + 2 + 3 + \\dots + n = \\frac{n(n + 1)}{2}\\)\nThe 20th triangular number is (20x21)/2 = (400+20)/2 = 210. Isn’t it wonderful how there’s so many different ways to find the same answer in math?\nThere is something curious about the formula; it divides by 2 but only produces integers. How can we be certain we will only ever get an integer? So mysterious. n(n+1) is always even! Let’s think about that a bit more, if n is odd, then n+1 is even. If n is even, then n+1 is odd. One of the multiples is always even, meaning that 2 is a factor, so the multiple must always have a factor 2, and be even.\nIt’s easy now to imagine if we had a 1000 sided dice what the answer would be. But be careful! For a 1000 side die, we want the 999nth triangular number: \\((999 \\times 1000)/2 = (1000000-1000)/2 = 500000-500 = 499500\\) and the total outcomes would be 1000x1000, so the answer would be 0.4995. It’s comforting to see that for a large range, we land closer to 50%.\nThe point is that once we know what we are counting, it feels more obvious that we used the right formula to count it.\nTriangular numbers show up in many situations, my favorite is that they can be used to lay out hexagons. The code that draws Clojure Civitas hexagons is based on the triangular number formula.\n\nTriangular numbers also show up in the number of pairs, handshakes, edges in a complete graph, diagonals sum to triangular numbers, square numbers as sums of consecutive odd numbers, differences of triangulars, acceleration frames, smooth transitions, spacing. Such a beautiful pattern that can be found in so many situations!\nUntil next time, may your dice be fair and your outcomes interesting.\n\nsource: src/math/stats/quantquestions/what_are_the_odds/the_hidden_geometry_of_dice.clj"
  },
  {
    "objectID": "civitas/authors.html",
    "href": "civitas/authors.html",
    "title": "Authors",
    "section": "",
    "text": "You belong here!\nThank you for sharing your ideas.\nAlex MillerClojure.coreChris HouserDaniel SlutskySciclojElango CheranSean CorfieldClojure CampTim SchaferClojure CampTimothy PratleyHummi\n\nsource: src/civitas/authors.clj"
  },
  {
    "objectID": "clojure/transducers/what_if.html",
    "href": "clojure/transducers/what_if.html",
    "title": "What if… we were taught transducers first?",
    "section": "",
    "text": "Most Clojure tutorials start out with sequence functions like map, filter etc, and then explain how to avoid some of the problems that lazy sequences can cause. Transducers tend to be introduced later as a more advanced topic, but I’d argue that they could (and should) be taught earlier, and instead treat lazy sequences as an advanced topic.\nWhat if… we were taught transducers first?\nWe’re typically taught to use map or filter on a sequence or collection to produce a new sequence – and there’s often a comment that map applied to a vector does not produce a vector. With transducers, one of the key concepts is that the transformation is separated from the input and also from the output.\nLet’s start out with the sequence function, just to show how we can go straight to a sequence of results:\n\n(sequence (map inc) (range 5))\n\n\n(1 2 3 4 5)\n\nsequence works with multiple collections, like map:\n\n(sequence (map *) (range 5) (range 5) (range 5))\n\n\n(0 1 8 27 64)\n\n\n(sequence (map vector) (range 5) (range 5) (range 5))\n\n\n([0 0 0] [1 1 1] [2 2 2] [3 3 3] [4 4 4])\n\nHow about chaining several transformations together? We can use eduction (but see the caveats below about eduction):\n\n(eduction (filter even?) (map inc) (range 10))\n\n\n(1 3 5 7 9)\n\nLet’s look at producing different types of output, using into:\n\n(into [] (map inc) (range 5))\n\n\n[1 2 3 4 5]\n\n\n(into #{} (map inc) (range 5))\n\n\n#{1 4 3 2 5}\n\nUnder the hood, into uses conj so if you use a list, the order is reversed (because conj onto a list prepends items, whereas conj onto a vector appends items):\n\n(into () (map inc) (range 5))\n\n\n(5 4 3 2 1)\n\nFor the next level of control, we can use transduce to specify how to combine the results, as well as what we start with initially:\n\n(transduce (map inc) conj [] (range 5))\n\n\n[1 2 3 4 5]\n\n\n(transduce (map inc) conj #{} (range 5))\n\n\n#{1 4 3 2 5}\n\n\n(transduce (map inc) conj () (range 5))\n\n\n(5 4 3 2 1)\n\nWe might be tempted to use cons here, but its argument order is different from conj so this will fail:\n\n(try (transduce (map inc) cons () (range 5))\n     (catch Exception e (ex-message e)))\n\n\n\"Don't know how to create ISeq from: java.lang.Long\"\n\nOkay, well, let’s use an anonymous function to reverse the order of the arguments:\n\n(try (transduce (map inc) #(cons %2 %1) () (range 5))\n     (catch Exception e (ex-message e)))\n\n\n\"Wrong number of args (1) passed to: clojure.transducers.what-if/eval72403/fn--72404\"\n\nWhy is it trying to call cons with a single argument? In addition to separating the transformation from the output, transduce also has a “completion” step, which is performed on the final result. A convenience function called completing can be used to wrap the function here to provide a “no-op” completion:\n\n(transduce (map inc) (completing #(cons %2 %1)) () (range 5))\n\n\n(5 4 3 2 1)\n\ncompleting lets us provide a “completion” function (instead of the default which is identity) so we could reverse the result:\n\n(transduce (map inc) (completing #(cons %2 %1) reverse) () (range 5))\n\n\n(1 2 3 4 5)\n\nInstead of producing a collection result, we can also use transduce to compute results in other ways:\n\n(transduce (map inc) + 0 (range 5))\n\n\n15\n\n\n(transduce (map inc) * 1 (range 5))\n\n\n120\n\nThe way (transduce xf f init coll) works is pretty much like this:\n(let [rf (xf f)]\n  (rf (reduce rf init coll)))\nNote how xf and f are combined to create a single “reducing function” (which is a 2-arity function that takes an accumulator and a value), for the reduce and then also applied to the result as a 1-arity function, which is what completing does for us in the above example.\nNow let’s circle back to chaining transformations, while also controlling the output type. We can use comp for this. As a recap, here’s our eduction from earlier:\n\n(eduction (filter even?) (map inc) (range 10))\n\n\n(1 3 5 7 9)\n\nWe can compose multiple transducers:\n\n(comp (filter even?) (map inc))\n\n\n#fn [comp$fn]\n\nLet’s give this a name:\n\n(def evens+1 (comp (filter even?) (map inc)))\n\n\n(into [] evens+1 (range 10))\n\n\n[1 3 5 7 9]\n\n\n(into #{} evens+1 (range 10))\n\n\n#{7 1 3 9 5}\n\nWe glossed over the result of eduction earlier – it produced a sequence because we printed it out, but it is a “reducible” that has captured both its input and the series of transformations to apply, so we could pass it directly to into or transduce as if it were a collection:\n\n(into [] (eduction (filter even?) (map inc) (range 10)))\n\n\n[1 3 5 7 9]\n\n\n(into [] (eduction evens+1 (range 10)))\n\n\n[1 3 5 7 9]\n\nBecause it is a “reducible”, it only does work when it is consumed, so it is “lazy” in that sense, but it is not a lazy sequence. We can get a lazy sequence from a transducer using sequence, if we want, or we can rely on into and transduce etc being eager. In addition, eduction performs the transformations each time it is consumed:\n\n(let [s (eduction (map #(inc (doto % println))) (range 5))]\n  [(into [] s)\n   (into [] s)])\n\n\n0 1 2 3 4 0 1 2 3 4\n\n\n[[1 2 3 4 5] [1 2 3 4 5]]\n\nThat will print 0 1 2 3 4 twice, because the eduction is consumed twice. Compare that behavior to sequence, which produces a lazy sequence and caches its results:\n\n(let [s (sequence (map #(inc (doto % println))) (range 5))]\n  [(into [] s)\n   (into [] s)])\n\n\n0 1 2 3 4\n\n\n[[1 2 3 4 5] [1 2 3 4 5]]\n\nThis will only print 0 1 2 3 4 once.\nIn conclusion, by separating the transformation from the input and the output, we gain expressive power, flexibility, and reuse: we can compose transducers, we can apply them to any input that produces values, and consume the results in any way we like.\nFor example, transducers can be used in several different ways with core.async channels:\n\non a channel\nin a pipeline\nor consumed with transduce\n\n\nsource: src/clojure/transducers/what_if.clj"
  },
  {
    "objectID": "internationalization/transliteration.html",
    "href": "internationalization/transliteration.html",
    "title": "About Transliteration",
    "section": "",
    "text": "Transliteration is about systematically converting the way in which text encodes language (or information) from one writing system (or convention or format) to another.\nWe most commonly think of this for human languages, when converting the sounds spoken in a language from one writing system to another (ex: Chinese language sounds written as ideographs into English language sounds written in the Latin script).\nThe idea of transliteration can be thought of more generically for computers that need to transform text or even file formats.\n\n(def translit-map\n  \"This map defines a transliteration scheme for transforming text, in this case,\n  from Latin script character sequences (of English words) into emojis.\n\n  We define our transformation mappings in a map. In this way, it looks a lot like an\n  input to the Clojure `replace` function. This map will be used as an input for the prefix tree\n  (a.k.a. trie) data struture used to convert.\"\n  {\"happy\" \"🙂\"\n   \"happier\" \"😀\"\n   \"happiest\" \"😄\"})\n\n\n(def translit-trie\n  \"Create the prefix tree (a.k.a. trie) data structure based on our transliteration mappings\n  map that defines our transliteration.\"\n  (fmt/make-trie translit-map))\n\nA prefix tree is also called a trie. A prefix tree is a way to store a collection of sequences (ex: strings) efficiently when there is a lot of overlapping prefixes among the strings.\nA dictionary for an alphabetic language is a good example of when a prefix tree is efficient in space. Imagine all of the words in a single page of the dictionary. It could look like “cat”, “catamaran”, “catamount”, “category”, “caternary”, etc. It could instead be stored as:\nc - a - t *\n           a - m\n                  a - r - a - n *\n                  o - u - n - t *\n           e\n              g - o - r - y *\n              r - n - a - r - y *\nWhy would we use a prefix tree? Even if the source text patterns in the replacement rules are overlapping, we could perform replacement without a tree if we order the replacement rules by the source text pattern, such that a pattern that contains another pattern is applied earlier. However, to perform this ordering in a globally scalable way would effectively require constructing a prefix tree. Furthermore, a map of rules better models the notion of rules being independent data that are not complected with other rules. Also, as the number of rules increases, there may be performance benefits in terms of lookup in a prefix tree versus attempting to apply all rules in the ruleset sequentially.\nLet’s introspect into our prefix tree. Let’s see which input strings have a\n\n(fmt/in-trie? translit-trie \"hap\")\n\n\nfalse\n\n\n(fmt/in-trie? translit-trie \"happy\")\n\n\ntrue\n\n\n(fmt/in-trie? translit-trie \"happier\")\n\n\ntrue\n\n\n(fmt/in-trie? translit-trie \"happiest\")\n\n\ntrue\n\n\n(fmt/in-trie? translit-trie \"happiest!\")\n\n\nfalse\n\n\n(def s \"Hello, world! Happiness is not being happiest or happier than the rest, but instead just being happy.\")\n\n\n(defn convert\n  \"Use our translit-trie to convert the input string into the output string\"\n  [s]\n  (-&gt;&gt; (fmt/str-&gt;elems translit-trie s)\n       (apply str)))\n\n\n(def converted\n  \"Create the converted string according to our transliteration rules.\"\n  (convert s))\n\n\nconverted\n\n\n\"Hello, world! Happiness is not being 😄 or 😀 than the rest, but instead just being 🙂.\"\n\nIt’s worth noting that a prefix tree, when used to do transliteration conversions, is effectively the finite state machine (FSM) needed to parse and transform.\nFor next time: What if we implicitly did that same conversion by constructing a regular expression (regex) that can match on the input patterns. Could that be equally fast, or faster than our naive Clojure implementation? A regex might work like so:\nlet text = \"this is a test\";\nconst replacementMap = { 'th': 'X', 't': 'Y' };\n\nlet result = text.replace(/th|t/g, (match) =&gt; {\n                                               return replacementMap[match];\n                                               });\n\nconsole.log(result);\n\nsource: src/internationalization/transliteration.clj"
  }
]