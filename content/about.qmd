# About

## Welcome to Clojure Civitas

<img src="images/civitas-icon.svg" alt="Civitas Icon" align="right">

An open effort to structure learning resources with meaningful connections.

Explore the [Clojure Civitas Website](https://ClojureCivitas.github.io)

<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1rem; margin: 2rem 0;">
<div style="border-left: 3px solid green; padding-left: 1rem;">
<h3>Non-linear exploration</h3>
<p>Navigate your own path through interconnected topics.</p>
</div>
<div style="border-left: 3px solid blue; padding-left: 1rem;">
<h3>Literate by design</h3>
<p>Write notebooks and place them in context, linking knowledge.</p>
</div>
<div style="border-left: 3px solid orange; padding-left: 1rem;">
<h3>Community supported growth</h3>
<p>The best resources rise through collective refinement.</p>
</div>
</div>

## Contribute

Your perspective matters.

### Build the database

Add to or modify [db.edn](quarto/db.edn)

### Write notebooks

Add a notebook in the [`/content`](content) folder.

See the [Clay Documentation](https://scicloj.github.io/clay) for information on how to interactively visualize the
notebook as you write it.

### Preview the full website

```sh
clojure -M:clay -a [:markdown]
```

```sh
quarto preview site
```

### Publish

Merged pull requests are shown on the website via a workflow.

## Rationale

<div style="text-align: center; font-family: 'Georgia', serif; font-size: 1.5rem; margin: 2rem 0; color: #2e7d32;">
Exploramus, Communicamus, Crescimus<br>
<small style="font-size: 1rem; color: #555;">We explore, we share, we grow.</small>
</div>

Civitas Clojure offers a hassle-free way to host and share your notebooks without the overhead of creating a new project each time.
By providing a shared, well-organized platform, it lets you focus on your ideas and code while automatically publishing your work to GitHub Pages.
This streamlines collaboration, increases visibility, and makes contributing simple and efficient—so you can spend less time on setup and more time creating.

Learning technical subjects involves navigating complex webs of concepts.
Currently, resources for learning Clojure exist as isolated articles, unconnected tutorials, or flat lists that do not
capture how ideas relate to each other.
This makes it difficult for learners to determine logical next steps or see how topics connect.
Teachers and curriculum designers face similar challenges when trying to organize material in ways that reflect actual
dependencies and alternatives.

Civitas approaches this problem by implementing a structured knowledge base where resources are explicitly linked based
on their conceptual relationships.
The hexagonal grid interface provides a visual representation of these connections, allowing users to naturally discover
related content.
Each resource includes metadata to indicate prerequisites, alternatives, and deeper explorations.

This structure serves several practical purposes.
Learners can see multiple valid paths through the material.
Teachers can construct guided sequences while maintaining visibility of adjacent concepts.
The community can improve resources incrementally by adding or refining connections.
The system is designed to grow organically as new relationships are identified and documented.

The value lies not in any single feature, but in making the existing ecosystem of learning resources more navigable and
interconnected.

<img src="images/bees.jpg" alt="Honey bees behive" style="width: 100%;">

## Embracing alternatives

It is not a goal to centralize Clojure knowledge creation.
It is a goal to provide a welcoming pattern that works with other communities and users.
ClojureCivitas can be used as a library to simplify publishing your own garden of content.

## Design

### File system organization

| Directory      | Description                                                          |
|----------------|----------------------------------------------------------------------|
| `src`          | Code for building a website and database                             |
| `content`      | Source root for notebooks (Clojure and Markdown), images, data files |
| `content/idea` | The `idea` namespace hosts explorations, concepts and insights       |
| `content/lib`  | The `lib` namespace is tied to libraries, tools, and projects        |
| `site`         | Temporary build target for the Quarto website                        |

Shared images can go in `content/images`, but prefer images and data files as siblings to your namespace.

The difference between a posts and a page is identified by the presence or absence of `date` metadata.

Namespace selection for notebooks follow standard Clojure namespace conventions to avoid conflicts.
Choose namespaces that fit with the content-first hierarchy.
Files are grouped by what they’re about (not who wrote them or where they were presented).
Author, date, tags and categories are included in metadata and will be used for grouping, filter of views.

Disambiguation: If a topic exists, qualify with additional context.

Civitas invokes [Clay](https://github.com/scicloj/clay) to convert Clojure notebooks into Markdown files, placing them
in the `site` directory.
This `site` directory serves as a build folder for [Quarto](https://quarto.org/).
Avoid adding files directly to `site`.

Static assets (such as images or data files) should be placed in the `content` directory.
During the build process, any files in the `content` directory that are not Clojure files, are copied into the `site`
directory.
Quarto then builds the Markdown in `site` into HTML, which is placed in `_site` before deploying it to GitHub Pages.

During development, Clay serves HTML from the `temp` directory, which is git ignored.

Goal: Align with Clojure’s code organization while allowing organic, practical growth.

### Topic organization

Follow the Quarto convention of categories, tags, and keywords.
Fixed categories; `community`, `clojure`, `data`, `system`, `tooling`, `web`.
Tags; flexible, open-ended for finer-grained labeling (e.g. `frontend`, `reagent`).
Keywords; for SEO or search indexing; typically fewer and focused on discoverability.

Tags and metadata are the preferred organization principle:
[Categories, Links, and Tags](https://gwern.net/doc/philosophy/ontology/2005-04-shirky-ontologyisoverratedcategorieslinksandtags.html)

Goal: Constellations, not cabinets.

### Dependency management

A single `deps.edn` file is shared across all notebooks.

Pros:

* Simplifies website builds.
* Works for authoring as well as building.

Cons:

* Version conflicts must be manually resolved.
* Only one version per dependency.
* Notebooks aren’t self-contained.

Future:

* Support additional directories under `standalone` with their own `deps.edn`.
* Regression testing would help when versions update.

Goal: Minimize friction in authoring while ensuring publishable reproducibility.

## License

Copyright © 2025 Timothy Pratley

Distributed under the Eclipse Public License version 1.0.
