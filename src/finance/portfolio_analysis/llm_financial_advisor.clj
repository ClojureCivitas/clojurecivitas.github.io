^{:kindly/hide-code true     ; don't render this code to the HTML document
  :clay             {:title  "A Clojure-based Portfolio Analysis Tool based on LLM Integration"
                     :external-requirements ["key_config.edn"]
                     :quarto {:author       [:edwardaw :tanvi :mattb]
                              :description  "A portfolio analysis program with market narratives generated by an LLM."
                              :type     :post
                              :date     "2025-09-20"
                              :category :finance
                              :tags     [:metadata :civitas "cim" :finance :portfolio :llm]}}}
(ns finance.portfolio-analysis.llm-financial-advisor
  (:require [clojure.data.json :as json]
            [clojure.edn :as edn]
            [clojure.java.io :as io]
            [clj-http.client :as client]))


;; ---

;; ## 1. Abstract

;; This blog post presents the design and implementation of a Portfolio Analysis Program built almost entirely in Clojure for The University of Hong Kong’s Center for Investment Management.

;; The program enables users to construct custom portfolios from individual stocks or asset classes, evaluate performance using key financial metrics, and visualize results interactively.

;; What sets this tool apart is its integration of financial market narratives through a Large Language Model (LLM), which contextualizes portfolio performances using real-time financial news.

;; ---

;; ## 2. Data and Methodology

;; ### 2.1. Yahoo Finance (libpython-clj and yfinance)

;; The program leverages the “yfinance” API on Python to retrieve critical financial data, enabling robust portfolio construction and performance evaluation. 
;; By utilizing libpython-clj, a Clojure library that facilitates seamless integration with Python, we created an efficient wrapper around the yfinance library that allows us to 
;; access open and close price data for individual stocks (see our other [blog](https://clojurecivitas.github.io/finance/portfolio_analysis/alpha_beta_regression.html) for code examples).

;; ### 2.2. Portfolio Construction, Performance and Visualization

;; The program allows users to define their stock trades by inputting a csv file that contains the stocks’ ticker, volume and action(buy/sell). 
;; These actions would then be reflected within the program and be collated into a financial investment portfolio.

;; Using the program, we can track the portfolio’s various financial metrics (notebook-style visualization with Clay), which include:

;; ● Portfolio Return: Total percentage change in portfolio value.  
;; ● Annualized Return: Compounded annual growth rate (CAGR).  
;; ● Volatility: Standard deviation of daily returns, measuring risk.  
;; ● Rolling Annualized Volatility: Annualized risk trends over a moving window.

;; Metrics are computed from open and close prices of portfolio assets, processed efficiently in Clojure. For visualization, the program integrates 
;; Plotly to render interactive charts, including line plots for the aforementioned metrics.

;; ![Figure: Interactive line plot of portfolio value](./figures/portfolio-value.png)
;; ![Figure: Interactive line plot of rolling volatility](./figures/rolling-volatility.png)

;; ### 2.3. AI Financial Advisor

;; The Portfolio Analysis Program enhances user insights by calling Large Language Models (Deepseek V3.1) via API endpoints, 
;; providing market condition narratives that may explain the performance of the portfolio. 
;; In this case, we utilize Clojure’s clj-http library to build an HTTP client to retrieve LLM responses from these API’s.

;; The following is a short code preview to obtain LLM responses.<br>

;; Here, we create a function to load our API keys through our secret .edn file.

(defn load-config []
  (with-open [r (io/reader "./src/finance/portfolio_analysis/key_config.edn")]
    (edn/read (java.io.PushbackReader. r))))

;; We then create a function to retrieve LLM responses based on a query (the `client-message` variable).

(defn ask-chatbot [client-message]
  (let [deepseek-api-key (:deepseek-api-key (load-config)) ;; Load our API key
        payload {:model "deepseek-chat" ;; Non-reasoning model
                 :max-tokens 200 ;; ~150 words
                 :messages [{:role "system" :content "You are a helpful assistant."}
                            {:role "user" :content client-message}]
                 :stream false}]

    ; Send request to API Endpoint and deserialize response
    (let [response-body (json/read-str ((client/post "https://api.deepseek.com/chat/completions"
                                                     {:content-type :json
                                                      :headers {"Authorization" (format "Bearer %s" deepseek-api-key)}
                                                      :body (json/write-str payload)}) :body) :key-fn keyword)]

        ; Deserialize the response and obtain LLM response
      {:message (((first (response-body :choices)) :message) :content)
       :token-usage (response-body :usage)})))

;; Now, we test the chatbot's response through the following prompt.

(def basic-chatbot-response (ask-chatbot "Can you tell me the current market conditions that may affect one's portfolio?"))

(:message basic-chatbot-response)

;; Using another API service from NewsAPI.org, we provide financial news articles from which the LLM would retrieve context to base its response from.
;; The retrieved news data is appended into the LLM prompt alongside portfolio metrics (e.g., returns, volatility) to generate concise explanatory narratives.
;; As a demonstration let's use this [article](https://www.wsj.com/finance/stocks/u-s-stocks-rose-this-week-after-the-fed-made-a-rate-cut-and-signaled-more-to-come-2f29d509) from the Wall Street Journal.
;; With this, we can provide a better prompt for the LLM. Instead of "Can you tell me the current market conditions that may affect one's portfolio?",
;; we can have:

(def enhanced-chatbot-response (ask-chatbot
                                "According to the WSJ on 19 September 2025, Stocks closed the week at record highs, propelled by investor optimism that the Federal Reserve 
                        will keep cutting interest rates—and keep the market rally going. All three major indexes posted weekly gains of more than 1%. 
                        The Fed cut the benchmark borrowing rate by 0.25% on Wednesday, and traders are now anticipating additional rate reductions in October and December. 
                        The median projection of the Fed’s interest-rate setting committee also penciled in two additional cuts in 2025.
                        
                        The S&P 500 rose 0.5% on Friday, while the tech-heavy Nasdaq gained 0.7%. The Dow Jones Industrial Average added 0.4%, or 173 points.
                        
                        Based on this information, can you tell me the current market conditions that may affect one's portfolio?"))

(:message enhanced-chatbot-response)

;; These narratives highlight potential reasons for performance, such as earnings reports or market events, guiding users on factors to investigate further.



;; ---

;; ## 3. Pedagogical Bridge: A Contextual Analysis

;; To ground the tool in intuitive understanding, we draw a parallel between financial performance and student learning assessment. 
;; Just as a grade alone doesn’t explain why a student succeeded or struggled, a return figure doesn’t explain why a portfolio moved.

;; We ask: Can we help investors understand not just what happened, but why?

;; ---

;; ## 4. Results and Discussion

;; ### 4.1. On the Value of Contextual Analytics

;; While many tools report what happened, few explain why. Our Portfolio Analysis Program closes this gap by combining quantitative analysis with natural language reasoning.
;; This hybrid approach supports both novice learners and experienced investors in diagnosing performance.

;; An important factor that will be extensively covered will be the idea of prompt engineering. Since the aim is to reduce hallucinations from AI, 
;; while bringing most relevant information to the forefront and potentially even make the tool diagnostic in nature, there will be clear attention to making the in-built prompt clear, 
;; structured and actionable. The AI’s role will be defined and the prompt will be potentially dynamic and change according to unique dates and portfolio requirements.

;; ### 4.2. On Clojure’s Role in Modern Financial Systems

;; Clojure proves exceptionally well-suited for this kind of multi-system integration:

;; ● Its JVM foundation enables seamless interaction with Java and Python ecosystems  
;; ● Functional design prevents side effects in complex pipelines  
;; ● REPL-driven development allows rapid iteration and debugging  

;; The Portfolio Analysis Program demonstrates that Clojure is not just a language for backend services, but a first-class platform for intelligent financial applications.

;; ### 4.3. Educational Implications

;; By linking portfolio metrics to real-world events, the Portfolio Analysis Program fosters critical thinking in investment education. Students learn to:

;; ● Distinguish noise from signal  
;; ● Connect macro events to portfolio outcomes  
;; ● Evaluate whether returns were due to skill or circumstance

;; This creates a richer, more reflective learning experience, moving beyond spreadsheet-based grading to narrative-driven feedback.

;; By generating narrative explanations, e.g. “Apple’s 5% drop on June 3rd followed a weaker-than-expected iPhone sales forecast”, the tool transforms abstract volatility into contextual insight. This mirrors how educators use feedback to guide improvement, making PAT not just an analytics engine, but a coaching system.

;; This narrative-first approach is especially valuable in teaching environments, where students benefit from connecting market movements to real-world events.

;; ---

;; ## 5. Conclusion

;; This project demonstrates that:

;; ● Functional programming in Clojure enables elegant, maintainable financial tooling.  
;; ● Integrating AI with traditional analytics adds interpretability and depth.  
;; ● Performance metrics become more meaningful when paired with contextual narratives.

;; We conclude that the future of portfolio analysis lies not in bigger dashboards, but in smarter, self-explaining systems.
;; By building a Portfolio Analysis Program in Clojure, we show how a principled, functional approach can power tools that are not only technically sound, but also educationally transformative.

;; ---

;; ## 6. Future Work

;; ● Add support for multi-asset portfolios (ETFs, bonds, crypto)  
;; ● Implement automated anomaly detection (e.g., unexpected drawdowns)  
;; ● Build a web interface using ClojureScript and Reagent for broader access  
;; ● Integrate with student trading logs for real-time feedback in portfolio management courses  
;; ● Develop custom benchmark comparisons (e.g., vs. S&P 500, sector indices)