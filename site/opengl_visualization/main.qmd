---
author:
- name: Jan Wedekind
  url: https://www.wedesoft.de/
  image: https://avatars.githubusercontent.com/u/28663?v=4
  links:
  - {icon: github, href: 'https://github.com/wedesoft'}
type: post
date: '2025-09-09'
category: clojure
tags: [visualization]
format:
  html: {title: OpenGL Visualization with LWJGL}

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style><style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="main_files/md-default1.js" type="text/javascript"></script><script src="main_files/md-default2.js" type="text/javascript"></script>
https://scicloj.github.io/clay/clay_book.examples.html

clj -M:clay -A:markdown
quarto render site


::: {.sourceClojure}
```clojure
(defn tmpname
  []
  (str (System/getProperty "java.io.tmpdir") "/civitas-" (java.util.UUID/randomUUID) ".tmp"))
```
:::



::: {.sourceClojure}
```clojure
(GLFW/glfwInit)
```
:::



::: {.printedClojure}
```clojure
true

```
:::



::: {.sourceClojure}
```clojure
(def window-width 640)
```
:::



::: {.sourceClojure}
```clojure
(def window-height 480)
```
:::



::: {.sourceClojure}
```clojure
(def window
  (do
    (GLFW/glfwDefaultWindowHints)
    (GLFW/glfwWindowHint GLFW/GLFW_DEPTH_BITS 24)
    (GLFW/glfwWindowHint GLFW/GLFW_STENCIL_BITS 8)
    (GLFW/glfwWindowHint GLFW/GLFW_VISIBLE GLFW/GLFW_FALSE)
    (GLFW/glfwCreateWindow window-width window-height "Invisible Window" 0 0)))
```
:::



::: {.sourceClojure}
```clojure
(do
  (GLFW/glfwMakeContextCurrent window)
  (GL/createCapabilities))
```
:::



::: {.printedClojure}
```clojure
#object [GLCapabilities]

```
:::



::: {.sourceClojure}
```clojure
(GL11/glClearColor 1.0 0.5 0.25 1.0)
```
:::



::: {.printedClojure}
```clojure
nil

```
:::



::: {.sourceClojure}
```clojure
(GL11/glClearDepth 0.0)
```
:::



::: {.printedClojure}
```clojure
nil

```
:::



::: {.sourceClojure}
```clojure
(GL11/glClear (bit-or GL11/GL_COLOR_BUFFER_BIT GL11/GL_DEPTH_BUFFER_BIT))
```
:::



::: {.printedClojure}
```clojure
nil

```
:::



::: {.sourceClojure}
```clojure
(def buffer (java.nio.ByteBuffer/allocateDirect (* 4 window-width window-height)))
```
:::



::: {.sourceClojure}
```clojure
(GL11/glReadPixels 0 0 window-width window-height GL11/GL_RGBA GL11/GL_UNSIGNED_BYTE buffer)
```
:::



::: {.printedClojure}
```clojure
nil

```
:::



::: {.sourceClojure}
```clojure
(let [filename (tmpname)]
  (STBImageWrite/stbi_write_png filename window-width window-height 4 buffer (* 4 window-width))
  (-> filename io/file (ImageIO/read)))
```
:::


::: {.clay-image}

```{=html}
<img class="clay-image" src="main_files/image0.png" />
```

:::



::: {.sourceClojure}
```clojure
(GLFW/glfwDestroyWindow window)
```
:::



::: {.printedClojure}
```clojure
nil

```
:::



::: {.sourceClojure}
```clojure
(GLFW/glfwTerminate)
```
:::



::: {.printedClojure}
```clojure
nil

```
:::



```{=html}
<div style="background-color:grey;height:2px;width:100%;"></div>
```



```{=html}
<div><pre><small><small>source: <a href="https://github.com/ClojureCivitas/clojurecivitas.github.io/blob/main/src/opengl_visualization/main.clj">src/opengl_visualization/main.clj</a></small></small></pre></div>
```
